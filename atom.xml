<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Slinky&#39;s corner</title>
  
  <subtitle>Personal blog of Francesco Guardiani, Software Engineer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://slinkydeveloper.github.io/"/>
  <updated>2019-01-20T16:28:08.117Z</updated>
  <id>https://slinkydeveloper.github.io/</id>
  
  <author>
    <name>Software Engineer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Debts Manager Tutorial Part 2: Contract Design</title>
    <link href="https://slinkydeveloper.github.io/Debts-Manager-Tutorial-Contract-Design/"/>
    <id>https://slinkydeveloper.github.io/Debts-Manager-Tutorial-Contract-Design/</id>
    <published>2019-01-20T08:10:00.000Z</published>
    <updated>2019-01-20T16:28:08.117Z</updated>
    
    <content type="html"><![CDATA[<p>Hi guys! Welcome back to this tutorial!</p><p>In this second chapter of Debts Manager Tutorial I would like to show you how I have designed the REST API of Debts Manager. I&#x2019;m going to follow the <em>API First</em> approach, documenting all aspects of the API Design with OpenAPI 3.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>The REST APIs, in contrast with RPC, are driven by the data the services wants to expose. In the previous chapter I gave you an idea of the entities we must expose. Now I tabulate these and the relative operations on it.</p><table><thead><tr><th>Entity</th><th>Create</th><th>Retrieve</th><th>Update</th><th>Delete</th></tr></thead><tbody><tr><td>User</td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8">&#x2714;</span></td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8">&#x2714;</span></td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8">&#x274C;</span></td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8">&#x274C;</span></td></tr><tr><td>User relationship</td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8">&#x2714;</span></td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8">&#x2714;</span></td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8">&#x274C;</span></td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8">&#x274C;</span></td></tr><tr><td>Transaction</td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8">&#x2714;</span></td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8">&#x2714;</span></td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8">&#x2714;</span></td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8">&#x2714;</span></td></tr><tr><td>Status</td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8">&#x274C;</span></td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2714.png?v8">&#x2714;</span></td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8">&#x274C;</span></td><td><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8">&#x274C;</span></td></tr></tbody></table><p>This table is a pretty good starting point, but I must refine the analysis enforcing our methods with policies and logics.</p><p>These policies are primarly based on <em>who is making the request</em>. I&#x2019;m going to define a login phase together with JWT to provide authorization and authentication. Each endpoint, except <code>login</code> and <code>register</code>, is secured with a JWT auth. My objective is expose, for each user, only a subset of data relative to the user itself.</p><h2 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h2><p>Before defining the endpoints I must formally describe the data models representing the service entities. OpenAPI has its own Json Schema dialect to define models: <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject" target="_blank" rel="noopener">OpenAPI Schema</a>. This is an extended subset of <a href="http://json-schema.org/specification-links.html#draft-5" target="_blank" rel="noopener">Json Schema Draft 5</a>. Meanwhile I&#x2019;m writing, there is a proposal to allow usage of every version of Json Schema, including the newer versions, with an extension <a href="https://github.com/OAI/OpenAPI-Specification/issues/1532" target="_blank" rel="noopener">https://github.com/OAI/OpenAPI-Specification/issues/1532</a>.</p><p>I place these schemas in main OpenAPI file under <code>components</code> and <code>schemas</code> keywords. I can refeer to it using Json schema references (<code>$ref</code> keyword).</p><p>The simplest model here is the user. I want to expose only the username, so I represent it with a simple <code>string</code>. This is the definition using OpenAPI Schema:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Username:</span></span><br><span class="line"><span class="attr">  minLength:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">string</span></span><br></pre></td></tr></tbody></table></figure><p>The status is represented by a map with users as keys and total debts\credits as values. In OpenAPI Schema:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Status:</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">&apos;Map with username as keys and debt as value&apos;</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">  additionalProperties:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">number</span></span><br></pre></td></tr></tbody></table></figure><p>In JSON maps are usually represented or as json array of tuples key-value or as a json object. The json object is the natural way to represent it, but it has an important restriction: keys are strings. In my case I need to represent a map string &#x2192; number, so json object representation fits good. The map values schema are defined using <code>additionalProperties</code> and, only with Json Schema Draft 7 or newer, keys schema are defined using <code>propertyNames</code>.</p><p>The main transaction model is described below:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Transaction:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    id:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    from:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/Username&apos;</span></span><br><span class="line"><span class="attr">    to:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/Username&apos;</span></span><br><span class="line"><span class="attr">    at:</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">&quot;Insertion datetime&quot;</span></span><br><span class="line"><span class="attr">      format:</span> <span class="string">date-time</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    value:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">number</span></span><br><span class="line"><span class="attr">    description:</span></span><br><span class="line"><span class="attr">      minLength:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  required:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">from</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">to</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">id</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">description</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">value</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">at</span></span><br></pre></td></tr></tbody></table></figure><p><code>$ref</code> keyword points to the <code>Username</code> schema I defined before.</p><p>This model doesn&#x2019;t fit good for my usage, because for each <code>Transaction</code> endpoint I want to apply some policies. A very common example is the <code>id</code> field: when user inserts a new transaction I want to designate the database to fill the <code>id</code> value. When the user creates a new transaction it shouldn&#x2019;t add the <code>id</code> field: that means that I can&#x2019;t use the <code>Transaction</code> model to describe the &#x201C;create transaction&#x201D; request body. Let&#x2019;s look at all restrictions I want to apply on various transaction endpoints:</p><ul><li><code>id</code> and <code>at</code> are filled by the backend when user adds a new transaction and they are immutable from the API perspective</li><li>When user updates a transaction he can&#x2019;t update the <code>from</code> (sender) and <code>to</code> (receiver) fields</li><li>When user adds a new transaction he doesn&#x2019;t need to fill the <code>from</code> field because the backend fills it with the logged user</li></ul><p>To apply these restrictions I create a new model for each endpoint. I&#x2019;m going to refactor <code>Transaction</code> into 3 different models: <code>UpdateTransaction</code>, <code>NewTransaction</code> and <code>Transaction</code>.</p><p>These new models lead to a new problem: duplication of model fields definitions. Json schema solves the duplication with schema composition keywords: <code>allOf</code>, <code>anyOf</code> and <code>oneOf</code>. In particular I will use <code>allOf</code> to achieve inheritance of schemas.</p><p>This is the final result:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">UpdateTransaction:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    value:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">number</span></span><br><span class="line"><span class="attr">    description:</span></span><br><span class="line"><span class="attr">      minLength:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">NewTransaction:</span></span><br><span class="line"><span class="attr">  allOf:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/UpdateTransaction&apos;</span></span><br><span class="line"><span class="attr">    - properties:</span></span><br><span class="line"><span class="attr">        to:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/Username&apos;</span></span><br><span class="line"><span class="attr">      required:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">to</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">description</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">value</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">Transaction:</span></span><br><span class="line"><span class="attr">  allOf:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/NewTransaction&apos;</span></span><br><span class="line"><span class="attr">    - required:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">from</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">to</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">id</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">description</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">value</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">at</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">      properties:</span></span><br><span class="line"><span class="attr">        from:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/Username&apos;</span></span><br><span class="line"><span class="attr">        id:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">        at:</span></span><br><span class="line"><span class="attr">          description:</span> <span class="string">&quot;Insertion datetime&quot;</span></span><br><span class="line"><span class="attr">          format:</span> <span class="string">date-time</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br></pre></td></tr></tbody></table></figure><p>The schemas inheritance tree is <code>UpdateTransaction</code>&#x2190;<code>NewTransaction</code>&#x2190;<code>Transaction</code></p><h2 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a>Endpoints</h2><p>OpenAPI document structures the endpoint definitions as follow:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/pathA:</span> <span class="string">{}</span></span><br><span class="line">  <span class="string">/pathB:</span></span><br><span class="line"><span class="attr">    get:</span> <span class="string">{}</span></span><br><span class="line"><span class="attr">    post:</span> <span class="string">{}</span></span><br><span class="line"><span class="attr">    put:</span> <span class="string">{}</span></span><br><span class="line">  <span class="string">/pathC/{paramA}:</span> <span class="string">{}</span></span><br></pre></td></tr></tbody></table></figure><p>OpenAPI path strings allow path parameters using <code>{paramName}</code> and doesn&#x2019;t require an explicit definition of query parameters.</p><p>In OpenAPI terminology an <strong>operation</strong> is an API endpoint identified by a path and an HTTP method. Every operation could be uniquely identified with an <code>operationId</code>. The OpenAPI Specification (OAS) documents this field as optional, but I strongly suggest to specify it if you don&#x2019;t want to see your tooling explode. Most code generation tooling asserts that <code>operationId</code> is present. If it&#x2019;s not present they try to infeer it from path and http method producing unexpected results.</p><p>For each operation we are going to define:</p><ul><li><code>operationId</code></li><li><code>parameters</code> (if any): List of <code>header</code>, <code>path</code>, <code>query</code> and <code>cookie</code> parameters</li><li><code>requestBody</code> (if any): Content type and content schema of request bodies</li><li><code>responses</code>: Status code with response content type and schemas</li></ul><p>I also fill the <code>security</code> field for each operation to require a JWT token to execute it.</p><h3 id="Transactions-and-Status"><a href="#Transactions-and-Status" class="headerlink" title="Transactions and Status"></a>Transactions and Status</h3><p>Let&#x2019;s start with transaction CRUDs:</p><table><thead><tr><th>Operation</th><th><code>operationId</code></th><th>CRUD</th><th>Path</th><th>HTTP Method</th></tr></thead><tbody><tr><td>Create a new transaction</td><td><code>createTransaction</code></td><td><strong>C</strong>reate</td><td><code>/transactions</code></td><td>POST</td></tr><tr><td>Get a single transaction</td><td><code>getTransaction</code></td><td><strong>R</strong>etrieve</td><td><code>/transactions/{transactionId}</code></td><td>GET</td></tr><tr><td>Get user related transactions</td><td><code>getTransactions</code></td><td><strong>R</strong>etrieve multiple</td><td><code>/transactions</code></td><td>GET</td></tr><tr><td>Update a transaction</td><td><code>updateTransaction</code></td><td><strong>U</strong>pdate</td><td><code>/transactions/{transactionId}</code></td><td>PUT</td></tr><tr><td>Delete a transaction</td><td><code>deleteTransaction</code></td><td><strong>D</strong>elete</td><td><code>/transactions/{transactionId}</code></td><td>DELETE</td></tr></tbody></table><p>In OpenAPI:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/transactions:</span></span><br><span class="line"><span class="attr">  get:</span></span><br><span class="line"><span class="attr">    operationId:</span> <span class="string">getTransactions</span></span><br><span class="line"><span class="attr">    responses:</span></span><br><span class="line">      <span class="string">&apos;200&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        content:</span></span><br><span class="line">          <span class="string">application/json:</span></span><br><span class="line"><span class="attr">            schema:</span></span><br><span class="line"><span class="attr">              type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">              items:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/Transaction&apos;</span></span><br><span class="line">      <span class="string">&apos;401&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Expired token&apos;</span></span><br><span class="line"><span class="attr">    security:</span></span><br><span class="line"><span class="attr">      - loggedUserToken:</span> <span class="string">[]</span></span><br><span class="line"><span class="attr">  post:</span></span><br><span class="line"><span class="attr">    operationId:</span> <span class="string">createTransaction</span></span><br><span class="line"><span class="attr">    requestBody:</span></span><br><span class="line"><span class="attr">      content:</span></span><br><span class="line">        <span class="string">application/json:</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/NewTransaction&apos;</span></span><br><span class="line"><span class="attr">      required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    responses:</span></span><br><span class="line">      <span class="string">&apos;201&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Successful response.&apos;</span></span><br><span class="line">      <span class="string">&apos;401&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Expired Token&apos;</span></span><br><span class="line">      <span class="string">&apos;403&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&quot;Trying to create a transaction with receiver not connected to logged user&quot;</span></span><br><span class="line"><span class="attr">    security:</span></span><br><span class="line"><span class="attr">      - loggedUserToken:</span> <span class="string">[]</span></span><br><span class="line"><span class="string">&apos;/transactions/{transactionId}&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">  get:</span></span><br><span class="line"><span class="attr">    operationId:</span> <span class="string">getTransaction</span></span><br><span class="line"><span class="attr">    responses:</span></span><br><span class="line">      <span class="string">&apos;200&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        content:</span></span><br><span class="line">          <span class="string">application/json:</span></span><br><span class="line"><span class="attr">            schema:</span></span><br><span class="line">              <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/Transaction&apos;</span></span><br><span class="line">      <span class="string">&apos;401&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Expired Token&apos;</span></span><br><span class="line">      <span class="string">&apos;403&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&quot;Trying to get a transaction where `from` or `to` is not the logged user&quot;</span></span><br><span class="line"><span class="attr">    security:</span></span><br><span class="line"><span class="attr">      - loggedUserToken:</span> <span class="string">[]</span></span><br><span class="line"><span class="attr">  put:</span></span><br><span class="line"><span class="attr">    operationId:</span> <span class="string">updateTransaction</span></span><br><span class="line"><span class="attr">    requestBody:</span></span><br><span class="line"><span class="attr">      content:</span></span><br><span class="line">        <span class="string">application/json:</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/UpdateTransaction&apos;</span></span><br><span class="line"><span class="attr">      required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    responses:</span></span><br><span class="line">      <span class="string">&apos;202&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Successful response.&apos;</span></span><br><span class="line">      <span class="string">&apos;401&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Expired Token&apos;</span></span><br><span class="line">      <span class="string">&apos;403&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Trying to update a transaction where `from` is not the logged user&apos;</span></span><br><span class="line"><span class="attr">    security:</span></span><br><span class="line"><span class="attr">      - loggedUserToken:</span> <span class="string">[]</span></span><br><span class="line"><span class="attr">  delete:</span></span><br><span class="line"><span class="attr">    operationId:</span> <span class="string">deleteTransaction</span></span><br><span class="line"><span class="attr">    responses:</span></span><br><span class="line">      <span class="string">&apos;204&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Successful response.&apos;</span></span><br><span class="line">      <span class="string">&apos;401&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Expired Token &apos;</span></span><br><span class="line">      <span class="string">&apos;403&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Trying to remove a transaction where `from` is not the logged user&apos;</span></span><br><span class="line"><span class="attr">    security:</span></span><br><span class="line"><span class="attr">      - loggedUserToken:</span> <span class="string">[]</span></span><br><span class="line"><span class="attr">  parameters:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">transactionId</span></span><br><span class="line"><span class="attr">      in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">      required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">string</span></span><br></pre></td></tr></tbody></table></figure><p>Note that for all operations under <code>/transactions/{transactionId}</code> path I haven&#x2019;t redefined every time the parameter <code>transactionId</code>: I have defined once at path level.</p><p>Status has only the <em>retrieve</em> operation, but I want to let user customize the output based on transactions insertion datetime: clients can use query parameter <code>till</code> to ask the status till the date time provided, excluding newer transactions. You can use it to throw back in your house mate face that he didn&#x2019;t pay the bills for a quite long time.</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/status:</span></span><br><span class="line"><span class="attr">  get:</span></span><br><span class="line"><span class="attr">    operationId:</span> <span class="string">getUserStatus</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">till</span></span><br><span class="line"><span class="attr">        in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">        required:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">        schema:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">          format:</span> <span class="string">&apos;date-time&apos;</span></span><br><span class="line"><span class="attr">    responses:</span></span><br><span class="line">      <span class="string">&apos;200&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        content:</span></span><br><span class="line">          <span class="string">application/json:</span></span><br><span class="line"><span class="attr">            schema:</span></span><br><span class="line">              <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/Status&apos;</span></span><br><span class="line">      <span class="string">&apos;401&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Expired token&apos;</span></span><br><span class="line"><span class="attr">    security:</span></span><br><span class="line"><span class="attr">      - loggedUserToken:</span> <span class="string">[]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="User-and-User-relationships"><a href="#User-and-User-relationships" class="headerlink" title="User and User relationships"></a>User and User relationships</h3><p>The service supports creation and retrieval of users and user relationships. For simplicity I avoided to include <strong>U</strong> and <strong>D</strong> operations for user and user relationships.</p><p>I want to expose an endpoint to retrieve all registered users and an endpoint to retrieve only users that have a relationship with logged user:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/users:</span></span><br><span class="line"><span class="attr">  get:</span></span><br><span class="line"><span class="attr">    operationId:</span> <span class="string">getUsers</span></span><br><span class="line"><span class="attr">    responses:</span></span><br><span class="line">      <span class="string">&apos;200&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        content:</span></span><br><span class="line">          <span class="string">application/json:</span></span><br><span class="line"><span class="attr">            schema:</span></span><br><span class="line"><span class="attr">              type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">              items:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/Username&apos;</span></span><br><span class="line">      <span class="string">&apos;401&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Expired token&apos;</span></span><br><span class="line"><span class="attr">    security:</span></span><br><span class="line"><span class="attr">      - loggedUserToken:</span> <span class="string">[]</span></span><br><span class="line"><span class="string">/users/connected:</span></span><br><span class="line"><span class="attr">  get:</span></span><br><span class="line"><span class="attr">    operationId:</span> <span class="string">getConnectedUsers</span></span><br><span class="line"><span class="attr">    responses:</span></span><br><span class="line">      <span class="string">&apos;200&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        content:</span></span><br><span class="line">          <span class="string">application/json:</span></span><br><span class="line"><span class="attr">            schema:</span></span><br><span class="line"><span class="attr">              type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">              properties:</span></span><br><span class="line"><span class="attr">                allowedTo:</span></span><br><span class="line"><span class="attr">                  description:</span> <span class="string">&quot;Users that logged user can bill&quot;</span></span><br><span class="line"><span class="attr">                  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">                  items:</span></span><br><span class="line">                    <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/Username&apos;</span></span><br><span class="line"><span class="attr">                allowedFrom:</span></span><br><span class="line"><span class="attr">                  description:</span> <span class="string">&quot;Users that can bill the logged user&quot;</span></span><br><span class="line"><span class="attr">                  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">                  items:</span></span><br><span class="line">                    <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/Username&apos;</span></span><br><span class="line">      <span class="string">&apos;401&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Expired token&apos;</span></span><br><span class="line"><span class="attr">    security:</span></span><br><span class="line"><span class="attr">      - loggedUserToken:</span> <span class="string">[]</span></span><br></pre></td></tr></tbody></table></figure><p>In <code>getConnectedUser</code> I prefeered to define the request schema directly inside the request body definition because It&#x2019;s a schema strictly related to this operation and It isn&#x2019;t parent of any other schema.</p><p>This is the endpoint to create a user connection (user relationship):</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/users/connected/{userToConnect}:</span></span><br><span class="line"><span class="attr">  post:</span></span><br><span class="line"><span class="attr">    operationId:</span> <span class="string">connectUser</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">userToConnect</span></span><br><span class="line"><span class="attr">        required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">        schema:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/Username&apos;</span></span><br><span class="line"><span class="attr">    responses:</span></span><br><span class="line">      <span class="string">&apos;201&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;User connected&apos;</span></span><br><span class="line">      <span class="string">&apos;401&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Expired token&apos;</span></span><br><span class="line"><span class="attr">    security:</span></span><br><span class="line"><span class="attr">      - loggedUserToken:</span> <span class="string">[]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Login-registration-and-JWT"><a href="#Login-registration-and-JWT" class="headerlink" title="Login, registration and JWT"></a>Login, registration and JWT</h3><p>When an user wants to start using this API he must <strong>authenticate</strong> with his credentials following this process:</p><ol><li>User calls the <code>/login</code> endpoint passing his credentials in the request body</li><li>The backend checks if credentials are correct</li><li>The backend writes the response with a JWT token containing the username inside the payload</li><li>User stores the received JWT token</li></ol><p>For each request the server must <strong>authorize</strong> the user. The user must include inside each request the header <code>Authorization: Bearer &lt;jwt token&gt;</code>. When the backend receives the request it checks the signature validity and the token expiration time. If the token is valid It parses the payload, where It can read the username of the logged user.</p><p>This is the <code>login</code> operation definition:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/login:</span></span><br><span class="line"><span class="attr">  post:</span></span><br><span class="line"><span class="attr">    operationId:</span> <span class="string">login</span></span><br><span class="line"><span class="attr">    requestBody:</span></span><br><span class="line"><span class="attr">      content:</span></span><br><span class="line">        <span class="string">application/json:</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line"><span class="attr">            required:</span></span><br><span class="line"><span class="bullet">              -</span> <span class="string">username</span></span><br><span class="line"><span class="bullet">              -</span> <span class="string">password</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">            properties:</span></span><br><span class="line"><span class="attr">              username:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/Username&apos;</span></span><br><span class="line"><span class="attr">              password:</span></span><br><span class="line"><span class="attr">                type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    responses:</span></span><br><span class="line">      <span class="string">&apos;200&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Returns the JWT token&apos;</span></span><br><span class="line"><span class="attr">        content:</span></span><br><span class="line">          <span class="string">text/plain:</span> <span class="string">{}</span></span><br><span class="line">      <span class="string">&apos;400&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Wrong username or password&apos;</span></span><br></pre></td></tr></tbody></table></figure><p>The <code>register</code> operation creates a new user and logins it:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/register:</span></span><br><span class="line"><span class="attr">  post:</span></span><br><span class="line"><span class="attr">    operationId:</span> <span class="string">register</span></span><br><span class="line"><span class="attr">    requestBody:</span></span><br><span class="line"><span class="attr">      content:</span></span><br><span class="line">        <span class="string">application/json:</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line"><span class="attr">            required:</span></span><br><span class="line"><span class="bullet">              -</span> <span class="string">username</span></span><br><span class="line"><span class="bullet">              -</span> <span class="string">password</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">            properties:</span></span><br><span class="line"><span class="attr">              username:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/Username&apos;</span></span><br><span class="line"><span class="attr">              password:</span></span><br><span class="line"><span class="attr">                type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    responses:</span></span><br><span class="line">      <span class="string">&apos;200&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Returns the JWT Token&apos;</span></span><br><span class="line"><span class="attr">        content:</span></span><br><span class="line">          <span class="string">text/plain:</span> <span class="string">{}</span></span><br><span class="line">      <span class="string">&apos;400&apos;</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">&apos;Username already exists&apos;</span></span><br></pre></td></tr></tbody></table></figure><p>I don&#x2019;t cover in this tutorial the logout process, but I want to give you a tip: create a whitelist or blacklist of tokens.</p><p>As you already saw, each secured operation has the <code>security</code> field:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">  - loggedUserToken:</span> <span class="string">[]</span></span><br></pre></td></tr></tbody></table></figure><p>The <code>security</code> field is called <strong>security requirement</strong> and it tells the user that he needs <code>loggedUserToken</code> <strong>security schema</strong> to access to this endpoint. Security schemas must be defined under <code>#/components/securitySchemes</code>:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">securitySchemes:</span></span><br><span class="line"><span class="attr">  loggedUserToken:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">    scheme:</span> <span class="string">bearer</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Some-resources-to-learn-Web-API-Design-and-OpenAPI"><a href="#Some-resources-to-learn-Web-API-Design-and-OpenAPI" class="headerlink" title="Some resources to learn Web API Design and OpenAPI"></a>Some resources to learn Web API Design and OpenAPI</h2><p>I give you a couple of useful links:</p><ul><li><a href="https://www.restapitutorial.com/" target="_blank" rel="noopener">Rest API Tutorial</a>: Very simple and coincise tutorial for newbies of REST APIs world</li><li><a href="http://apistylebook.com/" target="_blank" rel="noopener">http://apistylebook.com/</a>: Collection of API styleguides from different IT companies</li><li><a href="https://github.com/OAI/OpenAPI-Specification/" target="_blank" rel="noopener">OpenAPI Specification repository</a>: Contains the spec and examples</li><li><a href="https://apis.guru/browse-apis/" target="_blank" rel="noopener">OpenAPI Directory</a>: Collection of OpenAPIs of different public APIs</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>You can find the complete OpenAPI definition here: <a href="https://github.com/slinkydeveloper/debts-manager/blob/master/src/main/resources/debts_manager_api.yaml" target="_blank" rel="noopener">/src/main/resources/debts_manager_api.yaml</a></p><p>After you learnt how to design a REST API, approacching to OpenAPI is very simple. The operation definition is very intuitive because of 1:1 mapping with HTTP (methods, parameters, status codes, content types and so on). The tricky and magic part, for me, is definining and organizing the JSON Schemas. When you define simple models, you tend to put everything inside the same file. But when you raise the complexity using composed schemas, you get flooded by smaller and unclear schemas. My suggestion for you is to document the schemas with <code>title</code> and <code>description</code> keywords and organize these in multiple files.</p><p>In next chapter I&#x2019;m going to bootstrap the project and start writing first Vert.x code, stay tuned!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      In this second chapter of Debts Manager Tutorial I would like to show you how I have designed the REST API of Debts Manager. I&#39;m going to follow the API First approach, documenting all aspects of the API Design with OpenAPI 3.
    
    </summary>
    
    
      <category term="openapi" scheme="https://slinkydeveloper.github.io/tags/openapi/"/>
    
      <category term="vertx" scheme="https://slinkydeveloper.github.io/tags/vertx/"/>
    
      <category term="development" scheme="https://slinkydeveloper.github.io/tags/development/"/>
    
      <category term="web" scheme="https://slinkydeveloper.github.io/tags/web/"/>
    
      <category term="web api contract" scheme="https://slinkydeveloper.github.io/tags/web-api-contract/"/>
    
      <category term="openapi 3" scheme="https://slinkydeveloper.github.io/tags/openapi-3/"/>
    
  </entry>
  
  <entry>
    <title>Debts Manager Tutorial Part 1: Introduction</title>
    <link href="https://slinkydeveloper.github.io/Debts-Manager-Tutorial-Introduction/"/>
    <id>https://slinkydeveloper.github.io/Debts-Manager-Tutorial-Introduction/</id>
    <published>2018-12-13T08:10:00.000Z</published>
    <updated>2019-01-20T16:28:08.117Z</updated>
    
    <content type="html"><![CDATA[<p>Some months ago I decided to create a complete Vert.x application to show you capabilities of Vert.x for building Web APIs and, at the same time, I wanted to try some patterns I never used or applied. I&#x2019;m going to create a <em>production ready</em> application to finally manage the debts with my house mate with a fully powered Vert.x application!</p><p>Some notes before starting: I&#x2019;m going to make this guide as complete as possible, but keep in mind that this is a side project and It could contain bugs and It could be incomplete. I will try to cover all interesting aspects about API design, implementation, testing and I will show you how I implemented Event Sourcing and CQRS. I don&#x2019;t plan to write a frontend for it (I don&#x2019;t want to hurt your eyes), but if you want to help me I&#x2019;m glad to accept it!</p><p>The code is already available on <a href="https://github.com/slinkydeveloper/debts-manager" target="_blank" rel="noopener">GitHub</a> but It could change while I&#x2019;m writing the guide.</p><h2 id="What-Debts-Manager-should-do"><a href="#What-Debts-Manager-should-do" class="headerlink" title="What Debts Manager should do"></a>What Debts Manager should do</h2><p>The purpose of Debts Manager is to manage the debts between two users of the service. The idea is similar to <a href="https://www.splitwise.com/" target="_blank" rel="noopener">Splitwise</a>, but it will support only bills between two users. Every user should be registered to use the application. Then, if you want to receive bills from another user, you must <strong>connect</strong> to that user. When you are connected, you can bill him creating a transaction. For example:</p><ul><li>User A registers to the platform</li><li>User B registers to the platform</li><li>User B allows user A to bill himself. It does connecting to user A</li><li>User A bills user B of 5 Euros for last grocery shopping</li></ul><p>The final result is: user B now has a debt of 5 Euros with user A. Debts Manager will show to both users their status with various debts/credits</p><p>The connection between users are unidirectional, which means that if users want to bill each other they must create two diffent connections. There is no group concept, I wanted to keep things as simple as possible.</p><h2 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h2><p>Before going further I want to show you a couple of things of the overall design of the application. These are required to undestand various aspects of the tutorial.</p><h3 id="Persistence-amp-Event-Sourcing"><a href="#Persistence-amp-Event-Sourcing" class="headerlink" title="Persistence &amp; Event Sourcing"></a>Persistence &amp; Event Sourcing</h3><p>For persistence I choose PostgreSQL to store my data. The application stores into the database:</p><ul><li>The users instances (<em>user</em>)</li><li>The connections between users (<em>user relationship</em>)</li><li>The bills (<em>transaction</em>)</li></ul><p>The DB access is provided by the blazing fast <a href="https://github.com/reactiverse/reactive-pg-client" target="_blank" rel="noopener">reactive-pg-client library</a></p><p>The application stores the <em>transactions</em> between users (events). You can use it as a log of various bills, but you also want to look at a summary of various credits/debits between connected users. To build it, we need to aggregate various transactions into one single structure that I call <em>status</em>. Every user has a status and is represented as a map with users as keys and total debts\credits as values. This map is built incrementally every time a user adds/modifies/removes a transaction and is stored in a Redis cache.</p><h3 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h3><p>The application exposes a Web REST API that you can interact with. It is documented with an OpenAPI 3 file and exposes most of CRUD endpoints for users, user connections and transactions (some are missing to keep things simple). It also has an endpoint to access status of users. The endpoints are protected with JWT tokens, so to use the application you must complete a login request and you get a token to use for the following requests. The Web API is implemented using <a href="https://vertx.io/docs/vertx-web/java/" target="_blank" rel="noopener">vertx-web</a>, <a href="https://vertx.io/docs/vertx-web-api-contract/java/" target="_blank" rel="noopener">vertx-web-api-contract</a> and <a href="https://vertx.io/docs/vertx-web-api-service/java/" target="_blank" rel="noopener">vertx-web-api-service</a>.</p><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><p>Okay I admit it, I&#x2019;m lazy <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8">&#x1F604;</span> I tested only the minimum features! I built these tests primarly to show you how I faced and solved common async test problems. I used Junit5 together with <a href="https://vertx.io/docs/vertx-junit5/java/" target="_blank" rel="noopener">vertx-junit5</a> and <a href="https://www.testcontainers.org/" target="_blank" rel="noopener">testcontainers</a> to spin up Redis and PostgreSQL.</p><h2 id="Tutorial-parts"><a href="#Tutorial-parts" class="headerlink" title="Tutorial parts"></a>Tutorial parts</h2><ol><li><strong>Contract design</strong>: Design the OpenAPI 3 contract</li><li><strong>Vert.x Web API Contract &amp; Service</strong>: Setup Vert.x project and bind Vert.x Event Bus services</li><li><strong>Persistence</strong>: Design and implement persistence</li><li><strong>Event Sourcing</strong>: Develop the read model and CQRS</li><li><strong>Testing</strong>: Spin up test containers and write clean assertions</li><li><strong>BONUS: Deploy to OpenShift</strong></li><li><strong>BONUS: Refactor to microservices using Vert.x Event Bus</strong></li></ol><p>Stay tuned for next chapter! And give me feedback about this tutorial!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Some months ago I decided to create a complete Vert.x application to show you capabilities of Vert.x for building Web APIs and, at the same time, I wanted to try some patterns I never used or applied. I&#39;m going to create a production ready application to finally manage the debts with my house mate with a fully powered Vert.x application!
    
    </summary>
    
    
      <category term="openapi" scheme="https://slinkydeveloper.github.io/tags/openapi/"/>
    
      <category term="vertx" scheme="https://slinkydeveloper.github.io/tags/vertx/"/>
    
      <category term="development" scheme="https://slinkydeveloper.github.io/tags/development/"/>
    
      <category term="web" scheme="https://slinkydeveloper.github.io/tags/web/"/>
    
      <category term="web api contract" scheme="https://slinkydeveloper.github.io/tags/web-api-contract/"/>
    
      <category term="openapi 3" scheme="https://slinkydeveloper.github.io/tags/openapi-3/"/>
    
  </entry>
  
  <entry>
    <title>Assertions with Vert.x Futures and JUnit5</title>
    <link href="https://slinkydeveloper.github.io/Assertions-With-Vertx-Futures-And-JUnit5/"/>
    <id>https://slinkydeveloper.github.io/Assertions-With-Vertx-Futures-And-JUnit5/</id>
    <published>2018-10-29T13:46:00.000Z</published>
    <updated>2019-01-20T16:28:08.116Z</updated>
    
    <content type="html"><![CDATA[<p>During development of <a href="https://github.com/slinkydeveloper/vertx-event-manager" target="_blank" rel="noopener">Vert.x event manager library</a> (a blog post about it is coming soon) I wanted to play with new <a href="https://vertx.io/docs/vertx-junit5/java/" target="_blank" rel="noopener"><code>vertx-junit5</code></a> library. I like the new async assertion APIs of <code>vertx-junit5</code>, but I feel very unconfortable using <a href="https://vertx.io/docs/apidocs/io/vertx/junit5/VertxTestContext.html#succeeding-io.vertx.core.Handler-" target="_blank" rel="noopener"><code>VertxTestContext.succeding(Handler)</code></a> when I need to run sequentially different async tasks. With this method, your code rapidly grows in a big callback hell! Plus the interfaces I wanted to test are all in <code>Future</code>s style more than callback style.</p><p>In this post I&#x2019;m going to explain you two methods I&#x2019;ve added with a <a href="https://github.com/vert-x3/vertx-junit5/pull/53" target="_blank" rel="noopener">PR</a> that simplify tests with <code>Future</code>s</p><h2 id="assertComplete-and-assertFailure"><a href="#assertComplete-and-assertFailure" class="headerlink" title="assertComplete() and assertFailure()"></a><code>assertComplete()</code> and <code>assertFailure()</code></h2><p>The PR adds methods:</p><ul><li><code>Future&lt;T&gt; assertComplete(Future&lt;T&gt; fut)</code></li><li><code>Future&lt;T&gt; assertFailure(Future&lt;T&gt; fut)</code></li></ul><p>These methods take a future as parameter and register to it the handler that asserts the completion/failure of it. They return a <strong>copy</strong> of the future you passed as parameter</p><p>For example this callback style assertion:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">methodThatReturnsAFuture().setHandler(testContext.succeding(result -&gt; {</span><br><span class="line">    <span class="comment">// Some assertions</span></span><br><span class="line">    <span class="comment">// Call testContext.complete() or flag a checkpoint</span></span><br><span class="line">}));</span><br></pre></td></tr></tbody></table></figure><p>Turns into:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">testContext.assertComplete(methodThatReturnsAFuture()).setHandler(asyncResult-&gt; {</span><br><span class="line">    <span class="comment">// Some assertions. Note that result is in asyncResult.result()</span></span><br><span class="line">    <span class="comment">// Call testContext.complete() or flag a checkpoint</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>Nothing revolutionary, right? To appreciate it let&#x2019;s look at a more real use case</p><h2 id="Testing-a-Future-chain"><a href="#Testing-a-Future-chain" class="headerlink" title="Testing a Future chain"></a>Testing a Future chain</h2><p>Let&#x2019;s say that we want to test an update method of a class that manage some entities in a database. A common flow for this kind of tests is:</p><ol><li>Use the raw db client to add some data</li><li>Use the class instance you want to test to update data on db</li><li>Retrieve data from db to test if update is successfull</li></ol><p>Assuming that both raw db client and entity manager has <em>futurized</em> APIs, without these methods, this test translates in 3 nested callbacks. Now you can simplify it like this:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">testContext.assertComplete(</span><br><span class="line">  rawClient.create(someData)</span><br><span class="line">    .compose(addedData -&gt; myEntityManager.update(addedData.getId(), stuffToUpdate))</span><br><span class="line">    .compose(updatedData -&gt; rawClient.get(updatedData.getId()))</span><br><span class="line">).setHandler(resultAr -&gt; {</span><br><span class="line">    <span class="comment">// assertComplete guarantees that resultAr is completed</span></span><br><span class="line">    <span class="comment">// Do the assertions you want</span></span><br><span class="line">    testContext.complete();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>With just one <code>assertComplete()</code> we assert that all chain of async operations completes without errors. Then I set an handler that does the final assertions before completing the test</p><p>Now, let&#x2019;s assume that you want to do the same test as before but testing a failure of your method. To do it you need to check every single step of future chain:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">testContext.assertComplete(rawClient.create(someData))</span><br><span class="line">    .compose(addedData -&gt; testContext.assertFailure(myEntityManager.update(addedData.getId(), stuffToUpdate)))</span><br><span class="line">    .recover(failedAr -&gt; {</span><br><span class="line">        <span class="comment">// Do some assertions on failedAr.cause()</span></span><br><span class="line">        <span class="keyword">return</span> testContext.assertComplete(rawClient.get(failedAr.cause().getEntityId()));</span><br><span class="line">    })</span><br><span class="line">    .setHandler(resultAr -&gt; {</span><br><span class="line">        <span class="comment">// Do the assertions you want</span></span><br><span class="line">        testContext.complete();</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure><h2 id="Tricks-and-tips"><a href="#Tricks-and-tips" class="headerlink" title="Tricks and tips"></a>Tricks and tips</h2><p>The bad thing of future chains is passing values through the chain. Let&#x2019;s say that in previous example the exception throwed by <code>update()</code> method doesn&#x2019;t return an exception that contains a super handy method like <code>getEntityId()</code>. But to get the data from db you need the <code>id</code> of your data instance, so how you can solve it?</p><p>You have two ways that really depend on your code style:</p><ul><li><p>If you are a bit more <em>functional</em>, use <a href="https://vertx.io/docs/apidocs/io/vertx/core/CompositeFuture.html#join-io.vertx.core.Future-io.vertx.core.Future-" target="_blank" rel="noopener"><code>CompositeFuture.join()</code></a> to transform a tuple of Futures (one of them already completed with the value you want to pass through the chain) to a single Future that encapsulates both the previous async operation result and the new result. This method works only when you are in a chain of completed handlers because when a future inside <code>CompositeFuture.join()</code> fails, the &#x201C;join future&#x201D; is not an instance of <code>CompositeFuture</code> and doesn&#x2019;t return any information about other joined futures. I prefer to avoid this method, but keep it in mind because you can find it useful sometimes.</p></li><li><p>If you don&#x2019;t care about functional stuff, just use old but gold <code>AtomicReference</code>s:</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">AtomicReference&lt;String&gt; entityId = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">testContext.assertComplete(rawClient.create(someData))</span><br><span class="line">    .compose(addedData -&gt; {</span><br><span class="line">        entityId.set(addedData.getId());</span><br><span class="line">        <span class="keyword">return</span> testContext.assertFailure(myEntityManager.update(addedData.getId(), stuffToUpdate))</span><br><span class="line">     })</span><br><span class="line">    .recover(failedAr -&gt; {</span><br><span class="line">        <span class="comment">// Do some assertions on failedAr.cause()</span></span><br><span class="line">        <span class="keyword">return</span> testContext.assertComplete(rawClient.get(entityId.get()));</span><br><span class="line">    })</span><br><span class="line">    .setHandler(resultAr -&gt; {</span><br><span class="line">        <span class="comment">// Do the assertions you want</span></span><br><span class="line">        testContext.complete();</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure><p>If you have any good tips don&#x2019;t hesitate to contact me! Happy testing!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Write beautiful async assertions with Vert.x Futures and Vert.x JUnit 5
    
    </summary>
    
    
      <category term="vertx" scheme="https://slinkydeveloper.github.io/tags/vertx/"/>
    
      <category term="development" scheme="https://slinkydeveloper.github.io/tags/development/"/>
    
      <category term="testing" scheme="https://slinkydeveloper.github.io/tags/testing/"/>
    
      <category term="junit5" scheme="https://slinkydeveloper.github.io/tags/junit5/"/>
    
  </entry>
  
  <entry>
    <title>Routing with Eclipse Collections</title>
    <link href="https://slinkydeveloper.github.io/Routing-With-Eclipse-Collections/"/>
    <id>https://slinkydeveloper.github.io/Routing-With-Eclipse-Collections/</id>
    <published>2017-10-03T08:10:30.000Z</published>
    <updated>2019-01-20T16:28:08.116Z</updated>
    
    <content type="html"><![CDATA[<p>I found days ago the <a href="https://www.eclipse.org/collections/" target="_blank" rel="noopener">Eclipse Collections</a> library (ex Goldman Sachs Collections). Yes, that <strong>Goldman Sachs</strong>, one of the biggest investing banking group of the world, that for hobby creates super fast collection library for Java.</p><p>This article follows the previous, when I explored how to improve the routing of <a href="http://vertx.io/docs/vertx-web/java/" target="_blank" rel="noopener">Vert.x Web</a>, so please check it out before reading this one: <a href="https://slinkydeveloper.github.io/articles/Routing-Tree-vs-SkipList/">Tree vs SkipList routing</a></p><h2 id="What&#x2019;s-new"><a href="#What&#x2019;s-new" class="headerlink" title="What&#x2019;s new"></a>What&#x2019;s new</h2><p>Three days ago, looking at my twitter wall, I&#x2019;ve found a tweet about Eclipse Collections. I&#x2019;ve found really interesting the performances of EC, so I&#x2019;ve decided to put it into my benchmark and test it on our use case. I obviously choose the tree as data structure to rewrite the routing process of Vert.x Web, so I have write two variants of my original <code>TreeRouter</code>:</p><ul><li><code>ECTreeRouter</code>: A tree that internally uses List implementations of Eclipse Collections.</li><li><code>ImmutableECTreeRouter</code>: A tree that internally uses <strong>immutable</strong> List implementations of Eclipse Collections. In this case user <strong>can&#x2019;t change</strong> the routing tree after routing has started.</li></ul><p>The second option was a pure experiment: user creates the router and its internal tree doesn&#x2019;t change during the application execution. In this case you have a <em>simpler implementation</em> and an immutable list (in some cases faster than a mutable one). I&#x2019;ve also refactored only the <code>SocialNetworkBenchmark</code>, because we have similar results on <code>ECommerceBenchmark</code>.</p><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><p>And, as in the previous articles, here comes the graphs:</p><figure><br>  <a href="/images/tree-vs-router-2/basic_social.png" class="image-popup"><img src="/images/tree-vs-router-2/basic_social.png" alt="image"></a><br>  <figcaption>Benchmark results for SocialNetworkBenchmark based on requested URLs</figcaption><br></figure><br><figure><br>  <a href="/images/tree-vs-router-2/with_load_social.png" class="image-popup"><img src="/images/tree-vs-router-2/with_load_social.png" alt="image"></a><br>  <figcaption>Benchmark results for SocialNetworkBenchmark based on requested URLs with 10 random requests</figcaption><br></figure><br><figure><br>  <a href="/images/tree-vs-router-2/social_complete.png" class="image-popup"><img src="/images/tree-vs-router-2/social_complete.png" alt="image"></a><br>  <figcaption>Final benchmark results for SocialNetworkBenchmark (&#x201C;with load&#x201D; values properly scaled)</figcaption><br></figure><p>And in the end the <em>&#x201C;final test&#x201D;</em> graph (now it does only random requests, not sequentially):</p><figure><br>  <a href="/images/tree-vs-router-2/social_average.png" class="image-popup"><img src="/images/tree-vs-router-2/social_average.png" alt="image"></a><br>  <figcaption>Final benchmark results for SocialNetworkBenchmark</figcaption><br></figure><p>I have some considerations about these results:</p><ul><li>Eclipse Collections are fast to iterate, faster than JDK&#x2019;s collections, so probably they are good for our use case. In particular, pay attention to particular events generated from benchmark data:<ul><li><code>ECTreeRouter</code> is faster than skip list in <code>/feed</code> request in &#x201C;without load&#x201D; tests! In particular it creates interesting deltas from <code>TreeRouter</code> when we request constant paths&#x2026;</li><li>But going deeper doesn&#x2019;t help the <code>ECTreeRouter</code>, in particular in &#x201C;without load&#x201D; benchmarks. We have too few datas to assert that at deeper levels <code>ECTreeRouter</code> drops its performances or aligns it with <code>TreeRouter</code></li><li><code>ECTreeRouter</code>, without any doubt, in the random requests test is faster than <code>TreeRouter</code></li></ul></li><li>Eclipse Collections contains a lot of optimized iteration patterns optimized, maybe useful for us</li><li>It seems that EC thread-safe lists are faster than immutable lists, so the <code>ImmutableECTreeRouter</code> is a failed experiment <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f625.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f625.png?v8">&#x1F625;</span></li></ul><p>Unlike the previous post I&#x2019;m little hesitant to give a verdict, but we have promising results with Eclipse Collections, so I want to start with it. In case we experience &#x201C;not so good&#x201D; performances after the implementation, migrate back to JDK&#x2019;s collections doesn&#x2019;t appear a complicated task </p><p>Stay tuned for other updates!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Eclipse Collections are so fast!
    
    </summary>
    
    
      <category term="web development" scheme="https://slinkydeveloper.github.io/tags/web-development/"/>
    
      <category term="vertx" scheme="https://slinkydeveloper.github.io/tags/vertx/"/>
    
      <category term="vertx web" scheme="https://slinkydeveloper.github.io/tags/vertx-web/"/>
    
      <category term="routing" scheme="https://slinkydeveloper.github.io/tags/routing/"/>
    
      <category term="data structures" scheme="https://slinkydeveloper.github.io/tags/data-structures/"/>
    
      <category term="tree" scheme="https://slinkydeveloper.github.io/tags/tree/"/>
    
      <category term="skiplist" scheme="https://slinkydeveloper.github.io/tags/skiplist/"/>
    
      <category term="eclipse collections" scheme="https://slinkydeveloper.github.io/tags/eclipse-collections/"/>
    
      <category term="fast list" scheme="https://slinkydeveloper.github.io/tags/fast-list/"/>
    
  </entry>
  
  <entry>
    <title>Tree vs SkipList routing</title>
    <link href="https://slinkydeveloper.github.io/Routing-Tree-vs-SkipList/"/>
    <id>https://slinkydeveloper.github.io/Routing-Tree-vs-SkipList/</id>
    <published>2017-09-25T08:51:22.000Z</published>
    <updated>2019-01-20T16:28:08.116Z</updated>
    
    <content type="html"><![CDATA[<p>One of the most important features of web frameworks is performance and the routing process can become an important performance killer. I&#x2019;m going to introduce you a comparison between the list (in particular the skip list) and the tree as data structure for web framework&#x2019;s routers.</p><h2 id="Why-this-article"><a href="#Why-this-article" class="headerlink" title="Why this article"></a>Why this article</h2><p>Routing consists in calling the correct handler for the URL that user requested. Sometimes this can be a simple and fast process, but in modern scenarios most times this process slows your application, in particular when:</p><ul><li>You have a huge list of routes</li><li>You rely on path parameters (sometimes 2 or more path parameters in the same route)</li><li>You want to run multiple handlers for every URL segment</li></ul><p>I&#x2019;m writing this article because <a href="https://github.com/vert-x3/vertx-web/issues/678" target="_blank" rel="noopener">I want to implement a tree router inside Vert.x Web framework</a>, so I&#x2019;m investigating around to find what the best solution would be.</p><h2 id="List-routing-vs-Tree-routing"><a href="#List-routing-vs-Tree-routing" class="headerlink" title="List routing vs Tree routing"></a>List routing vs Tree routing</h2><p>A <strong>Route</strong> is a combination of HTTP method and path. The path can be a simple constant path or a path with one or more parameters, managed via regular expressions.</p><p>The <strong>list routing</strong> uses a list to contain all defined routes (in a precise order). When the server receives a request, the router iterates through the list and searches for the routes that match with the received request. This process <strong>cannot be</strong> a simple list search, because a request can match multiple times. For example: if we have a router that declares</p><ul><li><code>GET &quot;/&quot;</code></li><li><code>GET &quot;/users&quot;</code></li><li><code>GET &quot;/users/userA&quot;</code></li></ul><p>and we receive <code>/users/userA</code> as request, the router has to run all the handlers of these three routes.</p><p>The <strong>tree routing</strong> differs from list routing for one simple thing: the routes are inside a tree. So when the router receives the request, it follows the tree searching for matching routes</p><p>When you think about a website (or, in the same situation, a web API) you think about a tree of web pages (operations) you can retrieve (perform). But most of the web frameworks don&#x2019;t implement the routing as a tree of resources, for multiple reasons:</p><ul><li>It&#x2019;s difficult to build a routing codebase around a concurrent tree preserving good performances</li><li>Does the user manually build the routing tree or is the insertion a task for the algorithm? And how can we manage the regular expressions inside this insertion algorithm?</li><li>Modern lists (for example the SkipList) are really powerful and <a href="https://en.wikipedia.org/wiki/Skip_list" target="_blank" rel="noopener">can obtain performances similar to trees</a> mantaining the routing codebase simple</li></ul><p>But, not considering these problems, the tree seems a better solution for this problem, right? This is the starting thesis, now I need to prove it.</p><p>Before starting, I want to underline that some frameworks have succesfully implemented the tree routing, for example <a href="https://github.com/fastify/fastify" target="_blank" rel="noopener">Fastify</a>, achieving really interesting <a href="https://github.com/fastify/fastify#benchmarks" target="_blank" rel="noopener">performances</a></p><h2 id="Reproduce-the-two-types-of-routers"><a href="#Reproduce-the-two-types-of-routers" class="headerlink" title="Reproduce the two types of routers"></a>Reproduce the two types of routers</h2><p>The first step is creating the sketches of these two routing mechanisms. I&#x2019;ve tried to create the list routing similar to Vert.x Web router, but of course these are only <strong>simplified examples</strong>. The router of a web framework is more complex than my 50 lines of code. The list router is implemented inside class <a href="https://github.com/slinkydeveloper/tree-list-routing-java-bench/blob/master/src/main/java/io/slinkydeveloper/bench/ListRouter.java" target="_blank" rel="noopener"><code>ListRouter</code></a> and tree router is implemented inside class <a href="https://github.com/slinkydeveloper/tree-list-routing-java-bench/blob/master/src/main/java/io/slinkydeveloper/bench/TreeRouter.java" target="_blank" rel="noopener"><code>TreeRouter</code></a>.</p><p>The list router has a simple loop that calls for every route the function <code>route()</code>; when this function returns true, the route matches perfectly and the routing process stops. Remember that when I check if route <em>matches</em> (both in tree and list scenario) the router:</p><ol><li>first checks if the path matches partially (in case of regexes it calls <code>lookingAt()</code> method, while in string paths it calls the method <code>startsWith()</code>)</li><li>Then it checks if the path matches totally (methods <code>matches()</code> and <code>equals()</code>). If the path matches totally, the routing stops</li></ol><p>The tree routing is a simple recursive function that works as follow:</p><ul><li>Base case: The path chunk is empty so we have finished the routing succesfully</li><li>If not base case: We try to match <strong>partially</strong> first the constant paths and then the regular expressions. If we found a match, we go deeper with recursion</li><li>If we don&#x2019;t find any match the requested route doesn&#x2019;t exist and the routing process stops</li></ul><p>We test against path chunks for a simple reason: when we go deeper with recursion we don&#x2019;t need to test against previous path components (and we don&#x2019;t need to re-extract the parameters), so the router simply removes it from the requested URL. And of course when the string is empty we have finished the routing. To gain good performances inside tree nodes I used the skip lists (I know I&#x2019;ve cheated) to contain associated routes.</p><p>This is only a way to implement the tree routing and also remember that I haven&#x2019;t written the insertion algorithm for the tree router, so I do all association between nodes manually.</p><h2 id="Two-common-API-scenarios"><a href="#Two-common-API-scenarios" class="headerlink" title="Two common API scenarios"></a>Two common API scenarios</h2><p>I&#x2019;ve created two benchmarks: an example of ecommerce API and a social network API. This examples are really similar, they only differ in number of routes and how many regular expression are contained in said routes. Below you can see how this &#x201C;fake&#x201D; routers are composed.</p><figure><br>  <a href="/images/tree-vs-router/ecommerce-tree.png" class="image-popup"><img src="/images/tree-vs-router/ecommerce-tree.png" alt="image"></a><br>  <figcaption>Router created for ECommerceBenchmark</figcaption><br></figure><figure><br>  <a href="/images/tree-vs-router/social-tree.png" class="image-popup"><img src="/images/tree-vs-router/social-tree.png" alt="image"></a><br>  <figcaption>Router created for SocialNetworkBenchmark</figcaption><br></figure><h2 id="Maybe-Skip-List-is-better"><a href="#Maybe-Skip-List-is-better" class="headerlink" title="Maybe Skip List is better?"></a>Maybe Skip List is better?</h2><p>The first benchmarks I wrote are simple accesses to routes. I wrote one benchmark for every route (that I store in <code>compatiblePaths</code>) and every data structure. Below you can find results of <a href="https://github.com/slinkydeveloper/tree-list-routing-java-bench/blob/master/src/main/java/io/slinkydeveloper/bench/ECommerceBenchmark.java" target="_blank" rel="noopener"><code>ECommerceBenchmark</code></a>:</p><figure><br>  <a href="/images/tree-vs-router/basic_complex.png" class="image-popup"><img src="/images/tree-vs-router/basic_complex.png" alt="image"></a><br>  <figcaption>Benchmark results for ECommerceBenchmark based on requested URLs</figcaption><br></figure><p>The first observation is that the constant paths in skip list are faster than in the tree router. This is caused by skip list optimization: when we get the same elements multiple times the skip list optimizes its links to access more quickly to its values. But the performances for skip lists falls in favor of tree when we use regular expressions, because of course we give a smaller string to the regular expression engine. With the <code>/health</code> path we have a little difference because in tree we are at the first level, while in <code>/user/newUser</code> we are one level deeper than <code>/health</code>. This results are confirmed by the <a href="https://github.com/slinkydeveloper/tree-list-routing-java-bench/blob/master/src/main/java/io/slinkydeveloper/bench/SocialNetworkBenchmark.java" target="_blank" rel="noopener"><code>SocialNetworkBenchmark</code></a> with the same configuration:</p><figure><br>  <a href="/images/tree-vs-router/basic_social.png" class="image-popup"><img src="/images/tree-vs-router/basic_social.png" alt="image"></a><br>  <figcaption>Benchmark results for SocialNetworkBenchmark based on requested URLs</figcaption><br></figure><p>So maybe skip lists are so fast that trees are not competitive in this application field? I&#x2019;ve done two considerations:</p><ol><li>In a real case situation a router doesn&#x2019;t receive <strong>12.000.000 same requests</strong> in one second, but maybe if it receives 1.000 same requests (for example the <code>/feed</code> request) the skip list optimization helps a lot</li><li>My tree implementation is rude compared to JDK&#x2019;s <code>ConcurrentSkipListSet</code></li></ol><h2 id="And-if-I-add-some-spice"><a href="#And-if-I-add-some-spice" class="headerlink" title="And if I add some spice?"></a>And if I add some spice?</h2><p>To confuse the skip list I&#x2019;ve created a more <em>real</em> scenario: The benchmark function does 10 random requests and then the request assigned. This process complicates things a bit for the skip list, because it loses the optimization:</p><figure><br>  <a href="/images/tree-vs-router/with_load_complex.png" class="image-popup"><img src="/images/tree-vs-router/with_load_complex.png" alt="image"></a><br>  <figcaption>Benchmark results for ECommerceBenchmark based on requested URLs with 10 random requests</figcaption><br></figure><p>And of course it&#x2019;s a win for the tree. The fun fact is that tree defeats the skip list also in first paths.</p><p>For the social benchmark the random function that chooses the 10 requests is little bit hacky: Some paths (for example the <code>/feed</code>) have more chances than other ones. But the results remain the same:</p><figure><br>  <a href="/images/tree-vs-router/with_load_social.png" class="image-popup"><img src="/images/tree-vs-router/with_load_social.png" alt="image"></a><br>  <figcaption>Benchmark results for SocialNetworkBenchmark based on requested URLs with 10 random requests</figcaption><br></figure><p>The results on <code>SocialNetworkBenchmark</code> are impressive because with some paths we have 3x or more performances for tree router, but we have an unstable situation at the same level.</p><p>There&#x2019;s also an important consideration to do: When we go deeper, tree performances slope down, so to write a good tree router we need a good combination of access optimizations and insertion algorithm that avoids creating uselessly deep nodes.</p><p>You can find below the final results with and without load (&#x201C;with load&#x201D; values conveniently scaled x11):</p><figure><br>  <a href="/images/tree-vs-router/complex_complete.png" class="image-popup"><img src="/images/tree-vs-router/complex_complete.png" alt="image"></a><br>  <figcaption>Final benchmark results for ECommerceBenchmark</figcaption><br></figure><figure><br>  <a href="/images/tree-vs-router/social_complete.png" class="image-popup"><img src="/images/tree-vs-router/social_complete.png" alt="image"></a><br>  <figcaption>Final benchmark results for SocialNetworkBenchmark</figcaption><br></figure><h2 id="And-it&#x2019;s-not-finished"><a href="#And-it&#x2019;s-not-finished" class="headerlink" title="And it&#x2019;s not finished!"></a>And it&#x2019;s not finished!</h2><p>For the two test cases and data structures I also wrote a <em>final benchmark</em> that accesses to <code>compatiblePaths</code> sequentially and in both cases it&#x2019;s a huge win for tree:</p><figure class="half"><br>    <a href="/images/tree-vs-router/complex_average.png" class="image-popup"><img src="/images/tree-vs-router/complex_average.png" alt="image"></a><br>    <a href="/images/tree-vs-router/social_average.png" class="image-popup"><img src="/images/tree-vs-router/social_average.png" alt="image"></a><br>    <figcaption>Final results (left e-commerce benchmark, right social benchmark)</figcaption><br></figure><p>But this is not a very realistic situation, because usually we have a situation like the social network benchmark with load: we have more frequent requests and less frequent requests, but it&#x2019;s unusual to get requests ordered in the router order sequentially.</p><h2 id="So-what&#x2019;s-better"><a href="#So-what&#x2019;s-better" class="headerlink" title="So, what&#x2019;s better?"></a>So, what&#x2019;s better?</h2><p>That&#x2019;s an hard question, because these examples don&#x2019;t prove a lot. But, according to this data, it makes sense to start developing a tree router because we have good preconditions. In some situations with regular expressions we have seen up to 2x performances thanks to the tree router, but it&#x2019;s important to get good performances also with constant paths (remember that when we have query parameters like <code>/user?q=blabla</code> these URLs are splitted at the start of routing and the router treats this requests like constant paths).</p><h2 id="Implementing-a-Tree-Router-challenging-tasks"><a href="#Implementing-a-Tree-Router-challenging-tasks" class="headerlink" title="Implementing a Tree Router: challenging tasks"></a>Implementing a Tree Router: challenging tasks</h2><h3 id="Insertion-algorithm"><a href="#Insertion-algorithm" class="headerlink" title="Insertion algorithm"></a>Insertion algorithm</h3><p>The insertion algorithm is the most important challange for different reasons:</p><ol><li>Providing an optimization at every insertion</li><li>Splitting constant paths and mostly importantly</li><li><strong>Splitting regular expressions</strong></li></ol><p>The idea of insertion is not splitting for every <code>/</code> (like I&#x2019;ve done in my examples) but something more like this:</p><ol><li>At the start we have an empty root node</li><li>When I add a route I assign it to the root node</li><li>When I add another route I check if it&#x2019;s a child of the root node or if I can split the root node in two nodes. In the first case I simply add the new route inside the list of childs, in the second case I split the root node creating two child nodes and assigning to the root node the shared first part of path</li></ol><p>For example:</p><table><thead><tr><th>Path inserted</th><th>Tree update</th></tr></thead><tbody><tr><td></td><td>Empty root node</td></tr><tr><td>/users/{user_id}</td><td>Root node with assigned &#x201C;/users/{user_id}&#x201D;</td></tr><tr><td>/users/addUser</td><td>Root node assigned with &#x201C;/users/&#x201C; and with childs &#x201C;{user_id}&#x201D; and &#x201C;addUser&#x201D;</td></tr><tr><td>/users/addFacebookUser</td><td>&#x201C;addUser&#x201D; splitted in new node with &#x201C;add&#x201D; and childs &#x201C;User&#x201D; and &#x201C;FacebookUser&#x201D;</td></tr></tbody></table><p>The last task in particular is very tricky, because a simple char to char comparison is very limiting and also can generate not working regular expressions. For example: path <code>/([a-b]{0, 9})</code> and path <code>/([a-z]{0, 9})</code> cannot be splitted creating a parent node with <code>/([a</code>, because of course this regular expression is invalid. I&#x2019;ve got some ideas about it:</p><ul><li>First I check if two routes have the same regular expressions in the middle. For example when we have <code>/users/{user_id}/feed</code> and <code>/users/{user_id}/events</code> we split it into <code>/users/{user_id}/</code> with childs <code>feed</code> and <code>events</code>. This can be done with some regular expressions</li><li>If a regular expression is at the end of a path, I split at the last constant <code>/</code> (not inside a group).</li><li>If none of the previous, I treat it as first level child</li></ul><p>To do these things maybe a library that helps &#x201C;understanding&#x201D; regular expressions could come in handy.</p><h3 id="Mantaining-good-performances-during-routing"><a href="#Mantaining-good-performances-during-routing" class="headerlink" title="Mantaining good performances during routing"></a>Mantaining good performances during routing</h3><p>I really don&#x2019;t have idea how <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8">&#x1F604;</span>. I want to start creating a simple router that does only the minimal routing and then I add conditions necessary to successfully pass the tests. Maybe operating in this way I can avoid creation of useless code.</p><h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>Router Tree is possible and can give great performances to Vert.x Web. I cannot wait to start working on it!</p><p>Stay tuned!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Can we improve speed of vert-x web using a tree structure?
    
    </summary>
    
    
      <category term="web development" scheme="https://slinkydeveloper.github.io/tags/web-development/"/>
    
      <category term="vertx" scheme="https://slinkydeveloper.github.io/tags/vertx/"/>
    
      <category term="vertx web" scheme="https://slinkydeveloper.github.io/tags/vertx-web/"/>
    
      <category term="routing" scheme="https://slinkydeveloper.github.io/tags/routing/"/>
    
      <category term="data structures" scheme="https://slinkydeveloper.github.io/tags/data-structures/"/>
    
      <category term="tree" scheme="https://slinkydeveloper.github.io/tags/tree/"/>
    
      <category term="skiplist" scheme="https://slinkydeveloper.github.io/tags/skiplist/"/>
    
  </entry>
  
  <entry>
    <title>My GSoC 2017 - Slush-vertx</title>
    <link href="https://slinkydeveloper.github.io/My-GSoC-2017-Slush-Vertx/"/>
    <id>https://slinkydeveloper.github.io/My-GSoC-2017-Slush-Vertx/</id>
    <published>2017-08-18T22:00:00.000Z</published>
    <updated>2019-01-20T16:28:08.116Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/pmlopes/slush-vertx" target="_blank" rel="noopener"><code>slush-vertx</code></a> is a project created by <a href="https://www.jetdrone.xyz" target="_blank" rel="noopener">Paulo Lopes</a> born to simplify build tools configurations for Vert.x. I totally refactored <code>slush-vertx</code> to create a multi purpose code generator for simplify various configurations of Vert.x powered projects.</p><h2 id="Multi-purpose-and-simple-to-enlarge"><a href="#Multi-purpose-and-simple-to-enlarge" class="headerlink" title="Multi purpose and simple to enlarge"></a>Multi purpose and simple to enlarge</h2><p>When I designed the new slush-vertx, I tried to create a Vert.x project generator for every configuration needed, not only an OpenAPI 3 server or OpenAPI 3 client. Another important variable of my project is create a generator that generates code for different languages and different build tools.</p><p>Now <code>slush-vertx</code> It&#x2019;s like a <em>&#x201C;code generation hub&#x201D;</em>: It contains a set of project generators, based on what type of Vert.x project are you going to scaffold. At the moment I&#x2019;m writing this post, slush-vertx contains:</p><ul><li>Vert.x Starter project generator: Based on original Paulo&#x2019;s project, generates an empty project configured for Vert.x 3 Framework</li><li>Vert.x Web Server Starter generator: Generates a skeleton with sources and tests for Vert.x 3 Web powered REST server</li><li>Vert.x Web Server OpenAPI project generator: Generates a skeleton based on Swagger 2/OpenAPI 3 specification with sources and tests for Vert.x 3 Web powered REST server</li><li>Vert.x Web Client OpenAPI project generator: Generates a client based on a Swagger 2/OpenAPI 3 specification and Vert.x 3 Web Client</li></ul><p>I hope it will grow in  the future, creating a tool that can help people to connect with Vert.x world.</p><h2 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h2><script type="text/javascript" src="https://asciinema.org/a/134050.js" id="asciicast-134050" async></script><h2 id="Behind-the-scenes"><a href="#Behind-the-scenes" class="headerlink" title="Behind the scenes"></a>Behind the scenes</h2><p>slush-vertx is metadata and template driven code generator. This means:</p><ul><li>For every language/build tool it has a set of metadata, that can be extended with user inputs</li><li>It uses a template engine to generate code, based on metadata</li></ul><p>If you want a complete scenario of behaviours of slush-vertx, give a look at <a href="https://github.com/pmlopes/slush-vertx/wiki/Slush-Vert.x-Structure" target="_blank" rel="noopener">this wiki page</a></p><p>But, why that complexity behind a code generator? I mean, It&#x2019;s only a code generator! Yes, It&#x2019;s only a code generator, but I wanted to create a tool simple to extend with new generators routines, giving to Eclipse Vert.x a powerful tool.</p><h2 id="Generate-unit-tests"><a href="#Generate-unit-tests" class="headerlink" title="Generate unit tests"></a>Generate unit tests</h2><p>So, if you have a powerful build tool that generates pretty everything you want, why don&#x2019;t take advantage of it doing things that you don&#x2019;t want to do? And this is what I&#x2019;ve done! Copy-pasting code from other generators I&#x2019;ve created, I builded <a href="https://github.com/pmlopes/slush-vertx/tree/master/src/generators/vertx_web_unit_test_generator" target="_blank" rel="noopener">a unit test generator for <code>vertx-web-api-contract-openapi</code></a>. This generator takes all operations declared in <a href="https://github.com/pmlopes/slush-vertx/blob/master/src/generators/vertx_web_unit_test_generator/openapi.yaml" target="_blank" rel="noopener">this oas 3 spec</a> and generates a specific test to validate the correct parsing of parameters on server side. This is the final result: <a href="https://github.com/slinkydeveloper/vertx-web/blob/designdriven/vertx-web-api-contract/vertx-web-api-contract-openapi/src/test/java/io/vertx/ext/web/designdriven/openapi3/OpenAPI3ParametersUnitTest.java" target="_blank" rel="noopener"><code>OpenAPI3ParametersUnitTest.java</code></a>. This unit tests helped me a lot to complete the <code>vertx-web-api-contract-openapi</code> module.</p><p>With some small changes this can be a complete server libraries/frameworks compatibility test tool for OpenAPI 3</p><h2 id="And-now"><a href="#And-now" class="headerlink" title="And now?"></a>And now?</h2><p>Now use it! Follow the <a href="https://github.com/pmlopes/slush-vertx" target="_blank" rel="noopener">readme inside GitHub repository</a> to install and start using it.</p><p>You can also <a href="https://github.com/pmlopes/slush-vertx/wiki/How-to-contribute" target="_blank" rel="noopener">contribute</a> to this project <a href="https://github.com/pmlopes/slush-vertx/wiki/Create-a-new-generator" target="_blank" rel="noopener">adding new generators</a> and <a href="https://github.com/pmlopes/slush-vertx/wiki/Add-new-language-to-existing-generatorhttps://github.com/pmlopes/slush-vertx/wiki/Add-new-language-to-existing-generator" target="_blank" rel="noopener">updating existing ones with new languages</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Creating a scaffolder for vertx projects
    
    </summary>
    
    
      <category term="openapi" scheme="https://slinkydeveloper.github.io/tags/openapi/"/>
    
      <category term="web development" scheme="https://slinkydeveloper.github.io/tags/web-development/"/>
    
      <category term="gsoc 2017" scheme="https://slinkydeveloper.github.io/tags/gsoc-2017/"/>
    
      <category term="gsoc" scheme="https://slinkydeveloper.github.io/tags/gsoc/"/>
    
      <category term="vertx" scheme="https://slinkydeveloper.github.io/tags/vertx/"/>
    
      <category term="vertx web" scheme="https://slinkydeveloper.github.io/tags/vertx-web/"/>
    
      <category term="openapi3" scheme="https://slinkydeveloper.github.io/tags/openapi3/"/>
    
      <category term="generator" scheme="https://slinkydeveloper.github.io/tags/generator/"/>
    
      <category term="slush-vertx" scheme="https://slinkydeveloper.github.io/tags/slush-vertx/"/>
    
  </entry>
  
  <entry>
    <title>My GSoC 2017 - OpenAPI 3 Vert.x support</title>
    <link href="https://slinkydeveloper.github.io/My-GSoC-2017-OAS3-Router-Factory/"/>
    <id>https://slinkydeveloper.github.io/My-GSoC-2017-OAS3-Router-Factory/</id>
    <published>2017-08-11T22:00:00.000Z</published>
    <updated>2019-01-20T16:28:08.116Z</updated>
    
    <content type="html"><![CDATA[<p>The support to OpenAPI 3 it&#x2019;s located in maven package <code>vertx-web-api-contract-openapi</code>, and most classes extends/subclass from interfaces/classes inside maven package <code>vertx-web-api-contract-common</code> (the package designed to contain all API Specs standards common classes). Most important interfaces of <code>vertx-web-api-contract-openapi</code> are:</p><ul><li>The <code>OpenAPI3ValidationHandler</code> class that fills <a href="https://slinkydeveloper.github.io/articles/My-GSoC-2017-Validation/#structure-of-validation-framework"><code>BaseValidationHandler</code> maps</a></li><li>The <code>OpenAPI3RouterFactory</code>, the interface that enable users create a router with your API spec</li></ul><p>As I said in a <a href="https://slinkydeveloper.github.io/articles/Whats-New-In-OAS3-Parameters/">previous blog post</a>, OpenAPI 3 added a lot of new things, in particular about serialization styles and complex form bodies (url encoded and multipart). So when I started working on OpenAPI 3 requests validations, I had to add a lot of things to validation framework that I haven&#x2019;t expected before.</p><h2 id="The-validation-handler"><a href="#The-validation-handler" class="headerlink" title="The validation handler"></a>The validation handler</h2><p><code>OpenAPI3ValidationHandler</code> is an interface extension of <code>HTTPOperationRequestValidationHandler</code> (located inside <code>vertx-web-api-contract-common</code>), that is an interface extension of <code>ValidationHandler</code>. This class contains all methods to elaborate the <code>Operation</code> object (Java representation of <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#operationObject" target="_blank" rel="noopener">OAS3 operation object</a>) and the list of <code>Parameter</code> objects (Java representation of <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#parameterObject" target="_blank" rel="noopener">OAS3 parameter object</a>).</p><p>When constructed, it generates all <code>ParameterValidationRule</code> and <code>ParameterTypeValidator</code> it needs: in fact, <strong>It doesn&#x2019;t elaborate the api spec nor work with api spec Java models during the validation</strong>. It does everything when It&#x2019;s constructed, so It iterates through various parameters and It generates objects needed for validation.</p><p></p><p class="image-pull-right"><br><img src="/images/messy_code_fry.jpg" alt=""><br></p><br>If you read this class, It seems messy, because It&#x2019;s messy <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8">&#x1F604;</span>. This is because of complexity of OAS 3, that forced me to write some little tricks to support all things (like for example to manage the <code>deepObject</code> serialization style).<p></p><p>To give a quick explanation of how this class elaborates parameters:</p><ol><li>It checks if it&#x2019;s supported (parameters with <code>allowReserved: true</code> are not supported)</li><li>It checks if the parameter needs a <em>workaround</em> to get validation working and applies the specific <em>workaround</em></li><li>If none workaround is needed, it constructs the correct type validator</li></ol><p>Behind the scenes all the validation work is done by <a href="https://slinkydeveloper.github.io/articles/My-GSoC-2017-Validation/">validation framework</a></p><h2 id="The-router-factory"><a href="#The-router-factory" class="headerlink" title="The router factory"></a>The router factory</h2><p>The router factory is intended to give the most simple user interface to generate a router based on an API Spec. In fact, it provides this functionalities:</p><ul><li>Async loading of specification and its schema dependencies</li><li>OpenAPI 3 compliant API specification validation (thanks to <a href="https://github.com/RepreZen/KaiZen-OpenApi-Parser" target="_blank" rel="noopener">Kaizen-OpenApi-Parser</a>)</li><li>Load handlers and failure handlers with operationId</li><li>Automatic 501 (Not implemented) response for operations with missing handlers (can be enabled/disabled with <code>mountOperationsWithoutHandlers(boolean)</code>)</li><li>Automatic <code>ValidationException</code> failure handler (can be enabled/disabled with <code>enableValidationFailureHandler()</code> and manually configured with <code>setValidationFailureHandler()</code>)</li><li>Path&#x2019;s regular expression generation (to support <code>matrix</code> and <code>label</code> style unsupported natively from Vert.x)</li><li>Lazy methods: the generation of the <code>Router</code> is done only when you call <code>getRouter()</code></li><li>Automatic mount of security validation handlers</li></ul><h3 id="Lazy-methods"><a href="#Lazy-methods" class="headerlink" title="Lazy methods"></a>Lazy methods</h3><p>It&#x2019;s usual to run into problems regards route declaration order. For example if you declare two routes in this order:</p><ol><li><code>GET /hello/{parameter}</code></li><li><code>GET /hello/world</code></li></ol><p>With actual Vert.x <code>Router</code> implementation, <code>/hello/world</code> handler will never called, unless you explicitly call <code>RoutingContext#next()</code> inside <code>/hello/{parameter}</code> handler (that causes <code>Router</code> to run the next route matching the pattern). With lazy methods It&#x2019;s guaranteed that routes will be loaded with order declared inside API specification.</p><p>I choose lazy methods also for code style reasons, It helps a lot to manage the code of router factory.</p><h2 id="And-the-final-result"><a href="#And-the-final-result" class="headerlink" title="And the final result"></a>And the final result</h2><p>With this tools, user can bring OpenAPI 3 power to its Vert.x server implementation as simple as:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">OpenAPI3RouterFactory.createRouterFactoryFromFile(<span class="keyword">this</span>.vertx, <span class="string">&quot;src/main/resources/petstore.yaml&quot;</span>, ar -&gt; {</span><br><span class="line">            <span class="keyword">if</span> (ar.succeeded()) {</span><br><span class="line">                <span class="comment">// Spec loaded with success</span></span><br><span class="line">                OpenAPI3RouterFactory routerFactory = ar.result();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// Add some handlers</span></span><br><span class="line">                routerFactory.addHandlerByOperationId(<span class="string">&quot;listPets&quot;</span>, routingContext -&gt; {</span><br><span class="line">                    RequestParameters params = routingContext.get(<span class="string">&quot;parsedParameters&quot;</span>);</span><br><span class="line">                    <span class="comment">// Handle listPets operation</span></span><br><span class="line">                });</span><br><span class="line">                routerFactory.addFailureHandlerByOperationId(<span class="string">&quot;listPets&quot;</span>, routingContext -&gt; {</span><br><span class="line">                    Throwable failure = routingContext.failure();</span><br><span class="line">                    <span class="comment">// Something really bad happened during listPets handling</span></span><br><span class="line">                });</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Add a security handler</span></span><br><span class="line">                routerFactory.addSecurityHandler(<span class="string">&quot;api_key&quot;</span>, routingContext -&gt; {</span><br><span class="line">                    <span class="comment">// Handle security here and then call next()</span></span><br><span class="line">                    routingContext.next();</span><br><span class="line">                });</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Now you have to generate the router</span></span><br><span class="line">                Router router = routerFactory.getRouter();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Now you can use your Router instance</span></span><br><span class="line">                HttpServer server = vertx.createHttpServer(<span class="keyword">new</span> HttpServerOptions().setPort(<span class="number">8080</span>).setHost(<span class="string">&quot;localhost&quot;</span>));</span><br><span class="line">                server.requestHandler(router::accept).listen();</span><br><span class="line"></span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// Something went wrong during router factory initialization</span></span><br><span class="line">                Throwable exception = ar.cause();</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure><p>Next time I&#x2019;m going to introduce you <code>slush-vertx</code>, a new generator for Vert.x project. Stay tuned!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Good library it&#39;s all about good interface
    
    </summary>
    
    
      <category term="openapi" scheme="https://slinkydeveloper.github.io/tags/openapi/"/>
    
      <category term="web development" scheme="https://slinkydeveloper.github.io/tags/web-development/"/>
    
      <category term="gsoc 2017" scheme="https://slinkydeveloper.github.io/tags/gsoc-2017/"/>
    
      <category term="gsoc" scheme="https://slinkydeveloper.github.io/tags/gsoc/"/>
    
      <category term="vertx" scheme="https://slinkydeveloper.github.io/tags/vertx/"/>
    
      <category term="vertx web" scheme="https://slinkydeveloper.github.io/tags/vertx-web/"/>
    
      <category term="openapi3" scheme="https://slinkydeveloper.github.io/tags/openapi3/"/>
    
      <category term="router factory" scheme="https://slinkydeveloper.github.io/tags/router-factory/"/>
    
      <category term="factory" scheme="https://slinkydeveloper.github.io/tags/factory/"/>
    
  </entry>
  
  <entry>
    <title>My GSoC 2017 - Requests validation</title>
    <link href="https://slinkydeveloper.github.io/My-GSoC-2017-Validation/"/>
    <id>https://slinkydeveloper.github.io/My-GSoC-2017-Validation/</id>
    <published>2017-08-08T16:49:49.000Z</published>
    <updated>2019-01-20T16:28:08.116Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP request validation it&#x2019;s a critical component of my project. HTTP requests validation needs to work well to get working all layers upon. I love to call that <em>vertx-web validation framework</em> (I love the word framework <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f60d.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f60d.png?v8">&#x1F60D;</span>)</p><h2 id="Structure-of-Validation-framework"><a href="#Structure-of-Validation-framework" class="headerlink" title="Structure of Validation framework"></a>Structure of Validation framework</h2><p>The validation framework is located inside maven module <code>vertx-web</code> and package <code>io.vertx.ext.web.validation</code>. Following the Vert.x rules, there are Java interfaces for polyglot vertx-web interface and classes inside <code>io.vertx.ext.web.validation.impl</code> that implements the logic of the validation.</p><p><code>HTTPRequestValidationHandler</code> and <code>OpenAPI3RequestValidationHandler</code> (request validator for OAS3) subclass <code>BaseValidationHandler</code>, the base class for validation. This class contains a map with parameter names as keys and <code>ParameterValidationRule</code> instances as values for every parameter location (query, path, header, cookie, form inside body). Every <code>ParameterValidationRule</code> contains a <code>ParameterTypeValidation</code>. To simplify things:</p><ul><li><code>BaseValidationHandler</code> validates the request, in fact it iterates through parameters and calls <code>ParameterValidationRule</code> methods</li><li><code>ParameterValidationRule</code> abstracts a parameter and validates if parameter exists, if can be empty, &#x2026;</li><li><code>ParameterTypeValidator</code> abstracts the parameter type and validates the type</li></ul><figure><br>  <a href="/images/vertx-web-validation-structure.png" class="image-popup"><img src="/images/vertx-web-validation-structure.png" alt="image"></a><br>  <figcaption>An example of BaseValidationHandler instance</figcaption><br></figure><p>Every exceptions of validation framework are encapsulated inside <code>ValidationException</code> class.</p><h2 id="Types-of-parameters"><a href="#Types-of-parameters" class="headerlink" title="Types of parameters"></a>Types of parameters</h2><p>Most important part of validation is type validation. Type validation take a string or a list of strings as input and gives the parameter correctly parsed as output. I&#x2019;ve built a rich set of type validators (mostly to support OpenAPI 3 parameter types):</p><ul><li><code>NumericTypeValidator</code> to validate integers and floating point values</li><li><code>StringTypeValidator</code> to validate strings against a pattern</li><li><code>BooleanTypeValidator</code> to validate booleans</li><li><code>JsonTypeValidator</code> and <code>XMLTypeValidator</code> to validate json and xml against a schema</li><li><code>EnumTypeValidator</code> to validate enums</li><li><code>ObjectTypeValidator</code> and <code>ArrayTypeValidator</code> to validate objects and array</li><li><code>AnyOfTypeValidator</code> and <code>OneOfTypeValidator</code> to validate json schema like <code>anyOf</code> and <code>oneOf</code></li></ul><p>To instance this classes, there are static methods inside <code>ParameterTypeValidator</code>. Of course, user can subclass <code>ParameterTypeValidator</code> to create its custom type validator.</p><p>I&#x2019;ve also created a set of prebuilt instances of this type validators inside <code>ParameterType</code> enum, with some common patterns like hostname, email, &#x2026; </p><h2 id="Encapsulating-parsed-parameters"><a href="#Encapsulating-parsed-parameters" class="headerlink" title="Encapsulating parsed parameters"></a>Encapsulating parsed parameters</h2><p>After type validation parameter is parsed and then encapsulated in an object called <code>RequestParameter</code>. Every object is mapped into equivalent language type, for example: if we declare a parameter as integer, we receive (in Java) <code>Integer</code> object.</p><p>When user wants to handle parameters, he can retrieve the <code>RequestParameters</code> from <code>RoutingContext</code>. <code>RequestParameters</code> encapsulate all <code>RequestParameter</code> objects filtered by location. For example:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/awesomePath&quot;</span>)</span><br><span class="line">  .handler(superAwesomeValidationHandler)</span><br><span class="line">  .handler(routingContext -&gt; {</span><br><span class="line">  RequestParameters params = routingContext.get(<span class="string">&quot;parsedParameters&quot;</span>);</span><br><span class="line">  RequestParameter awesomeParameter = params.queryParameter(<span class="string">&quot;awesomeParameter&quot;</span>);</span><br><span class="line">  Integer awesome = awesomeParameter.getInteger();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="Arrays-objects-and-serialization-styles"><a href="#Arrays-objects-and-serialization-styles" class="headerlink" title="Arrays, objects and serialization styles"></a>Arrays, objects and serialization styles</h2><p>User can declare arrays and objects as parameters. The <code>ObjectTypeValidator</code>/<code>ArrayTypeValidator</code> provides the deserialization from string, the validation of objects fields/array items with &#x201C;nested&#x201D; validators and the encapsulation inside map/list. For example, you can declare a query parameter as comma separated array of integers like this one: <code>?q=1,2,3,4,5</code> and you will receive as result a <code>List&lt;Integer&gt;</code>.</p><p>The serialization methods are implemented as subclasses of <code>ContainerDeserializer</code> and there are some prebuilt instances in enum <code>ContainerSerializationStyle</code>. Of course, user can use static methods inside <code>ObjectTypeValidator.ObjectTypeValidatorFactory</code> and <code>ArrayTypeValidator.ArrayTypeValidatorFactory</code> to build this validators, define its serialization style and add the &#x201C;nested&#x201D; validators.</p><h2 id="HTTPRequestValidationHandler"><a href="#HTTPRequestValidationHandler" class="headerlink" title="HTTPRequestValidationHandler"></a><code>HTTPRequestValidationHandler</code></h2><p>To start validate the requests, developers can use the <code>HTTPRequestValidationHandler</code>. This class exposes methods to add validators without care about <code>ParameterValidationRule</code>, because they are automatically generated. For every parameter location <code>HTTPRequestValidationHandler</code> exposes three methods:</p><ul><li><code>add*Param</code>: to add a parameter with type taken from <code>ParameterType</code> enum</li><li><code>add*ParamWithPattern</code>: to add a string parameter with a pattern</li><li><code>add*ParamWithCustomTypeValidator</code>: to add a parameter with an instance of <code>ParameterTypeValidator</code></li></ul><p>Then there are methods for body, like <code>addJsonBodySchema</code> or <code>addMultipartRequiredFile</code></p><p>Next time I&#x2019;m going to introduce you the OAS 3 Router Factory, stay tuned!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Everything starter with requests validation
    
    </summary>
    
    
      <category term="web development" scheme="https://slinkydeveloper.github.io/tags/web-development/"/>
    
      <category term="gsoc 2017" scheme="https://slinkydeveloper.github.io/tags/gsoc-2017/"/>
    
      <category term="gsoc" scheme="https://slinkydeveloper.github.io/tags/gsoc/"/>
    
      <category term="vertx" scheme="https://slinkydeveloper.github.io/tags/vertx/"/>
    
      <category term="vertx web" scheme="https://slinkydeveloper.github.io/tags/vertx-web/"/>
    
      <category term="http validation" scheme="https://slinkydeveloper.github.io/tags/http-validation/"/>
    
  </entry>
  
  <entry>
    <title>My GSoC 2017 - Small recap of my summer</title>
    <link href="https://slinkydeveloper.github.io/My-GSoC-2017-Recap/"/>
    <id>https://slinkydeveloper.github.io/My-GSoC-2017-Recap/</id>
    <published>2017-08-08T06:32:36.000Z</published>
    <updated>2019-01-20T16:28:08.115Z</updated>
    
    <content type="html"><![CDATA[<p>I love to code, I code for passion and then for work.<br>Lot of people asked me if, excluding money, it&#x2019;s really interesting to work on an open source project. I found so interesting that I can do that for free and for a lot of reasons: increase skills, help the community, promote myself and work on code that I haven&#x2019;t wrote!</p><p>Mixing the two things I said, Google Summer of Code is perfect for me!</p><h2 id="Small-story-of-my-GSoC-2017-project"><a href="#Small-story-of-my-GSoC-2017-project" class="headerlink" title="Small story of my GSoC 2017 project"></a>Small story of my GSoC 2017 project</h2><p>As my <a href="https://summerofcode.withgoogle.com/projects/#5472433315250176" target="_blank" rel="noopener">project page</a> says, my  object is implement the api design driven development techniques inside vertx-web. Actually the first idea was to implement OpenAPI 2 (fka Swagger) and RAML, then <a href="https://swagger.io/mulesoft-joins-the-openapi-initiative/" target="_blank" rel="noopener">this happened</a>.</p><p class="image-pull-right"><br><img src="http://2434zd29misd3e4a4f1e73ki-wpengine.netdna-ssl.com/wp-content/uploads/2017/04/SwaggerOnlyBeOne.png" alt=""><br></p><p>With OpenAPI 3 at horizon we decided to focus on it, because, as for Swagger 2, OpenAPI 3 have converters from old specification versions to newest one. As my mentor says, we are pioneers of OAS 3 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8">&#x1F604;</span>. For OpenAPI 3 parsing, we decided to use <a href="https://github.com/RepreZen/KaiZen-OpenApi-Parser" target="_blank" rel="noopener">Kaizen-OpenAPI-Parser</a> and I often helped this new project with <a href="https://github.com/RepreZen/KaiZen-OpenApi-Parser/pulls?utf8=%E2%9C%93&amp;q=author%3Aslinkydeveloper%20" target="_blank" rel="noopener">pull requests</a>.<br>But I kept the idea to abstract as much as possible the router factory and the validation methods to enable future implementations of new api specification standards. I&#x2019;ve also created an interface for users to validate HTTP requests without writing an api spec. Also, to complete my work, I wrote a lot of unit tests<br>At the end of implementation of validation and router factory for OAS 3, I wrote a lot of documentation and also a <a href="http://vertx.io/blog/openapi-fka-swagger-3-support-in-eclipse-vert-x-now-in-test-stage/" target="_blank" rel="noopener">blog post on Eclipse Vert.x blog</a></p><p>After the first evaluation phase, I refactored the code splitting it in different maven packages. Then I started focusing on code generation: <a href="https://github.com/swagger-api/swagger-codegen/issues/4669#issuecomment-320597504" target="_blank" rel="noopener">swagger-codegen</a> doesn&#x2019;t support for now OAS 3, and they don&#x2019;t know when they will release OAS 3 support, so we decided to create our generator. Basing on <a href="https://github.com/pmlopes/slush-vertx" target="_blank" rel="noopener">my mentor&#x2019;s project</a>, I started creating the code generator. I&#x2019;ve done huge changes from original project, to enable it to add different generators to same project and support different languages and package managers. I&#x2019;ve also take advantage of this work to generate new unit tests for OAS 3 router factory and validation (with a tremendous first run <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f622.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f622.png?v8">&#x1F622;</span>).</p><p class="image-pull-left"><br><img src="/images/80124719.jpg" alt=""><br></p><p>I&#x2019;ve also done other pull requests to vertx-web complementary to my work. I <a href="https://github.com/vert-x3/vertx-web/pull/581" target="_blank" rel="noopener">added a method to get query parameters</a> and I <a href="https://github.com/vert-x3/vertx-web/pull/652" target="_blank" rel="noopener">enabled <code>Route</code> object to contain multiple handlers (like Express middlewares)</a>.</p><p>Before the end of the summer, I will give to Vert.x a set of classes for HTTP requests validation, OAS 3 support and a generator multi-purpose simple to extend with new templates.</p><p>In the next articles I&#x2019;m going to discuss about all technical things about my project, stay tuned!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Recap of my GSoC 2017 project with Eclipse Vert.x
    
    </summary>
    
    
      <category term="web development" scheme="https://slinkydeveloper.github.io/tags/web-development/"/>
    
      <category term="gsoc 2017" scheme="https://slinkydeveloper.github.io/tags/gsoc-2017/"/>
    
      <category term="gsoc" scheme="https://slinkydeveloper.github.io/tags/gsoc/"/>
    
      <category term="vertx" scheme="https://slinkydeveloper.github.io/tags/vertx/"/>
    
      <category term="vertx web" scheme="https://slinkydeveloper.github.io/tags/vertx-web/"/>
    
  </entry>
  
  <entry>
    <title>What&#39;s new in OpenAPI Specification 3 - Parameters</title>
    <link href="https://slinkydeveloper.github.io/Whats-New-In-OAS3-Parameters/"/>
    <id>https://slinkydeveloper.github.io/Whats-New-In-OAS3-Parameters/</id>
    <published>2017-06-23T21:36:44.000Z</published>
    <updated>2019-01-20T16:28:08.114Z</updated>
    
    <content type="html"><![CDATA[<p>OpenAPI 3 Parameter Object it&#x2019;s totally different from old OpenAPI 2. It gives the power to describe complex parameters, using the power of Schema object. I will introduce to you this breaking changes</p><h2 id="No-more-form-and-body-parameters"><a href="#No-more-form-and-body-parameters" class="headerlink" title="No more form and body parameters"></a>No more form and body parameters</h2><p>One of the major changes is that body parameters (forms, json, &#x2026;) are moved to a new object called <code>RequestBody</code>. So now <code>Parameter</code> supports only request parameters <code>in</code>:</p><ul><li><code>header</code></li><li><code>query</code></li><li><code>path</code></li><li>and the new one <code>cookie</code></li></ul><h2 id="schema-is-better-than-type"><a href="#schema-is-better-than-type" class="headerlink" title="schema is better than type"></a><code>schema</code> is better than <code>type</code></h2><p>In OpenAPI 2 a parameter is defined as:<br></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">smile</span></span><br><span class="line"><span class="attr">    in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    format:</span> <span class="string">([;:]-*([()\[\]])\2*)</span> <span class="comment"># Smile regex</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>In OpenAPI 3 you can find the same parameter as:<br></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">smile</span></span><br><span class="line"><span class="attr">    in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      format:</span> <span class="string">([;:]-*([()\[\]])\2*)</span> <span class="comment"># Smile regex</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>The major difference is that now you <strong>have to</strong> define a <code>schema</code> for every single parameter, even the most simple.</p><p>It seems annoying, but It gives some interesting opportunities. For example: A model identifier has a particular regular expression (<code>format</code>) that describes it and you want to write CRUD methods for this model. This is what you have to do in OpenAPI 2:<br></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get path</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">id</span></span><br><span class="line"><span class="attr">    in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      format:</span> <span class="string">^[a-z]{3}[0-9]{10}$</span></span><br><span class="line"><span class="comment"># delete path</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">id</span></span><br><span class="line"><span class="attr">    in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      format:</span> <span class="string">^[a-z]{3}[0-9]{10}$</span></span><br><span class="line"><span class="comment"># And so on</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>Now with OpenAPI 3 you can define this single string as a schema and reference to it where you want:<br></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># define your identifier schema in components/schema</span></span><br><span class="line"><span class="attr">components:</span></span><br><span class="line"><span class="attr">  schemas:</span></span><br><span class="line"><span class="attr">    my_model_identifier:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      format:</span> <span class="string">^[a-z]{3}[0-9]{10}$</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get path</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">id</span></span><br><span class="line"><span class="attr">    in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/my_model_identifier&apos;</span></span><br><span class="line"><span class="comment"># delete path</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">id</span></span><br><span class="line"><span class="attr">    in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/my_model_identifier&apos;</span></span><br><span class="line"><span class="comment"># And so on</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>You can also reuse it to define complete model:<br></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components:</span></span><br><span class="line"><span class="attr">  schemas:</span></span><br><span class="line"><span class="attr">    my_model_identifier:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      format:</span> <span class="string">^[a-z]{3}[0-9]{10}$</span></span><br><span class="line"><span class="attr">    my_model:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">      parameters:</span></span><br><span class="line"><span class="attr">        id:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">&apos;#/components/schemas/my_model_identifier&apos;</span></span><br><span class="line"><span class="attr">        other_field:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="Objects-inside-path-query-header-parameters"><a href="#Objects-inside-path-query-header-parameters" class="headerlink" title="Objects inside path/query/header parameters"></a>Objects inside path/query/header parameters</h2><p>This is tricky, but actually it&#x2019;s possible. With Schema object support you can define object as query, header, cookie, path parameter. This is an example:<br></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">parameter</span></span><br><span class="line"><span class="attr">    in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">      properties:</span></span><br><span class="line"><span class="attr">        a:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">        b:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      required:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">a</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">b</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>I will explain later how to submit this type of requests</p><p>One interesting usage is when you have multi-dimensional key for a model, for example a geolocation model.</p><h2 id="Serialization-style-changes"><a href="#Serialization-style-changes" class="headerlink" title="Serialization style changes"></a>Serialization style changes</h2><p><code>style</code> is the new name of <code>collectionFormat</code> field. But It isn&#x2019;t only a name change. Also <code>style</code> is supported by another field: <code>exploded</code>. This is the comparison table with OpenAPI 2</p><table><thead><tr><th style="text-align:left"><code>style</code></th><th style="text-align:center"><code>explode</code></th><th style="text-align:right">OpenAPI 2 <code>collectionFormat</code></th></tr></thead><tbody><tr><td style="text-align:left">matrix</td><td style="text-align:center">false</td><td style="text-align:right">not supported</td></tr><tr><td style="text-align:left">matrix</td><td style="text-align:center">true</td><td style="text-align:right">not supported</td></tr><tr><td style="text-align:left">label</td><td style="text-align:center">false</td><td style="text-align:right">not supported</td></tr><tr><td style="text-align:left">label</td><td style="text-align:center">true</td><td style="text-align:right">not supported</td></tr><tr><td style="text-align:left">form</td><td style="text-align:center">false</td><td style="text-align:right"><code>csv</code></td></tr><tr><td style="text-align:left">form</td><td style="text-align:center">true</td><td style="text-align:right"><code>multi</code></td></tr><tr><td style="text-align:left">simple</td><td style="text-align:center">false</td><td style="text-align:right"><code>csv</code></td></tr><tr><td style="text-align:left">simple</td><td style="text-align:center">true</td><td style="text-align:right"><code>csv</code> (not for object)</td></tr><tr><td style="text-align:left">spaceDelimited</td><td style="text-align:center">false</td><td style="text-align:right"><code>ssv</code></td></tr><tr><td style="text-align:left">pipeDelimited</td><td style="text-align:center">false</td><td style="text-align:right"><code>pipes</code></td></tr><tr><td style="text-align:left">deepObject</td><td style="text-align:center">true</td><td style="text-align:right">not supported</td></tr></tbody></table><p>{: .table}</p><p>For more informations about how to use this two new fields, check out this <a href="https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#style-examples" target="_blank" rel="noopener">table</a>.</p><h2 id="Complex-parameters-with-content"><a href="#Complex-parameters-with-content" class="headerlink" title="Complex parameters with content"></a>Complex parameters with <code>content</code></h2><p>If you think <code>schema</code> isn&#x2019;t enough, check out <code>content</code> field. I will explain this further when I will cover <code>RequestBody</code></p><h2 id="Tips-to-create-a-good-parameter-object-in-OpenAPI-3"><a href="#Tips-to-create-a-good-parameter-object-in-OpenAPI-3" class="headerlink" title="Tips to create a good parameter object in OpenAPI 3"></a>Tips to create a good parameter object in OpenAPI 3</h2><ul><li>Try to keep parameters as simple as possible. Avoid as much as possible objects and arrays, They create only a lot of headaches</li><li>Use <code>query</code> parameters if you need to pass arrays to operation and use <code>form</code> style</li><li>Pass objects to an operation with <code>RequestBody</code>, or split it in different primitive parameters.</li><li>Take as much as possible advantage of <code>schema</code> inside <code>Parameter</code> object. In particular use it to define object identifiers</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      A guide to new Parameter Object inside OpenAPI Specification 3
    
    </summary>
    
    
      <category term="swagger" scheme="https://slinkydeveloper.github.io/tags/swagger/"/>
    
      <category term="openapi" scheme="https://slinkydeveloper.github.io/tags/openapi/"/>
    
      <category term="web development" scheme="https://slinkydeveloper.github.io/tags/web-development/"/>
    
      <category term="web api" scheme="https://slinkydeveloper.github.io/tags/web-api/"/>
    
      <category term="openapi3" scheme="https://slinkydeveloper.github.io/tags/openapi3/"/>
    
  </entry>
  
  <entry>
    <title>Why use Web API specifications?</title>
    <link href="https://slinkydeveloper.github.io/Why-Use-API-Specification/"/>
    <id>https://slinkydeveloper.github.io/Why-Use-API-Specification/</id>
    <published>2017-06-03T17:30:00.000Z</published>
    <updated>2019-01-20T16:28:08.114Z</updated>
    
    <content type="html"><![CDATA[<p>You can see Web API Specifications like Javadoc: you can&#x2019;t use a Java library without Javadoc! Web API spec are &#x201C;Javadocs&#x201D; of web services. But there&#x2019;s one big difference: you can write your Web API Spec before start writing your server. It generates a big difference inside development process. I will introduce you to this magic world.</p><h2 id="Design-Driven-Development"><a href="#Design-Driven-Development" class="headerlink" title="Design Driven Development"></a>Design Driven Development</h2><p>Design Driven Development is the name of technique which consists in: write the Web API spec before start writing any other code. Then, when you start writing code, you already have implemented a &#x201C;dictionary&#x201D; of server-client interface, so front-end and back-end developers go straight to implement logic of application. If you choose the right tools, you don&#x2019;t have to care about:</p><ul><li>What is the correct HTTP Request to do something</li><li>If you have done request with correct and valid parameters</li><li>If logged user has correct requirements to complete the operation requested</li></ul><p>The flexibility of Web API specifications enables this to be used for a lot of use cases:</p><ul><li>Develop a SPA (single page application) with back-end in any language and front-end in Javascript</li><li>Develop a mobile application with back-end in any language and front-end natives</li><li>Develop a web service with backend in every language and auto-generate clients for every language</li></ul><h2 id="Approaches-to-use-Web-API-Specification-in-you-project"><a href="#Approaches-to-use-Web-API-Specification-in-you-project" class="headerlink" title="Approaches to use Web API Specification in you project"></a>Approaches to use Web API Specification in you project</h2><p>Both client and server can be linked to Web API Spec through two different approches:</p><ul><li>Static code generation</li><li>Dynamic code generation</li></ul><p>Static code generation is the most simple to achieve, you can find a code generation library for every language/framework/api specification standard combination. Depending on your project and on library you use it can be useful approach or not. It&#x2019;s a really interesting approach on client-side, but it lacks of flexibility in server side. Most code generators on server side create a <strong>stub of server code</strong>, with all validation and security routines generated directly from code generator. It can be really useful when you write an Web API Spec that you assert that will <strong>wont&#x2019;t change</strong> during development of back-end. One important feature of static code generation is represented by performances, so I prefer this for a web service project</p><p>Dynamic code generation is the most interesting for server side of small project. You can change your spec every time you want, and server will generate new validation flow. It&#x2019;s interesting when you write a client-server complete stack, and you change spec during development.</p><h2 id="Small-projects"><a href="#Small-projects" class="headerlink" title="Small projects"></a>Small projects</h2><p>Do you want to write a magic mobile/web application with a couple of your friends that do something astonishing? Use this tools:</p><ul><li>OpenAPI specification 2 (version 3 is newer, but you can&#x2019;t find tools related)</li><li>Node.JS backend with dynamic code generation library (I suggest <a href="https://github.com/krakenjs/swaggerize-express/" target="_blank" rel="noopener">swaggerize-express</a>)</li><li>Static client code generators</li><li>Good feeling between you and your friends when you write the spec :)</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Let&#39;s talk about why you should use Web API specifications even in small projects
    
    </summary>
    
    
      <category term="swagger" scheme="https://slinkydeveloper.github.io/tags/swagger/"/>
    
      <category term="openapi" scheme="https://slinkydeveloper.github.io/tags/openapi/"/>
    
      <category term="web development" scheme="https://slinkydeveloper.github.io/tags/web-development/"/>
    
      <category term="web api" scheme="https://slinkydeveloper.github.io/tags/web-api/"/>
    
      <category term="backend" scheme="https://slinkydeveloper.github.io/tags/backend/"/>
    
      <category term="frontend" scheme="https://slinkydeveloper.github.io/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>Hello world!</title>
    <link href="https://slinkydeveloper.github.io/Hello-World!/"/>
    <id>https://slinkydeveloper.github.io/Hello-World!/</id>
    <published>2017-06-03T11:32:44.000Z</published>
    <updated>2019-01-20T16:28:08.113Z</updated>
    
    <content type="html"><![CDATA[<p>This is one of my favourite sentences. Really, when you read hello world on console you know that you have taken the correct path to reach your objective. I read this sentence a lot of times in my console, and every time I&#x2019;m comforting read it. It gives me the power to write <code>&quot;hello world&quot; + name</code>.</p><h3 id="Languages-I-know"><a href="#Languages-I-know" class="headerlink" title="Languages I know"></a>Languages I know</h3><p>I&#x2019;ve practiced hello world in different languages:</p><ul><li>C++</li><li>Java</li><li>Javascript</li><li>Python</li></ul><p>And others&#x2026; And I want to practice it in a lot of other different languages, because, as you probably know, in IT world we never stop learning.</p><h3 id="My-loves-Javascript-and-Java"><a href="#My-loves-Javascript-and-Java" class="headerlink" title="My loves: Javascript and Java"></a>My loves: Javascript and Java</h3><p>Javascript is my favourite language. You can use this language for everything you want: desktop app, mobile app, web app, backend, &#x2026; It has like an infinite catalogue of libraries for every need! I&#x2019;m a little bit experienced with Node.JS/Express stack, and a lot of related libraries. I&#x2019;m also experienced with OpenAPI specification, and all related tools (Swagger Editor, swaggerize-express, &#x2026;).</p><p>For me Java is like big brother of Javascript. But if you love Javascript, you love Java too. I know little bit of Java-EE, Android development and I&#x2019;m learning right now Eclipse Vert.x for GSoC 2017</p><p>So, don&#x2019;t get surprised if i&#x2019;m going to talk a lot about Java and Javascript!</p><h3 id="The-guys-that-I-want-to-know-better-C-and-Python"><a href="#The-guys-that-I-want-to-know-better-C-and-Python" class="headerlink" title="The guys that I want to know better: C++ and Python"></a>The guys that I want to know better: C++ and Python</h3><p>I&#x2019;ve got a small experience with C++ and Python, but I&#x2019;m going to improve my skills. This languages are a must have in a developer portfolio!</p><h1 id="Why-a-blog"><a href="#Why-a-blog" class="headerlink" title="Why a blog?"></a>Why a blog?</h1><p>I&#x2019;m going to write a blog because I want to document my experiences and share my projects. And also, I think it will be funny!</p><p><strong>Stay tuned!</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Hello to everybody! This is my brand new blog!
    
    </summary>
    
    
  </entry>
  
</feed>
