<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello world!</title>
    <url>/Hello-World!/</url>
    <content><![CDATA[<p>This is one of my favourite sentences. Really, when you read hello world on console you know that you have taken the correct path to reach your objective. I read this sentence a lot of times in my console, and every time I’m comforting read it. It gives me the power to write <code>&quot;hello world&quot; + name</code>.</p>
<h3 id="Languages-I-know">Languages I know</h3>
<p>I’ve practiced hello world in different languages:</p>
<ul>
<li>C++</li>
<li>Java</li>
<li>Javascript</li>
<li>Python</li>
</ul>
<p>And others… And I want to practice it in a lot of other different languages, because, as you probably know, in IT world we never stop learning.</p>
<h3 id="My-loves-Javascript-and-Java">My loves: Javascript and Java</h3>
<p>Javascript is my favourite language. You can use this language for everything you want: desktop app, mobile app, web app, backend, … It has like an infinite catalogue of libraries for every need! I’m a little bit experienced with Node.JS/Express stack, and a lot of related libraries. I’m also experienced with OpenAPI specification, and all related tools (Swagger Editor, swaggerize-express, …).</p>
<p>For me Java is like big brother of Javascript. But if you love Javascript, you love Java too. I know little bit of Java-EE, Android development and I’m learning right now Eclipse Vert.x for GSoC 2017</p>
<p>So, don’t get surprised if i’m going to talk a lot about Java and Javascript!</p>
<h3 id="The-guys-that-I-want-to-know-better-C-and-Python">The guys that I want to know better: C++ and Python</h3>
<p>I’ve got a small experience with C++ and Python, but I’m going to improve my skills. This languages are a must have in a developer portfolio!</p>
<h1>Why a blog?</h1>
<p>I’m going to write a blog because I want to document my experiences and share my projects. And also, I think it will be funny!</p>
<p><strong>Stay tuned!</strong></p>
]]></content>
  </entry>
  <entry>
    <title>Why use Web API specifications?</title>
    <url>/Why-Use-API-Specification/</url>
    <content><![CDATA[<p>You can see Web API Specifications like Javadoc: you can’t use a Java library without Javadoc! Web API spec are “Javadocs” of web services. But there’s one big difference: you can write your Web API Spec before start writing your server. It generates a big difference inside development process. I will introduce you to this magic world.</p>
<h2 id="Design-Driven-Development">Design Driven Development</h2>
<p>Design Driven Development is the name of technique which consists in: write the Web API spec before start writing any other code. Then, when you start writing code, you already have implemented a “dictionary” of server-client interface, so front-end and back-end developers go straight to implement logic of application. If you choose the right tools, you don’t have to care about:</p>
<ul>
<li>What is the correct HTTP Request to do something</li>
<li>If you have done request with correct and valid parameters</li>
<li>If logged user has correct requirements to complete the operation requested</li>
</ul>
<p>The flexibility of Web API specifications enables this to be used for a lot of use cases:</p>
<ul>
<li>Develop a SPA (single page application) with back-end in any language and front-end in Javascript</li>
<li>Develop a mobile application with back-end in any language and front-end natives</li>
<li>Develop a web service with backend in every language and auto-generate clients for every language</li>
</ul>
<h2 id="Approaches-to-use-Web-API-Specification-in-you-project">Approaches to use Web API Specification in you project</h2>
<p>Both client and server can be linked to Web API Spec through two different approches:</p>
<ul>
<li>Static code generation</li>
<li>Dynamic code generation</li>
</ul>
<p>Static code generation is the most simple to achieve, you can find a code generation library for every language/framework/api specification standard combination. Depending on your project and on library you use it can be useful approach or not. It’s a really interesting approach on client-side, but it lacks of flexibility in server side. Most code generators on server side create a <strong>stub of server code</strong>, with all validation and security routines generated directly from code generator. It can be really useful when you write an Web API Spec that you assert that will <strong>wont’t change</strong> during development of back-end. One important feature of static code generation is represented by performances, so I prefer this for a web service project</p>
<p>Dynamic code generation is the most interesting for server side of small project. You can change your spec every time you want, and server will generate new validation flow. It’s interesting when you write a client-server complete stack, and you change spec during development.</p>
<h2 id="Small-projects">Small projects</h2>
<p>Do you want to write a magic mobile/web application with a couple of your friends that do something astonishing? Use this tools:</p>
<ul>
<li>OpenAPI specification 2 (version 3 is newer, but you can’t find tools related)</li>
<li>Node.JS backend with dynamic code generation library (I suggest <a href="https://github.com/krakenjs/swaggerize-express/">swaggerize-express</a>)</li>
<li>Static client code generators</li>
<li>Good feeling between you and your friends when you write the spec :)</li>
</ul>
]]></content>
      <tags>
        <tag>swagger</tag>
        <tag>openapi</tag>
        <tag>web development</tag>
        <tag>web api</tag>
        <tag>backend</tag>
        <tag>frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>What&#39;s new in OpenAPI Specification 3 - Parameters</title>
    <url>/Whats-New-In-OAS3-Parameters/</url>
    <content><![CDATA[<p>OpenAPI 3 Parameter Object it’s totally different from old OpenAPI 2. It gives the power to describe complex parameters, using the power of Schema object. I will introduce to you this breaking changes</p>
<h2 id="No-more-form-and-body-parameters">No more form and body parameters</h2>
<p>One of the major changes is that body parameters (forms, json, …) are moved to a new object called <code>RequestBody</code>. So now <code>Parameter</code> supports only request parameters <code>in</code>:</p>
<ul>
<li><code>header</code></li>
<li><code>query</code></li>
<li><code>path</code></li>
<li>and the new one <code>cookie</code></li>
</ul>
<h2 id="schema-is-better-than-type"><code>schema</code> is better than <code>type</code></h2>
<p>In OpenAPI 2 a parameter is defined as:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">smile</span></span><br><span class="line">    <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">([;:]-*([()\[\]])\2*)</span> <span class="comment"># Smile regex</span></span><br></pre></td></tr></table></figure>
<p>In OpenAPI 3 you can find the same parameter as:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">smile</span></span><br><span class="line">    <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">    <span class="attr">schema:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">format:</span> <span class="string">([;:]-*([()\[\]])\2*)</span> <span class="comment"># Smile regex</span></span><br></pre></td></tr></table></figure>
<p>The major difference is that now you <strong>have to</strong> define a <code>schema</code> for every single parameter, even the most simple.</p>
<p>It seems annoying, but It gives some interesting opportunities. For example: A model identifier has a particular regular expression (<code>format</code>) that describes it and you want to write CRUD methods for this model. This is what you have to do in OpenAPI 2:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get path</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">    <span class="attr">schema:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">format:</span> <span class="string">^[a-z]&#123;3&#125;[0-9]&#123;10&#125;$</span></span><br><span class="line"><span class="comment"># delete path</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">    <span class="attr">schema:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">format:</span> <span class="string">^[a-z]&#123;3&#125;[0-9]&#123;10&#125;$</span></span><br><span class="line"><span class="comment"># And so on</span></span><br></pre></td></tr></table></figure>
<p>Now with OpenAPI 3 you can define this single string as a schema and reference to it where you want:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># define your identifier schema in components/schema</span></span><br><span class="line"><span class="attr">components:</span></span><br><span class="line">  <span class="attr">schemas:</span></span><br><span class="line">    <span class="attr">my_model_identifier:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">format:</span> <span class="string">^[a-z]&#123;3&#125;[0-9]&#123;10&#125;$</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get path</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">    <span class="attr">schema:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/my_model_identifier&#x27;</span></span><br><span class="line"><span class="comment"># delete path</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">    <span class="attr">schema:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/my_model_identifier&#x27;</span></span><br><span class="line"><span class="comment"># And so on</span></span><br></pre></td></tr></table></figure>
<p>You can also reuse it to define complete model:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">components:</span></span><br><span class="line">  <span class="attr">schemas:</span></span><br><span class="line">    <span class="attr">my_model_identifier:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">format:</span> <span class="string">^[a-z]&#123;3&#125;[0-9]&#123;10&#125;$</span></span><br><span class="line">    <span class="attr">my_model:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="attr">id:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/my_model_identifier&#x27;</span></span><br><span class="line">        <span class="attr">other_field:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure>
<h2 id="Objects-inside-path-query-header-parameters">Objects inside path/query/header parameters</h2>
<p>This is tricky, but actually it’s possible. With Schema object support you can define object as query, header, cookie, path parameter. This is an example:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">parameter</span></span><br><span class="line">    <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">    <span class="attr">schema:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">a:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line">        <span class="attr">b:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">required:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">a</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">b</span></span><br></pre></td></tr></table></figure>
<p>I will explain later how to submit this type of requests</p>
<p>One interesting usage is when you have multi-dimensional key for a model, for example a geolocation model.</p>
<h2 id="Serialization-style-changes">Serialization style changes</h2>
<p><code>style</code> is the new name of <code>collectionFormat</code> field. But It isn’t only a name change. Also <code>style</code> is supported by another field: <code>exploded</code>. This is the comparison table with OpenAPI 2</p>
<table>
<thead>
<tr>
<th style="text-align:left"><code>style</code></th>
<th style="text-align:center"><code>explode</code></th>
<th style="text-align:right">OpenAPI 2 <code>collectionFormat</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">matrix</td>
<td style="text-align:center">false</td>
<td style="text-align:right">not supported</td>
</tr>
<tr>
<td style="text-align:left">matrix</td>
<td style="text-align:center">true</td>
<td style="text-align:right">not supported</td>
</tr>
<tr>
<td style="text-align:left">label</td>
<td style="text-align:center">false</td>
<td style="text-align:right">not supported</td>
</tr>
<tr>
<td style="text-align:left">label</td>
<td style="text-align:center">true</td>
<td style="text-align:right">not supported</td>
</tr>
<tr>
<td style="text-align:left">form</td>
<td style="text-align:center">false</td>
<td style="text-align:right"><code>csv</code></td>
</tr>
<tr>
<td style="text-align:left">form</td>
<td style="text-align:center">true</td>
<td style="text-align:right"><code>multi</code></td>
</tr>
<tr>
<td style="text-align:left">simple</td>
<td style="text-align:center">false</td>
<td style="text-align:right"><code>csv</code></td>
</tr>
<tr>
<td style="text-align:left">simple</td>
<td style="text-align:center">true</td>
<td style="text-align:right"><code>csv</code> (not for object)</td>
</tr>
<tr>
<td style="text-align:left">spaceDelimited</td>
<td style="text-align:center">false</td>
<td style="text-align:right"><code>ssv</code></td>
</tr>
<tr>
<td style="text-align:left">pipeDelimited</td>
<td style="text-align:center">false</td>
<td style="text-align:right"><code>pipes</code></td>
</tr>
<tr>
<td style="text-align:left">deepObject</td>
<td style="text-align:center">true</td>
<td style="text-align:right">not supported</td>
</tr>
<tr>
<td style="text-align:left">{: .table}</td>
<td style="text-align:center"></td>
<td style="text-align:right"></td>
</tr>
</tbody>
</table>
<p>For more informations about how to use this two new fields, check out this <a href="https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#style-examples">table</a>.</p>
<h2 id="Complex-parameters-with-content">Complex parameters with <code>content</code></h2>
<p>If you think <code>schema</code> isn’t enough, check out <code>content</code> field. I will explain this further when I will cover <code>RequestBody</code></p>
<h2 id="Tips-to-create-a-good-parameter-object-in-OpenAPI-3">Tips to create a good parameter object in OpenAPI 3</h2>
<ul>
<li>Try to keep parameters as simple as possible. Avoid as much as possible objects and arrays, They create only a lot of headaches</li>
<li>Use <code>query</code> parameters if you need to pass arrays to operation and use <code>form</code> style</li>
<li>Pass objects to an operation with <code>RequestBody</code>, or split it in different primitive parameters.</li>
<li>Take as much as possible advantage of <code>schema</code> inside <code>Parameter</code> object. In particular use it to define object identifiers</li>
</ul>
]]></content>
      <tags>
        <tag>swagger</tag>
        <tag>openapi</tag>
        <tag>web development</tag>
        <tag>web api</tag>
        <tag>openapi3</tag>
      </tags>
  </entry>
  <entry>
    <title>My GSoC 2017 - Small recap of my summer</title>
    <url>/My-GSoC-2017-Recap/</url>
    <content><![CDATA[<p>I love to code, I code for passion and then for work.<br>
Lot of people asked me if, excluding money, it’s really interesting to work on an open source project. I found so interesting that I can do that for free and for a lot of reasons: increase skills, help the community, promote myself and work on code that I haven’t wrote!</p>
<p>Mixing the two things I said, Google Summer of Code is perfect for me!</p>
<h2 id="Small-story-of-my-GSoC-2017-project">Small story of my GSoC 2017 project</h2>
<p>As my <a href="https://summerofcode.withgoogle.com/projects/#5472433315250176">project page</a> says, my  object is implement the api design driven development techniques inside vertx-web. Actually the first idea was to implement OpenAPI 2 (fka Swagger) and RAML, then <a href="https://swagger.io/mulesoft-joins-the-openapi-initiative/">this happened</a>.</p>
<p class="image-pull-right">
<img src="http://2434zd29misd3e4a4f1e73ki-wpengine.netdna-ssl.com/wp-content/uploads/2017/04/SwaggerOnlyBeOne.png" alt="">
</p>
<p>With OpenAPI 3 at horizon we decided to focus on it, because, as for Swagger 2, OpenAPI 3 have converters from old specification versions to newest one. As my mentor says, we are pioneers of OAS 3 <span class="emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span>. For OpenAPI 3 parsing, we decided to use <a href="https://github.com/RepreZen/KaiZen-OpenApi-Parser">Kaizen-OpenAPI-Parser</a> and I often helped this new project with <a href="https://github.com/RepreZen/KaiZen-OpenApi-Parser/pulls?utf8=%E2%9C%93&amp;q=author%3Aslinkydeveloper%20">pull requests</a>.<br>
But I kept the idea to abstract as much as possible the router factory and the validation methods to enable future implementations of new api specification standards. I’ve also created an interface for users to validate HTTP requests without writing an api spec. Also, to complete my work, I wrote a lot of unit tests<br>
At the end of implementation of validation and router factory for OAS 3, I wrote a lot of documentation and also a <a href="http://vertx.io/blog/openapi-fka-swagger-3-support-in-eclipse-vert-x-now-in-test-stage/">blog post on Eclipse Vert.x blog</a></p>
<p>After the first evaluation phase, I refactored the code splitting it in different maven packages. Then I started focusing on code generation: <a href="https://github.com/swagger-api/swagger-codegen/issues/4669#issuecomment-320597504">swagger-codegen</a> doesn’t support for now OAS 3, and they don’t know when they will release OAS 3 support, so we decided to create our generator. Basing on <a href="https://github.com/pmlopes/slush-vertx">my mentor’s project</a>, I started creating the code generator. I’ve done huge changes from original project, to enable it to add different generators to same project and support different languages and package managers. I’ve also take advantage of this work to generate new unit tests for OAS 3 router factory and validation (with a tremendous first run <span class="emoji" alias="cry" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">😢</span>).</p>
<p class="image-pull-left">
<img src="/images/80124719.jpg" alt="">
</p>
<p>I’ve also done other pull requests to vertx-web complementary to my work. I <a href="https://github.com/vert-x3/vertx-web/pull/581">added a method to get query parameters</a> and I <a href="https://github.com/vert-x3/vertx-web/pull/652">enabled <code>Route</code> object to contain multiple handlers (like Express middlewares)</a>.</p>
<p>Before the end of the summer, I will give to Vert.x a set of classes for HTTP requests validation, OAS 3 support and a generator multi-purpose simple to extend with new templates.</p>
<p>In the next articles I’m going to discuss about all technical things about my project, stay tuned!</p>
]]></content>
      <tags>
        <tag>web development</tag>
        <tag>gsoc 2017</tag>
        <tag>gsoc</tag>
        <tag>vertx</tag>
        <tag>vertx web</tag>
      </tags>
  </entry>
  <entry>
    <title>My GSoC 2017 - Requests validation</title>
    <url>/My-GSoC-2017-Validation/</url>
    <content><![CDATA[<p>HTTP request validation it’s a critical component of my project. HTTP requests validation needs to work well to get working all layers upon. I love to call that <em>vertx-web validation framework</em> (I love the word framework <span class="emoji" alias="heart_eyes" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60d.png?v8">😍</span>)</p>
<h2 id="Structure-of-Validation-framework">Structure of Validation framework</h2>
<p>The validation framework is located inside maven module <code>vertx-web</code> and package <code>io.vertx.ext.web.validation</code>. Following the Vert.x rules, there are Java interfaces for polyglot vertx-web interface and classes inside <code>io.vertx.ext.web.validation.impl</code> that implements the logic of the validation.</p>
<p><code>HTTPRequestValidationHandler</code> and <code>OpenAPI3RequestValidationHandler</code> (request validator for OAS3) subclass <code>BaseValidationHandler</code>, the base class for validation. This class contains a map with parameter names as keys and <code>ParameterValidationRule</code> instances as values for every parameter location (query, path, header, cookie, form inside body). Every <code>ParameterValidationRule</code> contains a <code>ParameterTypeValidation</code>. To simplify things:</p>
<ul>
<li><code>BaseValidationHandler</code> validates the request, in fact it iterates through parameters and calls <code>ParameterValidationRule</code> methods</li>
<li><code>ParameterValidationRule</code> abstracts a parameter and validates if parameter exists, if can be empty, …</li>
<li><code>ParameterTypeValidator</code> abstracts the parameter type and validates the type</li>
</ul>
<figure>
  <a href="/images/vertx-web-validation-structure.png" class="image-popup"><img src="/images/vertx-web-validation-structure.png" alt="image"></a>
  <figcaption>An example of BaseValidationHandler instance</figcaption>
</figure>
<p>Every exceptions of validation framework are encapsulated inside <code>ValidationException</code> class.</p>
<h2 id="Types-of-parameters">Types of parameters</h2>
<p>Most important part of validation is type validation. Type validation take a string or a list of strings as input and gives the parameter correctly parsed as output. I’ve built a rich set of type validators (mostly to support OpenAPI 3 parameter types):</p>
<ul>
<li><code>NumericTypeValidator</code> to validate integers and floating point values</li>
<li><code>StringTypeValidator</code> to validate strings against a pattern</li>
<li><code>BooleanTypeValidator</code> to validate booleans</li>
<li><code>JsonTypeValidator</code> and <code>XMLTypeValidator</code> to validate json and xml against a schema</li>
<li><code>EnumTypeValidator</code> to validate enums</li>
<li><code>ObjectTypeValidator</code> and <code>ArrayTypeValidator</code> to validate objects and array</li>
<li><code>AnyOfTypeValidator</code> and <code>OneOfTypeValidator</code> to validate json schema like <code>anyOf</code> and <code>oneOf</code></li>
</ul>
<p>To instance this classes, there are static methods inside <code>ParameterTypeValidator</code>. Of course, user can subclass <code>ParameterTypeValidator</code> to create its custom type validator.</p>
<p>I’ve also created a set of prebuilt instances of this type validators inside <code>ParameterType</code> enum, with some common patterns like hostname, email, …</p>
<h2 id="Encapsulating-parsed-parameters">Encapsulating parsed parameters</h2>
<p>After type validation parameter is parsed and then encapsulated in an object called <code>RequestParameter</code>. Every object is mapped into equivalent language type, for example: if we declare a parameter as integer, we receive (in Java) <code>Integer</code> object.</p>
<p>When user wants to handle parameters, he can retrieve the <code>RequestParameters</code> from <code>RoutingContext</code>. <code>RequestParameters</code> encapsulate all <code>RequestParameter</code> objects filtered by location. For example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/awesomePath&quot;</span>)</span><br><span class="line">  .handler(superAwesomeValidationHandler)</span><br><span class="line">  .handler(routingContext -&gt; &#123;</span><br><span class="line">  <span class="type">RequestParameters</span> <span class="variable">params</span> <span class="operator">=</span> routingContext.get(<span class="string">&quot;parsedParameters&quot;</span>);</span><br><span class="line">  <span class="type">RequestParameter</span> <span class="variable">awesomeParameter</span> <span class="operator">=</span> params.queryParameter(<span class="string">&quot;awesomeParameter&quot;</span>);</span><br><span class="line">  <span class="type">Integer</span> <span class="variable">awesome</span> <span class="operator">=</span> awesomeParameter.getInteger();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Arrays-objects-and-serialization-styles">Arrays, objects and serialization styles</h2>
<p>User can declare arrays and objects as parameters. The <code>ObjectTypeValidator</code>/<code>ArrayTypeValidator</code> provides the deserialization from string, the validation of objects fields/array items with “nested” validators and the encapsulation inside map/list. For example, you can declare a query parameter as comma separated array of integers like this one: <code>?q=1,2,3,4,5</code> and you will receive as result a <code>List&lt;Integer&gt;</code>.</p>
<p>The serialization methods are implemented as subclasses of <code>ContainerDeserializer</code> and there are some prebuilt instances in enum <code>ContainerSerializationStyle</code>. Of course, user can use static methods inside <code>ObjectTypeValidator.ObjectTypeValidatorFactory</code> and <code>ArrayTypeValidator.ArrayTypeValidatorFactory</code> to build this validators, define its serialization style and add the “nested” validators.</p>
<h2 id="HTTPRequestValidationHandler"><code>HTTPRequestValidationHandler</code></h2>
<p>To start validate the requests, developers can use the <code>HTTPRequestValidationHandler</code>. This class exposes methods to add validators without care about <code>ParameterValidationRule</code>, because they are automatically generated. For every parameter location <code>HTTPRequestValidationHandler</code> exposes three methods:</p>
<ul>
<li><code>add*Param</code>: to add a parameter with type taken from <code>ParameterType</code> enum</li>
<li><code>add*ParamWithPattern</code>: to add a string parameter with a pattern</li>
<li><code>add*ParamWithCustomTypeValidator</code>: to add a parameter with an instance of <code>ParameterTypeValidator</code></li>
</ul>
<p>Then there are methods for body, like <code>addJsonBodySchema</code> or <code>addMultipartRequiredFile</code></p>
<p>Next time I’m going to introduce you the OAS 3 Router Factory, stay tuned!</p>
]]></content>
      <tags>
        <tag>web development</tag>
        <tag>gsoc 2017</tag>
        <tag>gsoc</tag>
        <tag>vertx</tag>
        <tag>vertx web</tag>
        <tag>http validation</tag>
      </tags>
  </entry>
  <entry>
    <title>My GSoC 2017 - OpenAPI 3 Vert.x support</title>
    <url>/My-GSoC-2017-OAS3-Router-Factory/</url>
    <content><![CDATA[<p>The support to OpenAPI 3 it’s located in maven package <code>vertx-web-api-contract-openapi</code>, and most classes extends/subclass from interfaces/classes inside maven package <code>vertx-web-api-contract-common</code> (the package designed to contain all API Specs standards common classes). Most important interfaces of <code>vertx-web-api-contract-openapi</code> are:</p>
<ul>
<li>The <code>OpenAPI3ValidationHandler</code> class that fills <a href="https://slinkydeveloper.github.io/articles/My-GSoC-2017-Validation/#structure-of-validation-framework"><code>BaseValidationHandler</code> maps</a></li>
<li>The <code>OpenAPI3RouterFactory</code>, the interface that enable users create a router with your API spec</li>
</ul>
<p>As I said in a <a href="https://slinkydeveloper.github.io/articles/Whats-New-In-OAS3-Parameters/">previous blog post</a>, OpenAPI 3 added a lot of new things, in particular about serialization styles and complex form bodies (url encoded and multipart). So when I started working on OpenAPI 3 requests validations, I had to add a lot of things to validation framework that I haven’t expected before.</p>
<h2 id="The-validation-handler">The validation handler</h2>
<p><code>OpenAPI3ValidationHandler</code> is an interface extension of <code>HTTPOperationRequestValidationHandler</code> (located inside <code>vertx-web-api-contract-common</code>), that is an interface extension of <code>ValidationHandler</code>. This class contains all methods to elaborate the <code>Operation</code> object (Java representation of <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#operationObject">OAS3 operation object</a>) and the list of <code>Parameter</code> objects (Java representation of <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#parameterObject">OAS3 parameter object</a>).</p>
<p>When constructed, it generates all <code>ParameterValidationRule</code> and <code>ParameterTypeValidator</code> it needs: in fact, <strong>It doesn’t elaborate the api spec nor work with api spec Java models during the validation</strong>. It does everything when It’s constructed, so It iterates through various parameters and It generates objects needed for validation.</p>
<p class="image-pull-right">
<img src="/images/messy_code_fry.jpg" alt="">
</p>
If you read this class, It seems messy, because It's messy <span class="emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">&#x1f604;</span>. This is because of complexity of OAS 3, that forced me to write some little tricks to support all things (like for example to manage the `deepObject` serialization style).
<p>To give a quick explanation of how this class elaborates parameters:</p>
<ol>
<li>It checks if it’s supported (parameters with <code>allowReserved: true</code> are not supported)</li>
<li>It checks if the parameter needs a <em>workaround</em> to get validation working and applies the specific <em>workaround</em></li>
<li>If none workaround is needed, it constructs the correct type validator</li>
</ol>
<p>Behind the scenes all the validation work is done by <a href="https://slinkydeveloper.github.io/articles/My-GSoC-2017-Validation/">validation framework</a></p>
<h2 id="The-router-factory">The router factory</h2>
<p>The router factory is intended to give the most simple user interface to generate a router based on an API Spec. In fact, it provides this functionalities:</p>
<ul>
<li>Async loading of specification and its schema dependencies</li>
<li>OpenAPI 3 compliant API specification validation (thanks to <a href="https://github.com/RepreZen/KaiZen-OpenApi-Parser">Kaizen-OpenApi-Parser</a>)</li>
<li>Load handlers and failure handlers with operationId</li>
<li>Automatic 501 (Not implemented) response for operations with missing handlers (can be enabled/disabled with <code>mountOperationsWithoutHandlers(boolean)</code>)</li>
<li>Automatic <code>ValidationException</code> failure handler (can be enabled/disabled with <code>enableValidationFailureHandler()</code> and manually configured with <code>setValidationFailureHandler()</code>)</li>
<li>Path’s regular expression generation (to support <code>matrix</code> and <code>label</code> style unsupported natively from Vert.x)</li>
<li>Lazy methods: the generation of the <code>Router</code> is done only when you call <code>getRouter()</code></li>
<li>Automatic mount of security validation handlers</li>
</ul>
<h3 id="Lazy-methods">Lazy methods</h3>
<p>It’s usual to run into problems regards route declaration order. For example if you declare two routes in this order:</p>
<ol>
<li><code>GET /hello/&#123;parameter&#125;</code></li>
<li><code>GET /hello/world</code></li>
</ol>
<p>With actual Vert.x <code>Router</code> implementation, <code>/hello/world</code> handler will never called, unless you explicitly call <code>RoutingContext#next()</code> inside <code>/hello/&#123;parameter&#125;</code> handler (that causes <code>Router</code> to run the next route matching the pattern). With lazy methods It’s guaranteed that routes will be loaded with order declared inside API specification.</p>
<p>I choose lazy methods also for code style reasons, It helps a lot to manage the code of router factory.</p>
<h2 id="And-the-final-result">And the final result</h2>
<p>With this tools, user can bring OpenAPI 3 power to its Vert.x server implementation as simple as:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OpenAPI3RouterFactory.createRouterFactoryFromFile(<span class="built_in">this</span>.vertx, <span class="string">&quot;src/main/resources/petstore.yaml&quot;</span>, ar -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (ar.succeeded()) &#123;</span><br><span class="line">                <span class="comment">// Spec loaded with success</span></span><br><span class="line">                <span class="type">OpenAPI3RouterFactory</span> <span class="variable">routerFactory</span> <span class="operator">=</span> ar.result();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// Add some handlers</span></span><br><span class="line">                routerFactory.addHandlerByOperationId(<span class="string">&quot;listPets&quot;</span>, routingContext -&gt; &#123;</span><br><span class="line">                    <span class="type">RequestParameters</span> <span class="variable">params</span> <span class="operator">=</span> routingContext.get(<span class="string">&quot;parsedParameters&quot;</span>);</span><br><span class="line">                    <span class="comment">// Handle listPets operation</span></span><br><span class="line">                &#125;);</span><br><span class="line">                routerFactory.addFailureHandlerByOperationId(<span class="string">&quot;listPets&quot;</span>, routingContext -&gt; &#123;</span><br><span class="line">                    <span class="type">Throwable</span> <span class="variable">failure</span> <span class="operator">=</span> routingContext.failure();</span><br><span class="line">                    <span class="comment">// Something really bad happened during listPets handling</span></span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Add a security handler</span></span><br><span class="line">                routerFactory.addSecurityHandler(<span class="string">&quot;api_key&quot;</span>, routingContext -&gt; &#123;</span><br><span class="line">                    <span class="comment">// Handle security here and then call next()</span></span><br><span class="line">                    routingContext.next();</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Now you have to generate the router</span></span><br><span class="line">                <span class="type">Router</span> <span class="variable">router</span> <span class="operator">=</span> routerFactory.getRouter();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Now you can use your Router instance</span></span><br><span class="line">                <span class="type">HttpServer</span> <span class="variable">server</span> <span class="operator">=</span> vertx.createHttpServer(<span class="keyword">new</span> <span class="title class_">HttpServerOptions</span>().setPort(<span class="number">8080</span>).setHost(<span class="string">&quot;localhost&quot;</span>));</span><br><span class="line">                server.requestHandler(router::accept).listen();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Something went wrong during router factory initialization</span></span><br><span class="line">                <span class="type">Throwable</span> <span class="variable">exception</span> <span class="operator">=</span> ar.cause();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>Next time I’m going to introduce you <code>slush-vertx</code>, a new generator for Vert.x project. Stay tuned!</p>
]]></content>
      <tags>
        <tag>openapi</tag>
        <tag>web development</tag>
        <tag>openapi3</tag>
        <tag>gsoc 2017</tag>
        <tag>gsoc</tag>
        <tag>vertx</tag>
        <tag>vertx web</tag>
        <tag>router factory</tag>
        <tag>factory</tag>
      </tags>
  </entry>
  <entry>
    <title>My GSoC 2017 - Slush-vertx</title>
    <url>/My-GSoC-2017-Slush-Vertx/</url>
    <content><![CDATA[<p><a href="https://github.com/pmlopes/slush-vertx"><code>slush-vertx</code></a> is a project created by <a href="https://www.jetdrone.xyz">Paulo Lopes</a> born to simplify build tools configurations for Vert.x. I totally refactored <code>slush-vertx</code> to create a multi purpose code generator for simplify various configurations of Vert.x powered projects.</p>
<h2 id="Multi-purpose-and-simple-to-enlarge">Multi purpose and simple to enlarge</h2>
<p>When I designed the new slush-vertx, I tried to create a Vert.x project generator for every configuration needed, not only an OpenAPI 3 server or OpenAPI 3 client. Another important variable of my project is create a generator that generates code for different languages and different build tools.</p>
<p>Now <code>slush-vertx</code> It’s like a <em>“code generation hub”</em>: It contains a set of project generators, based on what type of Vert.x project are you going to scaffold. At the moment I’m writing this post, slush-vertx contains:</p>
<ul>
<li>Vert.x Starter project generator: Based on original Paulo’s project, generates an empty project configured for Vert.x 3 Framework</li>
<li>Vert.x Web Server Starter generator: Generates a skeleton with sources and tests for Vert.x 3 Web powered REST server</li>
<li>Vert.x Web Server OpenAPI project generator: Generates a skeleton based on Swagger 2/OpenAPI 3 specification with sources and tests for Vert.x 3 Web powered REST server</li>
<li>Vert.x Web Client OpenAPI project generator: Generates a client based on a Swagger 2/OpenAPI 3 specification and Vert.x 3 Web Client</li>
</ul>
<p>I hope it will grow in  the future, creating a tool that can help people to connect with Vert.x world.</p>
<h2 id="How-it-works">How it works</h2>
<script type="text/javascript" src="https://asciinema.org/a/134050.js" id="asciicast-134050" async></script>
<h2 id="Behind-the-scenes">Behind the scenes</h2>
<p>slush-vertx is metadata and template driven code generator. This means:</p>
<ul>
<li>For every language/build tool it has a set of metadata, that can be extended with user inputs</li>
<li>It uses a template engine to generate code, based on metadata</li>
</ul>
<p>If you want a complete scenario of behaviours of slush-vertx, give a look at <a href="https://github.com/pmlopes/slush-vertx/wiki/Slush-Vert.x-Structure">this wiki page</a></p>
<p>But, why that complexity behind a code generator? I mean, It’s only a code generator! Yes, It’s only a code generator, but I wanted to create a tool simple to extend with new generators routines, giving to Eclipse Vert.x a powerful tool.</p>
<h2 id="Generate-unit-tests">Generate unit tests</h2>
<p>So, if you have a powerful build tool that generates pretty everything you want, why don’t take advantage of it doing things that you don’t want to do? And this is what I’ve done! Copy-pasting code from other generators I’ve created, I builded <a href="https://github.com/pmlopes/slush-vertx/tree/master/src/generators/vertx_web_unit_test_generator">a unit test generator for <code>vertx-web-api-contract-openapi</code></a>. This generator takes all operations declared in <a href="https://github.com/pmlopes/slush-vertx/blob/master/src/generators/vertx_web_unit_test_generator/openapi.yaml">this oas 3 spec</a> and generates a specific test to validate the correct parsing of parameters on server side. This is the final result: <a href="https://github.com/slinkydeveloper/vertx-web/blob/designdriven/vertx-web-api-contract/vertx-web-api-contract-openapi/src/test/java/io/vertx/ext/web/designdriven/openapi3/OpenAPI3ParametersUnitTest.java"><code>OpenAPI3ParametersUnitTest.java</code></a>. This unit tests helped me a lot to complete the <code>vertx-web-api-contract-openapi</code> module.</p>
<p>With some small changes this can be a complete server libraries/frameworks compatibility test tool for OpenAPI 3</p>
<h2 id="And-now">And now?</h2>
<p>Now use it! Follow the <a href="https://github.com/pmlopes/slush-vertx">readme inside GitHub repository</a> to install and start using it.</p>
<p>You can also <a href="https://github.com/pmlopes/slush-vertx/wiki/How-to-contribute">contribute</a> to this project <a href="https://github.com/pmlopes/slush-vertx/wiki/Create-a-new-generator">adding new generators</a> and <a href="https://github.com/pmlopes/slush-vertx/wiki/Add-new-language-to-existing-generatorhttps://github.com/pmlopes/slush-vertx/wiki/Add-new-language-to-existing-generator">updating existing ones with new languages</a></p>
]]></content>
      <tags>
        <tag>openapi</tag>
        <tag>web development</tag>
        <tag>openapi3</tag>
        <tag>gsoc 2017</tag>
        <tag>gsoc</tag>
        <tag>vertx</tag>
        <tag>vertx web</tag>
        <tag>generator</tag>
        <tag>slush-vertx</tag>
      </tags>
  </entry>
  <entry>
    <title>Tree vs SkipList routing</title>
    <url>/Routing-Tree-vs-SkipList/</url>
    <content><![CDATA[<p>One of the most important features of web frameworks is performance and the routing process can become an important performance killer. I’m going to introduce you a comparison between the list (in particular the skip list) and the tree as data structure for web framework’s routers.</p>
<h2 id="Why-this-article">Why this article</h2>
<p>Routing consists in calling the correct handler for the URL that user requested. Sometimes this can be a simple and fast process, but in modern scenarios most times this process slows your application, in particular when:</p>
<ul>
<li>You have a huge list of routes</li>
<li>You rely on path parameters (sometimes 2 or more path parameters in the same route)</li>
<li>You want to run multiple handlers for every URL segment</li>
</ul>
<p>I’m writing this article because <a href="https://github.com/vert-x3/vertx-web/issues/678">I want to implement a tree router inside Vert.x Web framework</a>, so I’m investigating around to find what the best solution would be.</p>
<h2 id="List-routing-vs-Tree-routing">List routing vs Tree routing</h2>
<p>A <strong>Route</strong> is a combination of HTTP method and path. The path can be a simple constant path or a path with one or more parameters, managed via regular expressions.</p>
<p>The <strong>list routing</strong> uses a list to contain all defined routes (in a precise order). When the server receives a request, the router iterates through the list and searches for the routes that match with the received request. This process <strong>cannot be</strong> a simple list search, because a request can match multiple times. For example: if we have a router that declares</p>
<ul>
<li><code>GET &quot;/&quot;</code></li>
<li><code>GET &quot;/users&quot;</code></li>
<li><code>GET &quot;/users/userA&quot;</code></li>
</ul>
<p>and we receive <code>/users/userA</code> as request, the router has to run all the handlers of these three routes.</p>
<p>The <strong>tree routing</strong> differs from list routing for one simple thing: the routes are inside a tree. So when the router receives the request, it follows the tree searching for matching routes</p>
<p>When you think about a website (or, in the same situation, a web API) you think about a tree of web pages (operations) you can retrieve (perform). But most of the web frameworks don’t implement the routing as a tree of resources, for multiple reasons:</p>
<ul>
<li>It’s difficult to build a routing codebase around a concurrent tree preserving good performances</li>
<li>Does the user manually build the routing tree or is the insertion a task for the algorithm? And how can we manage the regular expressions inside this insertion algorithm?</li>
<li>Modern lists (for example the SkipList) are really powerful and <a href="https://en.wikipedia.org/wiki/Skip_list">can obtain performances similar to trees</a> mantaining the routing codebase simple</li>
</ul>
<p>But, not considering these problems, the tree seems a better solution for this problem, right? This is the starting thesis, now I need to prove it.</p>
<p>Before starting, I want to underline that some frameworks have succesfully implemented the tree routing, for example <a href="https://github.com/fastify/fastify">Fastify</a>, achieving really interesting <a href="https://github.com/fastify/fastify#benchmarks">performances</a></p>
<h2 id="Reproduce-the-two-types-of-routers">Reproduce the two types of routers</h2>
<p>The first step is creating the sketches of these two routing mechanisms. I’ve tried to create the list routing similar to Vert.x Web router, but of course these are only <strong>simplified examples</strong>. The router of a web framework is more complex than my 50 lines of code. The list router is implemented inside class <a href="https://github.com/slinkydeveloper/tree-list-routing-java-bench/blob/master/src/main/java/io/slinkydeveloper/bench/ListRouter.java"><code>ListRouter</code></a> and tree router is implemented inside class <a href="https://github.com/slinkydeveloper/tree-list-routing-java-bench/blob/master/src/main/java/io/slinkydeveloper/bench/TreeRouter.java"><code>TreeRouter</code></a>.</p>
<p>The list router has a simple loop that calls for every route the function <code>route()</code>; when this function returns true, the route matches perfectly and the routing process stops. Remember that when I check if route <em>matches</em> (both in tree and list scenario) the router:</p>
<ol>
<li>first checks if the path matches partially (in case of regexes it calls <code>lookingAt()</code> method, while in string paths it calls the method <code>startsWith()</code>)</li>
<li>Then it checks if the path matches totally (methods <code>matches()</code> and <code>equals()</code>). If the path matches totally, the routing stops</li>
</ol>
<p>The tree routing is a simple recursive function that works as follow:</p>
<ul>
<li>Base case: The path chunk is empty so we have finished the routing succesfully</li>
<li>If not base case: We try to match <strong>partially</strong> first the constant paths and then the regular expressions. If we found a match, we go deeper with recursion</li>
<li>If we don’t find any match the requested route doesn’t exist and the routing process stops</li>
</ul>
<p>We test against path chunks for a simple reason: when we go deeper with recursion we don’t need to test against previous path components (and we don’t need to re-extract the parameters), so the router simply removes it from the requested URL. And of course when the string is empty we have finished the routing. To gain good performances inside tree nodes I used the skip lists (I know I’ve cheated) to contain associated routes.</p>
<p>This is only a way to implement the tree routing and also remember that I haven’t written the insertion algorithm for the tree router, so I do all association between nodes manually.</p>
<h2 id="Two-common-API-scenarios">Two common API scenarios</h2>
<p>I’ve created two benchmarks: an example of ecommerce API and a social network API. This examples are really similar, they only differ in number of routes and how many regular expression are contained in said routes. Below you can see how this “fake” routers are composed.</p>
<figure>
  <a href="/images/tree-vs-router/ecommerce-tree.png" class="image-popup"><img src="/images/tree-vs-router/ecommerce-tree.png" alt="image"></a>
  <figcaption>Router created for ECommerceBenchmark</figcaption>
</figure>
<figure>
  <a href="/images/tree-vs-router/social-tree.png" class="image-popup"><img src="/images/tree-vs-router/social-tree.png" alt="image"></a>
  <figcaption>Router created for SocialNetworkBenchmark</figcaption>
</figure>
<h2 id="Maybe-Skip-List-is-better">Maybe Skip List is better?</h2>
<p>The first benchmarks I wrote are simple accesses to routes. I wrote one benchmark for every route (that I store in <code>compatiblePaths</code>) and every data structure. Below you can find results of <a href="https://github.com/slinkydeveloper/tree-list-routing-java-bench/blob/master/src/main/java/io/slinkydeveloper/bench/ECommerceBenchmark.java"><code>ECommerceBenchmark</code></a>:</p>
<figure>
  <a href="/images/tree-vs-router/basic_complex.png" class="image-popup"><img src="/images/tree-vs-router/basic_complex.png" alt="image"></a>
  <figcaption>Benchmark results for ECommerceBenchmark based on requested URLs</figcaption>
</figure>
<p>The first observation is that the constant paths in skip list are faster than in the tree router. This is caused by skip list optimization: when we get the same elements multiple times the skip list optimizes its links to access more quickly to its values. But the performances for skip lists falls in favor of tree when we use regular expressions, because of course we give a smaller string to the regular expression engine. With the <code>/health</code> path we have a little difference because in tree we are at the first level, while in <code>/user/newUser</code> we are one level deeper than <code>/health</code>. This results are confirmed by the <a href="https://github.com/slinkydeveloper/tree-list-routing-java-bench/blob/master/src/main/java/io/slinkydeveloper/bench/SocialNetworkBenchmark.java"><code>SocialNetworkBenchmark</code></a> with the same configuration:</p>
<figure>
  <a href="/images/tree-vs-router/basic_social.png" class="image-popup"><img src="/images/tree-vs-router/basic_social.png" alt="image"></a>
  <figcaption>Benchmark results for SocialNetworkBenchmark based on requested URLs</figcaption>
</figure>
<p>So maybe skip lists are so fast that trees are not competitive in this application field? I’ve done two considerations:</p>
<ol>
<li>In a real case situation a router doesn’t receive <strong>12.000.000 same requests</strong> in one second, but maybe if it receives 1.000 same requests (for example the <code>/feed</code> request) the skip list optimization helps a lot</li>
<li>My tree implementation is rude compared to JDK’s <code>ConcurrentSkipListSet</code></li>
</ol>
<h2 id="And-if-I-add-some-spice">And if I add some spice?</h2>
<p>To confuse the skip list I’ve created a more <em>real</em> scenario: The benchmark function does 10 random requests and then the request assigned. This process complicates things a bit for the skip list, because it loses the optimization:</p>
<figure>
  <a href="/images/tree-vs-router/with_load_complex.png" class="image-popup"><img src="/images/tree-vs-router/with_load_complex.png" alt="image"></a>
  <figcaption>Benchmark results for ECommerceBenchmark based on requested URLs with 10 random requests</figcaption>
</figure>
<p>And of course it’s a win for the tree. The fun fact is that tree defeats the skip list also in first paths.</p>
<p>For the social benchmark the random function that chooses the 10 requests is little bit hacky: Some paths (for example the <code>/feed</code>) have more chances than other ones. But the results remain the same:</p>
<figure>
  <a href="/images/tree-vs-router/with_load_social.png" class="image-popup"><img src="/images/tree-vs-router/with_load_social.png" alt="image"></a>
  <figcaption>Benchmark results for SocialNetworkBenchmark based on requested URLs with 10 random requests</figcaption>
</figure>
<p>The results on <code>SocialNetworkBenchmark</code> are impressive because with some paths we have 3x or more performances for tree router, but we have an unstable situation at the same level.</p>
<p>There’s also an important consideration to do: When we go deeper, tree performances slope down, so to write a good tree router we need a good combination of access optimizations and insertion algorithm that avoids creating uselessly deep nodes.</p>
<p>You can find below the final results with and without load (“with load” values conveniently scaled x11):</p>
<figure>
  <a href="/images/tree-vs-router/complex_complete.png" class="image-popup"><img src="/images/tree-vs-router/complex_complete.png" alt="image"></a>
  <figcaption>Final benchmark results for ECommerceBenchmark</figcaption>
</figure>
<figure>
  <a href="/images/tree-vs-router/social_complete.png" class="image-popup"><img src="/images/tree-vs-router/social_complete.png" alt="image"></a>
  <figcaption>Final benchmark results for SocialNetworkBenchmark</figcaption>
</figure>
<h2 id="And-it’s-not-finished">And it’s not finished!</h2>
<p>For the two test cases and data structures I also wrote a <em>final benchmark</em> that accesses to <code>compatiblePaths</code> sequentially and in both cases it’s a huge win for tree:</p>
<figure class="half">
	<a href="/images/tree-vs-router/complex_average.png" class="image-popup"><img src="/images/tree-vs-router/complex_average.png" alt="image"></a>
	<a href="/images/tree-vs-router/social_average.png" class="image-popup"><img src="/images/tree-vs-router/social_average.png" alt="image"></a>
	<figcaption>Final results (left e-commerce benchmark, right social benchmark)</figcaption>
</figure>
<p>But this is not a very realistic situation, because usually we have a situation like the social network benchmark with load: we have more frequent requests and less frequent requests, but it’s unusual to get requests ordered in the router order sequentially.</p>
<h2 id="So-what’s-better">So, what’s better?</h2>
<p>That’s an hard question, because these examples don’t prove a lot. But, according to this data, it makes sense to start developing a tree router because we have good preconditions. In some situations with regular expressions we have seen up to 2x performances thanks to the tree router, but it’s important to get good performances also with constant paths (remember that when we have query parameters like <code>/user?q=blabla</code> these URLs are splitted at the start of routing and the router treats this requests like constant paths).</p>
<h2 id="Implementing-a-Tree-Router-challenging-tasks">Implementing a Tree Router: challenging tasks</h2>
<h3 id="Insertion-algorithm">Insertion algorithm</h3>
<p>The insertion algorithm is the most important challange for different reasons:</p>
<ol>
<li>Providing an optimization at every insertion</li>
<li>Splitting constant paths and mostly importantly</li>
<li><strong>Splitting regular expressions</strong></li>
</ol>
<p>The idea of insertion is not splitting for every <code>/</code> (like I’ve done in my examples) but something more like this:</p>
<ol>
<li>At the start we have an empty root node</li>
<li>When I add a route I assign it to the root node</li>
<li>When I add another route I check if it’s a child of the root node or if I can split the root node in two nodes. In the first case I simply add the new route inside the list of childs, in the second case I split the root node creating two child nodes and assigning to the root node the shared first part of path</li>
</ol>
<p>For example:</p>
<table>
<thead>
<tr>
<th>Path inserted</th>
<th>Tree update</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>Empty root node</td>
</tr>
<tr>
<td>/users/{user_id}</td>
<td>Root node with assigned “/users/{user_id}”</td>
</tr>
<tr>
<td>/users/addUser</td>
<td>Root node assigned with “/users/” and with childs “{user_id}” and “addUser”</td>
</tr>
<tr>
<td>/users/addFacebookUser</td>
<td>“addUser” splitted in new node with “add” and childs “User” and “FacebookUser”</td>
</tr>
</tbody>
</table>
<p>The last task in particular is very tricky, because a simple char to char comparison is very limiting and also can generate not working regular expressions. For example: path <code>/([a-b]&#123;0, 9&#125;)</code> and path <code>/([a-z]&#123;0, 9&#125;)</code> cannot be splitted creating a parent node with <code>/([a</code>, because of course this regular expression is invalid. I’ve got some ideas about it:</p>
<ul>
<li>First I check if two routes have the same regular expressions in the middle. For example when we have <code>/users/&#123;user_id&#125;/feed</code> and <code>/users/&#123;user_id&#125;/events</code> we split it into <code>/users/&#123;user_id&#125;/</code> with childs <code>feed</code> and <code>events</code>. This can be done with some regular expressions</li>
<li>If a regular expression is at the end of a path, I split at the last constant <code>/</code> (not inside a group).</li>
<li>If none of the previous, I treat it as first level child</li>
</ul>
<p>To do these things maybe a library that helps “understanding” regular expressions could come in handy.</p>
<h3 id="Mantaining-good-performances-during-routing">Mantaining good performances during routing</h3>
<p>I really don’t have idea how <span class="emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span>. I want to start creating a simple router that does only the minimal routing and then I add conditions necessary to successfully pass the tests. Maybe operating in this way I can avoid creation of useless code.</p>
<h2 id="Conclusions">Conclusions</h2>
<p>Router Tree is possible and can give great performances to Vert.x Web. I cannot wait to start working on it!</p>
<p>Stay tuned!</p>
]]></content>
      <tags>
        <tag>web development</tag>
        <tag>vertx</tag>
        <tag>vertx web</tag>
        <tag>routing</tag>
        <tag>data structures</tag>
        <tag>tree</tag>
        <tag>skiplist</tag>
      </tags>
  </entry>
  <entry>
    <title>Assertions with Vert.x Futures and JUnit5</title>
    <url>/Assertions-With-Vertx-Futures-And-JUnit5/</url>
    <content><![CDATA[<p>During development of <a href="https://github.com/slinkydeveloper/vertx-event-manager">Vert.x event manager library</a> (a blog post about it is coming soon) I wanted to play with new <a href="https://vertx.io/docs/vertx-junit5/java/"><code>vertx-junit5</code></a> library. I like the new async assertion APIs of <code>vertx-junit5</code>, but I feel very unconfortable using <a href="https://vertx.io/docs/apidocs/io/vertx/junit5/VertxTestContext.html#succeeding-io.vertx.core.Handler-"><code>VertxTestContext.succeding(Handler)</code></a> when I need to run sequentially different async tasks. With this method, your code rapidly grows in a big callback hell! Plus the interfaces I wanted to test are all in <code>Future</code>s style more than callback style.</p>
<p>In this post I’m going to explain you two methods I’ve added with a <a href="https://github.com/vert-x3/vertx-junit5/pull/53">PR</a> that simplify tests with <code>Future</code>s</p>
<h2 id="assertComplete-and-assertFailure"><code>assertComplete()</code> and <code>assertFailure()</code></h2>
<p>The PR adds methods:</p>
<ul>
<li><code>Future&lt;T&gt; assertComplete(Future&lt;T&gt; fut)</code></li>
<li><code>Future&lt;T&gt; assertFailure(Future&lt;T&gt; fut)</code></li>
</ul>
<p>These methods take a future as parameter and register to it the handler that asserts the completion/failure of it. They return a <strong>copy</strong> of the future you passed as parameter</p>
<p>For example this callback style assertion:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">methodThatReturnsAFuture().setHandler(testContext.succeding(result -&gt; &#123;</span><br><span class="line">    <span class="comment">// Some assertions</span></span><br><span class="line">    <span class="comment">// Call testContext.complete() or flag a checkpoint</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p>Turns into:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">testContext.assertComplete(methodThatReturnsAFuture()).setHandler(asyncResult-&gt; &#123;</span><br><span class="line">    <span class="comment">// Some assertions. Note that result is in asyncResult.result()</span></span><br><span class="line">    <span class="comment">// Call testContext.complete() or flag a checkpoint</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Nothing revolutionary, right? To appreciate it let’s look at a more real use case</p>
<h2 id="Testing-a-Future-chain">Testing a Future chain</h2>
<p>Let’s say that we want to test an update method of a class that manage some entities in a database. A common flow for this kind of tests is:</p>
<ol>
<li>Use the raw db client to add some data</li>
<li>Use the class instance you want to test to update data on db</li>
<li>Retrieve data from db to test if update is successfull</li>
</ol>
<p>Assuming that both raw db client and entity manager has <em>futurized</em> APIs, without these methods, this test translates in 3 nested callbacks. Now you can simplify it like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">testContext.assertComplete(</span><br><span class="line">  rawClient.create(someData)</span><br><span class="line">    .compose(addedData -&gt; myEntityManager.update(addedData.getId(), stuffToUpdate))</span><br><span class="line">    .compose(updatedData -&gt; rawClient.get(updatedData.getId()))</span><br><span class="line">).setHandler(resultAr -&gt; &#123;</span><br><span class="line">    <span class="comment">// assertComplete guarantees that resultAr is completed</span></span><br><span class="line">    <span class="comment">// Do the assertions you want</span></span><br><span class="line">    testContext.complete();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>With just one <code>assertComplete()</code> we assert that all chain of async operations completes without errors. Then I set an handler that does the final assertions before completing the test</p>
<p>Now, let’s assume that you want to do the same test as before but testing a failure of your method. To do it you need to check every single step of future chain:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">testContext.assertComplete(rawClient.create(someData))</span><br><span class="line">    .compose(addedData -&gt; testContext.assertFailure(myEntityManager.update(addedData.getId(), stuffToUpdate)))</span><br><span class="line">    .recover(failedAr -&gt; &#123;</span><br><span class="line">        <span class="comment">// Do some assertions on failedAr.cause()</span></span><br><span class="line">        <span class="keyword">return</span> testContext.assertComplete(rawClient.get(failedAr.cause().getEntityId()));</span><br><span class="line">    &#125;)</span><br><span class="line">    .setHandler(resultAr -&gt; &#123;</span><br><span class="line">        <span class="comment">// Do the assertions you want</span></span><br><span class="line">        testContext.complete();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Tricks-and-tips">Tricks and tips</h2>
<p>The bad thing of future chains is passing values through the chain. Let’s say that in previous example the exception throwed by <code>update()</code> method doesn’t return an exception that contains a super handy method like <code>getEntityId()</code>. But to get the data from db you need the <code>id</code> of your data instance, so how you can solve it?</p>
<p>You have two ways that really depend on your code style:</p>
<ul>
<li>
<p>If you are a bit more <em>functional</em>, use <a href="https://vertx.io/docs/apidocs/io/vertx/core/CompositeFuture.html#join-io.vertx.core.Future-io.vertx.core.Future-"><code>CompositeFuture.join()</code></a> to transform a tuple of Futures (one of them already completed with the value you want to pass through the chain) to a single Future that encapsulates both the previous async operation result and the new result. This method works only when you are in a chain of completed handlers because when a future inside <code>CompositeFuture.join()</code> fails, the “join future” is not an instance of <code>CompositeFuture</code> and doesn’t return any information about other joined futures. I prefer to avoid this method, but keep it in mind because you can find it useful sometimes.</p>
</li>
<li>
<p>If you don’t care about functional stuff, just use old but gold <code>AtomicReference</code>s:</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicReference&lt;String&gt; entityId = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">testContext.assertComplete(rawClient.create(someData))</span><br><span class="line">    .compose(addedData -&gt; &#123;</span><br><span class="line">        entityId.set(addedData.getId());</span><br><span class="line">        <span class="keyword">return</span> testContext.assertFailure(myEntityManager.update(addedData.getId(), stuffToUpdate))</span><br><span class="line">     &#125;)</span><br><span class="line">    .recover(failedAr -&gt; &#123;</span><br><span class="line">        <span class="comment">// Do some assertions on failedAr.cause()</span></span><br><span class="line">        <span class="keyword">return</span> testContext.assertComplete(rawClient.get(entityId.get()));</span><br><span class="line">    &#125;)</span><br><span class="line">    .setHandler(resultAr -&gt; &#123;</span><br><span class="line">        <span class="comment">// Do the assertions you want</span></span><br><span class="line">        testContext.complete();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>If you have any good tips don’t hesitate to contact me! Happy testing!</p>
]]></content>
      <tags>
        <tag>vertx</tag>
        <tag>development</tag>
        <tag>testing</tag>
        <tag>junit5</tag>
      </tags>
  </entry>
  <entry>
    <title>Routing with Eclipse Collections</title>
    <url>/Routing-With-Eclipse-Collections/</url>
    <content><![CDATA[<p>I found days ago the <a href="https://www.eclipse.org/collections/">Eclipse Collections</a> library (ex Goldman Sachs Collections). Yes, that <strong>Goldman Sachs</strong>, one of the biggest investing banking group of the world, that for hobby creates super fast collection library for Java.</p>
<p>This article follows the previous, when I explored how to improve the routing of <a href="http://vertx.io/docs/vertx-web/java/">Vert.x Web</a>, so please check it out before reading this one: <a href="https://slinkydeveloper.github.io/articles/Routing-Tree-vs-SkipList/">Tree vs SkipList routing</a></p>
<h2 id="What’s-new">What’s new</h2>
<p>Three days ago, looking at my twitter wall, I’ve found a tweet about Eclipse Collections. I’ve found really interesting the performances of EC, so I’ve decided to put it into my benchmark and test it on our use case. I obviously choose the tree as data structure to rewrite the routing process of Vert.x Web, so I have write two variants of my original <code>TreeRouter</code>:</p>
<ul>
<li><code>ECTreeRouter</code>: A tree that internally uses List implementations of Eclipse Collections.</li>
<li><code>ImmutableECTreeRouter</code>: A tree that internally uses <strong>immutable</strong> List implementations of Eclipse Collections. In this case user <strong>can’t change</strong> the routing tree after routing has started.</li>
</ul>
<p>The second option was a pure experiment: user creates the router and its internal tree doesn’t change during the application execution. In this case you have a <em>simpler implementation</em> and an immutable list (in some cases faster than a mutable one). I’ve also refactored only the <code>SocialNetworkBenchmark</code>, because we have similar results on <code>ECommerceBenchmark</code>.</p>
<h2 id="Results">Results</h2>
<p>And, as in the previous articles, here comes the graphs:</p>
<figure>
  <a href="/images/tree-vs-router-2/basic_social.png" class="image-popup"><img src="/images/tree-vs-router-2/basic_social.png" alt="image"></a>
  <figcaption>Benchmark results for SocialNetworkBenchmark based on requested URLs</figcaption>
</figure>
<figure>
  <a href="/images/tree-vs-router-2/with_load_social.png" class="image-popup"><img src="/images/tree-vs-router-2/with_load_social.png" alt="image"></a>
  <figcaption>Benchmark results for SocialNetworkBenchmark based on requested URLs with 10 random requests</figcaption>
</figure>
<figure>
  <a href="/images/tree-vs-router-2/social_complete.png" class="image-popup"><img src="/images/tree-vs-router-2/social_complete.png" alt="image"></a>
  <figcaption>Final benchmark results for SocialNetworkBenchmark ("with load" values properly scaled)</figcaption>
</figure>
<p>And in the end the <em>“final test”</em> graph (now it does only random requests, not sequentially):</p>
<figure>
  <a href="/images/tree-vs-router-2/social_average.png" class="image-popup"><img src="/images/tree-vs-router-2/social_average.png" alt="image"></a>
  <figcaption>Final benchmark results for SocialNetworkBenchmark</figcaption>
</figure>
<p>I have some considerations about these results:</p>
<ul>
<li>Eclipse Collections are fast to iterate, faster than JDK’s collections, so probably they are good for our use case. In particular, pay attention to particular events generated from benchmark data:
<ul>
<li><code>ECTreeRouter</code> is faster than skip list in <code>/feed</code> request in “without load” tests! In particular it creates interesting deltas from <code>TreeRouter</code> when we request constant paths…</li>
<li>But going deeper doesn’t help the <code>ECTreeRouter</code>, in particular in “without load” benchmarks. We have too few datas to assert that at deeper levels <code>ECTreeRouter</code> drops its performances or aligns it with <code>TreeRouter</code></li>
<li><code>ECTreeRouter</code>, without any doubt, in the random requests test is faster than <code>TreeRouter</code></li>
</ul>
</li>
<li>Eclipse Collections contains a lot of optimized iteration patterns optimized, maybe useful for us</li>
<li>It seems that EC thread-safe lists are faster than immutable lists, so the <code>ImmutableECTreeRouter</code> is a failed experiment <span class="emoji" alias="disappointed_relieved" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f625.png?v8">😥</span></li>
</ul>
<p>Unlike the previous post I’m little hesitant to give a verdict, but we have promising results with Eclipse Collections, so I want to start with it. In case we experience “not so good” performances after the implementation, migrate back to JDK’s collections doesn’t appear a complicated task</p>
<p>Stay tuned for other updates!</p>
]]></content>
      <tags>
        <tag>web development</tag>
        <tag>vertx</tag>
        <tag>vertx web</tag>
        <tag>routing</tag>
        <tag>data structures</tag>
        <tag>tree</tag>
        <tag>skiplist</tag>
        <tag>eclipse collections</tag>
        <tag>fast list</tag>
      </tags>
  </entry>
  <entry>
    <title>Debts Manager Tutorial Part 1: Introduction</title>
    <url>/Debts-Manager-Tutorial-Introduction/</url>
    <content><![CDATA[<p>Some months ago I decided to create a complete Vert.x application to show you capabilities of Vert.x for building Web APIs and, at the same time, I wanted to try some patterns I never used or applied. I’m going to create a <em>production ready</em> application to finally manage the debts with my house mate with a fully powered Vert.x application!</p>
<p>Some notes before starting: I’m going to make this guide as complete as possible, but keep in mind that this is a side project and It could contain bugs and It could be incomplete. I will try to cover all interesting aspects about API design, implementation, testing and I will show you how I implemented Event Sourcing and CQRS. I don’t plan to write a frontend for it (I don’t want to hurt your eyes), but if you want to help me I’m glad to accept it!</p>
<p>The code is already available on <a href="https://github.com/slinkydeveloper/debts-manager">GitHub</a> but It could change while I’m writing the guide.</p>
<h2 id="What-Debts-Manager-should-do">What Debts Manager should do</h2>
<p>The purpose of Debts Manager is to manage the debts between two users of the service. The idea is similar to <a href="https://www.splitwise.com/">Splitwise</a>, but it will support only bills between two users. Every user should be registered to use the application. Then, if you want to receive bills from another user, you must <strong>connect</strong> to that user. When you are connected, you can bill him creating a transaction. For example:</p>
<ul>
<li>User A registers to the platform</li>
<li>User B registers to the platform</li>
<li>User B allows user A to bill himself. It does connecting to user A</li>
<li>User A bills user B of 5 Euros for last grocery shopping</li>
</ul>
<p>The final result is: user B now has a debt of 5 Euros with user A. Debts Manager will show to both users their status with various debts/credits</p>
<p>The connection between users are unidirectional, which means that if users want to bill each other they must create two diffent connections. There is no group concept, I wanted to keep things as simple as possible.</p>
<h2 id="Design">Design</h2>
<p>Before going further I want to show you a couple of things of the overall design of the application. These are required to undestand various aspects of the tutorial.</p>
<h3 id="Persistence-Event-Sourcing">Persistence &amp; Event Sourcing</h3>
<p>For persistence I choose PostgreSQL to store my data. The application stores into the database:</p>
<ul>
<li>The users instances (<em>user</em>)</li>
<li>The connections between users (<em>user relationship</em>)</li>
<li>The bills (<em>transaction</em>)</li>
</ul>
<p>The DB access is provided by the blazing fast <a href="https://github.com/reactiverse/reactive-pg-client">reactive-pg-client library</a></p>
<p>The application stores the <em>transactions</em> between users (events). You can use it as a log of various bills, but you also want to look at a summary of various credits/debits between connected users. To build it, I aggregate the various transactions into one single structure that I call <em>status</em>. Every user has a status and is represented as a map with users as keys and total credits/debits as values. This map is built incrementally every time a user adds/modifies/removes a transaction and is stored in a Redis cache.</p>
<h3 id="Web-API">Web API</h3>
<p>The application exposes a Web REST API that you can interact with. It is documented with an OpenAPI 3 file and exposes most of CRUD endpoints for users, user connections and transactions (some are missing to keep things simple). It also has an endpoint to access status of users. The endpoints are protected with JWT tokens, so to use the application you must complete a login request and you get a token to use for the following requests. The Web API is implemented using <a href="https://vertx.io/docs/vertx-web/java/">vertx-web</a>, <a href="https://vertx.io/docs/vertx-web-api-contract/java/">vertx-web-api-contract</a> and <a href="https://vertx.io/docs/vertx-web-api-service/java/">vertx-web-api-service</a>.</p>
<h3 id="Testing">Testing</h3>
<p>Okay I admit it, I’m lazy <span class="emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span> I tested only the minimum features! I built these tests primarly to show you how I faced and solved common async test problems. I used Junit5 together with <a href="https://vertx.io/docs/vertx-junit5/java/">vertx-junit5</a> and <a href="https://www.testcontainers.org/">testcontainers</a> to spin up Redis and PostgreSQL.</p>
<h2 id="Tutorial-parts">Tutorial parts</h2>
<ol>
<li><strong><a href="/Debts-Manager-Tutorial-Contract-Design/" title="Contract design">Contract design</a></strong>: Design the OpenAPI 3 contract</li>
<li><strong><a href="/Debts-Manager-Tutorial-Vert-x-Web-API-Contract-Service/" title="Vert.x Web API Contract &amp; Service">Vert.x Web API Contract &amp; Service</a></strong>: Setup Vert.x project and bind Vert.x Event Bus services</li>
<li><strong>Persistence</strong>: Design and implement persistence</li>
<li><strong>Event Sourcing</strong>: Develop the read model and CQRS</li>
<li><strong>Implement services logic</strong>: Implement the services</li>
<li><strong>Testing</strong>: Spin up test containers and write clean assertions</li>
<li><strong>BONUS: Deploy to OpenShift</strong></li>
<li><strong>BONUS: Refactor to microservices using Vert.x Event Bus</strong></li>
</ol>
<p>Stay tuned for next chapter! And give me feedback about this tutorial!</p>
]]></content>
      <tags>
        <tag>openapi</tag>
        <tag>vertx</tag>
        <tag>development</tag>
        <tag>web</tag>
        <tag>web api contract</tag>
        <tag>openapi 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Debts Manager Tutorial Part 2: Contract Design</title>
    <url>/Debts-Manager-Tutorial-Contract-Design/</url>
    <content><![CDATA[<p>Hi guys! Welcome back to this tutorial!</p>
<p>In this second chapter of Debts Manager Tutorial I would like to show you how I have designed the REST API of Debts Manager. I’m going to follow the <em>API First</em> approach, documenting all aspects of the API Design with OpenAPI 3.</p>
<p>This post doesn’t aim to provide you a full guide of how to design REST APIs: if you want more resources to learn it, <a href="#Some-resources-to-learn-Web-API-Design-and-OpenAPI">look at the end of this post</a></p>
<h2 id="Analysis">Analysis</h2>
<p>The REST APIs, in contrast with RPC, are driven by the data the services wants to expose. In the previous chapter I gave you an idea of the entities we must expose. Now I tabulate these and the relative operations on it.</p>
<table>
<thead>
<tr>
<th>Entity</th>
<th>Create</th>
<th>Retrieve</th>
<th>Update</th>
<th>Delete</th>
</tr>
</thead>
<tbody>
<tr>
<td>User</td>
<td><span class="emoji" alias="heavy_check_mark" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8">✔</span></td>
<td><span class="emoji" alias="heavy_check_mark" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8">✔</span></td>
<td><span class="emoji" alias="x" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">❌</span></td>
<td><span class="emoji" alias="x" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">❌</span></td>
</tr>
<tr>
<td>User relationship</td>
<td><span class="emoji" alias="heavy_check_mark" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8">✔</span></td>
<td><span class="emoji" alias="heavy_check_mark" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8">✔</span></td>
<td><span class="emoji" alias="x" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">❌</span></td>
<td><span class="emoji" alias="x" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">❌</span></td>
</tr>
<tr>
<td>Transaction</td>
<td><span class="emoji" alias="heavy_check_mark" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8">✔</span></td>
<td><span class="emoji" alias="heavy_check_mark" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8">✔</span></td>
<td><span class="emoji" alias="heavy_check_mark" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8">✔</span></td>
<td><span class="emoji" alias="heavy_check_mark" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8">✔</span></td>
</tr>
<tr>
<td>Status</td>
<td><span class="emoji" alias="x" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">❌</span></td>
<td><span class="emoji" alias="heavy_check_mark" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8">✔</span></td>
<td><span class="emoji" alias="x" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">❌</span></td>
<td><span class="emoji" alias="x" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">❌</span></td>
</tr>
</tbody>
</table>
<p>This table is a pretty good starting point, but I must refine the analysis enforcing our methods with policies and logics.</p>
<p>These policies are primarly based on <em>who is making the request</em>. I’m going to define a login phase together with JWT to provide authorization and authentication. Each endpoint, except <code>login</code> and <code>register</code>, is secured with a JWT auth. My objective is expose, for each user, only a subset of data relative to the user itself.</p>
<h2 id="Models">Models</h2>
<p>Before defining the endpoints I must formally describe the data models representing the service entities. OpenAPI has its own Json Schema dialect to define models: <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject">OpenAPI Schema</a>. This is an extended subset of <a href="http://json-schema.org/specification-links.html#draft-5">Json Schema Draft 5</a>. Meanwhile I’m writing, there is a proposal to allow usage of every version of Json Schema, including the newer versions, with an extension <a href="https://github.com/OAI/OpenAPI-Specification/issues/1532">https://github.com/OAI/OpenAPI-Specification/issues/1532</a>.</p>
<p>I place these schemas in main OpenAPI file under <code>components</code> and <code>schemas</code> keywords. I can refeer to it using Json schema references (<code>$ref</code> keyword).</p>
<p>The simplest model here is the user. I want to expose only the username, so I represent it with a simple <code>string</code>. This is the definition using OpenAPI Schema:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Username:</span></span><br><span class="line">  <span class="attr">minLength:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure>
<p>The status is represented by a map with users as keys and total debts\credits as values. In OpenAPI Schema:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Status:</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">&#x27;Map with username as keys and debt as value&#x27;</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">  <span class="attr">additionalProperties:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">number</span></span><br></pre></td></tr></table></figure>
<p>In JSON maps are usually represented or as json array of tuples key-value or as a json object. The json object is the natural way to represent it, but it has an important restriction: keys are strings. In my case I need to represent a map string → number, so json object representation fits good. The map values schema are defined using <code>additionalProperties</code> and, only with Json Schema Draft 7 or newer, keys schema are defined using <code>propertyNames</code>.</p>
<p>The main transaction model is described below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Transaction:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">  <span class="attr">properties:</span></span><br><span class="line">    <span class="attr">id:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">from:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Username&#x27;</span></span><br><span class="line">    <span class="attr">to:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Username&#x27;</span></span><br><span class="line">    <span class="attr">at:</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">&quot;Insertion datetime&quot;</span></span><br><span class="line">      <span class="attr">format:</span> <span class="string">date-time</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">value:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">number</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">      <span class="attr">minLength:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">  <span class="attr">required:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">from</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">to</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">id</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">description</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">value</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">at</span></span><br></pre></td></tr></table></figure>
<p><code>$ref</code> keyword points to the <code>Username</code> schema I defined before.</p>
<p>This model doesn’t fit good for my usage, because for each <code>Transaction</code> endpoint I want to apply some policies. A very common example is the <code>id</code> field: when user inserts a new transaction I want to designate the database to fill the <code>id</code> value. When the user creates a new transaction it shouldn’t add the <code>id</code> field: that means that I can’t use the <code>Transaction</code> model to describe the “create transaction” request body. Let’s look at all restrictions I want to apply on various transaction endpoints:</p>
<ul>
<li><code>id</code> and <code>at</code> are filled by the backend when user adds a new transaction and they are immutable from the API perspective</li>
<li>When user updates a transaction he can’t update the <code>from</code> (sender) and <code>to</code> (receiver) fields</li>
<li>When user adds a new transaction he doesn’t need to fill the <code>from</code> field because the backend fills it with the logged user</li>
</ul>
<p>To apply these restrictions I create a new model for each endpoint. I’m going to refactor <code>Transaction</code> into 3 different models: <code>UpdateTransaction</code>, <code>NewTransaction</code> and <code>Transaction</code>.</p>
<p>These new models lead to a new problem: duplication of model fields definitions. Json schema solves the duplication with schema composition keywords: <code>allOf</code>, <code>anyOf</code> and <code>oneOf</code>. In particular I will use <code>allOf</code> to achieve inheritance of schemas.</p>
<p>This is the final result:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">UpdateTransaction:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">  <span class="attr">properties:</span></span><br><span class="line">    <span class="attr">value:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">number</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">      <span class="attr">minLength:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">NewTransaction:</span></span><br><span class="line">  <span class="attr">allOf:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/UpdateTransaction&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">to:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Username&#x27;</span></span><br><span class="line">      <span class="attr">required:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">to</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">description</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">value</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">Transaction:</span></span><br><span class="line">  <span class="attr">allOf:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/NewTransaction&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">required:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">from</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">to</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">id</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">description</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">value</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">at</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">from:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Username&#x27;</span></span><br><span class="line">        <span class="attr">id:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">at:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Insertion datetime&quot;</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">date-time</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure>
<p>The schemas inheritance tree is <code>UpdateTransaction</code>←<code>NewTransaction</code>←<code>Transaction</code></p>
<h2 id="Endpoints">Endpoints</h2>
<p>OpenAPI document structures the endpoint definitions as follow:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/pathA:</span> &#123;&#125;</span><br><span class="line">  <span class="string">/pathB:</span></span><br><span class="line">    <span class="attr">get:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">post:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">put:</span> &#123;&#125;</span><br><span class="line">  <span class="string">/pathC/&#123;paramA&#125;:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>OpenAPI path strings allow path parameters using <code>&#123;paramName&#125;</code> and doesn’t require an explicit definition of query parameters.</p>
<p>In OpenAPI terminology an <strong>operation</strong> is an API endpoint identified by a path and an HTTP method. Every operation could be uniquely identified with an <code>operationId</code>. The OpenAPI Specification (OAS) documents this field as optional, but I strongly suggest to specify it if you don’t want to see your tooling explode. Most code generation tooling asserts that <code>operationId</code> is present. If it’s not present they try to infeer it from path and http method producing unexpected results.</p>
<p>For each operation we are going to define:</p>
<ul>
<li><code>operationId</code></li>
<li><code>parameters</code> (if any): List of <code>header</code>, <code>path</code>, <code>query</code> and <code>cookie</code> parameters</li>
<li><code>requestBody</code> (if any): Content type and content schema of request bodies</li>
<li><code>responses</code>: Status code with response content type and schemas</li>
</ul>
<p>I also fill the <code>security</code> field for each operation to require a JWT token to execute it.</p>
<h3 id="Transactions-and-Status">Transactions and Status</h3>
<p>Let’s start with transaction CRUDs:</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th><code>operationId</code></th>
<th>CRUD</th>
<th>Path</th>
<th>HTTP Method</th>
</tr>
</thead>
<tbody>
<tr>
<td>Create a new transaction</td>
<td><code>createTransaction</code></td>
<td><strong>C</strong>reate</td>
<td><code>/transactions</code></td>
<td>POST</td>
</tr>
<tr>
<td>Get a single transaction</td>
<td><code>getTransaction</code></td>
<td><strong>R</strong>etrieve</td>
<td><code>/transactions/&#123;transactionId&#125;</code></td>
<td>GET</td>
</tr>
<tr>
<td>Get user related transactions</td>
<td><code>getTransactions</code></td>
<td><strong>R</strong>etrieve multiple</td>
<td><code>/transactions</code></td>
<td>GET</td>
</tr>
<tr>
<td>Update a transaction</td>
<td><code>updateTransaction</code></td>
<td><strong>U</strong>pdate</td>
<td><code>/transactions/&#123;transactionId&#125;</code></td>
<td>PUT</td>
</tr>
<tr>
<td>Delete a transaction</td>
<td><code>deleteTransaction</code></td>
<td><strong>D</strong>elete</td>
<td><code>/transactions/&#123;transactionId&#125;</code></td>
<td>DELETE</td>
</tr>
</tbody>
</table>
<p>In OpenAPI:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">/transactions:</span></span><br><span class="line">  <span class="attr">get:</span></span><br><span class="line">    <span class="attr">operationId:</span> <span class="string">getTransactions</span></span><br><span class="line">    <span class="attr">responses:</span></span><br><span class="line">      <span class="attr">&#x27;200&#x27;:</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="attr">application/json:</span></span><br><span class="line">            <span class="attr">schema:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">              <span class="attr">items:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Transaction&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;401&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Expired token&#x27;</span></span><br><span class="line">    <span class="attr">security:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">loggedUserToken:</span> []</span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">operationId:</span> <span class="string">createTransaction</span></span><br><span class="line">    <span class="attr">requestBody:</span></span><br><span class="line">      <span class="attr">content:</span></span><br><span class="line">        <span class="attr">application/json:</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/NewTransaction&#x27;</span></span><br><span class="line">      <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">responses:</span></span><br><span class="line">      <span class="attr">&#x27;201&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Successful response.&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;401&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Expired Token&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;403&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&quot;Trying to create a transaction with receiver not connected to logged user&quot;</span></span><br><span class="line">    <span class="attr">security:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">loggedUserToken:</span> []</span><br><span class="line"><span class="string">&#x27;/transactions/&#123;transactionId&#125;&#x27;</span><span class="string">:</span></span><br><span class="line">  <span class="attr">get:</span></span><br><span class="line">    <span class="attr">operationId:</span> <span class="string">getTransaction</span></span><br><span class="line">    <span class="attr">responses:</span></span><br><span class="line">      <span class="attr">&#x27;200&#x27;:</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="attr">application/json:</span></span><br><span class="line">            <span class="attr">schema:</span></span><br><span class="line">              <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Transaction&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;401&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Expired Token&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;403&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&quot;Trying to get a transaction where `from` or `to` is not the logged user&quot;</span></span><br><span class="line">    <span class="attr">security:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">loggedUserToken:</span> []</span><br><span class="line">  <span class="attr">put:</span></span><br><span class="line">    <span class="attr">operationId:</span> <span class="string">updateTransaction</span></span><br><span class="line">    <span class="attr">requestBody:</span></span><br><span class="line">      <span class="attr">content:</span></span><br><span class="line">        <span class="attr">application/json:</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/UpdateTransaction&#x27;</span></span><br><span class="line">      <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">responses:</span></span><br><span class="line">      <span class="attr">&#x27;202&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Successful response.&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;401&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Expired Token&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;403&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Trying to update a transaction where `from` is not the logged user&#x27;</span></span><br><span class="line">    <span class="attr">security:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">loggedUserToken:</span> []</span><br><span class="line">  <span class="attr">delete:</span></span><br><span class="line">    <span class="attr">operationId:</span> <span class="string">deleteTransaction</span></span><br><span class="line">    <span class="attr">responses:</span></span><br><span class="line">      <span class="attr">&#x27;204&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Successful response.&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;401&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Expired Token &#x27;</span></span><br><span class="line">      <span class="attr">&#x27;403&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Trying to remove a transaction where `from` is not the logged user&#x27;</span></span><br><span class="line">    <span class="attr">security:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">loggedUserToken:</span> []</span><br><span class="line">  <span class="attr">parameters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">transactionId</span></span><br><span class="line">      <span class="attr">in:</span> <span class="string">path</span></span><br><span class="line">      <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">schema:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure>
<p>Note that for all operations under <code>/transactions/&#123;transactionId&#125;</code> path I haven’t redefined every time the parameter <code>transactionId</code>: I have defined once at path level.</p>
<p>Status has only the <em>retrieve</em> operation, but I want to let user customize the output based on transactions insertion datetime: clients can use query parameter <code>till</code> to ask the status till the date time provided, excluding newer transactions. You can use it to throw back in your house mate face that he didn’t pay the bills for a quite long time.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">/status:</span></span><br><span class="line">  <span class="attr">get:</span></span><br><span class="line">    <span class="attr">operationId:</span> <span class="string">getUserStatus</span></span><br><span class="line">    <span class="attr">parameters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">till</span></span><br><span class="line">        <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">schema:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">&#x27;date-time&#x27;</span></span><br><span class="line">    <span class="attr">responses:</span></span><br><span class="line">      <span class="attr">&#x27;200&#x27;:</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="attr">application/json:</span></span><br><span class="line">            <span class="attr">schema:</span></span><br><span class="line">              <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Status&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;401&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Expired token&#x27;</span></span><br><span class="line">    <span class="attr">security:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">loggedUserToken:</span> []</span><br></pre></td></tr></table></figure>
<h3 id="User-and-User-relationships">User and User relationships</h3>
<p>The service supports creation and retrieval of users and user relationships. For simplicity I avoided to include <strong>U</strong> and <strong>D</strong> operations for user and user relationships.</p>
<p>I want to expose an endpoint to retrieve all registered users and an endpoint to retrieve only users that have a relationship with logged user:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">/users:</span></span><br><span class="line">  <span class="attr">get:</span></span><br><span class="line">    <span class="attr">operationId:</span> <span class="string">getUsers</span></span><br><span class="line">    <span class="attr">parameters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">filter</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">        <span class="attr">schema:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">responses:</span></span><br><span class="line">      <span class="attr">&#x27;200&#x27;:</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="attr">application/json:</span></span><br><span class="line">            <span class="attr">schema:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">              <span class="attr">items:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Username&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;401&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Expired token&#x27;</span></span><br><span class="line">    <span class="attr">security:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">loggedUserToken:</span> []</span><br><span class="line"><span class="string">/users/connected:</span></span><br><span class="line">  <span class="attr">get:</span></span><br><span class="line">    <span class="attr">operationId:</span> <span class="string">getConnectedUsers</span></span><br><span class="line">    <span class="attr">responses:</span></span><br><span class="line">      <span class="attr">&#x27;200&#x27;:</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="attr">application/json:</span></span><br><span class="line">            <span class="attr">schema:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">                <span class="attr">allowedTo:</span></span><br><span class="line">                  <span class="attr">description:</span> <span class="string">&quot;Users that logged user can bill&quot;</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">                  <span class="attr">items:</span></span><br><span class="line">                    <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Username&#x27;</span></span><br><span class="line">                <span class="attr">allowedFrom:</span></span><br><span class="line">                  <span class="attr">description:</span> <span class="string">&quot;Users that can bill the logged user&quot;</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">                  <span class="attr">items:</span></span><br><span class="line">                    <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Username&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;401&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Expired token&#x27;</span></span><br><span class="line">    <span class="attr">security:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">loggedUserToken:</span> []</span><br></pre></td></tr></table></figure>
<p>In <code>getUsers</code> we defined a very basic search functionality with the optional query parameter <code>filter</code></p>
<p>In <code>getConnectedUser</code> I prefeered to define the request schema directly inside the request body definition because It’s a schema strictly related to this operation and It isn’t parent of any other schema.</p>
<p>This is the endpoint to create a user connection (user relationship):</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">/users/connected/&#123;userToConnect&#125;:</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">operationId:</span> <span class="string">connectUser</span></span><br><span class="line">    <span class="attr">parameters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">userToConnect</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">in:</span> <span class="string">path</span></span><br><span class="line">        <span class="attr">schema:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Username&#x27;</span></span><br><span class="line">    <span class="attr">responses:</span></span><br><span class="line">      <span class="attr">&#x27;201&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;User connected&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;401&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Expired token&#x27;</span></span><br><span class="line">    <span class="attr">security:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">loggedUserToken:</span> []</span><br></pre></td></tr></table></figure>
<h3 id="Login-registration-and-JWT">Login, registration and JWT</h3>
<p>When an user wants to start using this API he must <strong>authenticate</strong> with his credentials following this process:</p>
<ol>
<li>User calls the <code>/login</code> endpoint passing his credentials in the request body</li>
<li>The backend checks if credentials are correct</li>
<li>The backend writes the response with a JWT token containing the username inside the payload</li>
<li>User stores the received JWT token</li>
</ol>
<p>For each request the server must <strong>authorize</strong> the user. The user must include inside each request the header <code>Authorization: Bearer &lt;jwt token&gt;</code>. When the backend receives the request it checks the signature validity and the token expiration time. If the token is valid It parses the payload, where It can read the username of the logged user.</p>
<p>This is the <code>login</code> operation definition:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">/login:</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">operationId:</span> <span class="string">login</span></span><br><span class="line">    <span class="attr">requestBody:</span></span><br><span class="line">      <span class="attr">content:</span></span><br><span class="line">        <span class="attr">application/json:</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="attr">required:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">username</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">password</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">            <span class="attr">properties:</span></span><br><span class="line">              <span class="attr">username:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Username&#x27;</span></span><br><span class="line">              <span class="attr">password:</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">responses:</span></span><br><span class="line">      <span class="attr">&#x27;200&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Returns the JWT token&#x27;</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="attr">text/plain:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">&#x27;400&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Wrong username or password&#x27;</span></span><br></pre></td></tr></table></figure>
<p>The <code>register</code> operation creates a new user and logins it:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">/register:</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">operationId:</span> <span class="string">register</span></span><br><span class="line">    <span class="attr">requestBody:</span></span><br><span class="line">      <span class="attr">content:</span></span><br><span class="line">        <span class="attr">application/json:</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="attr">required:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">username</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">password</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">            <span class="attr">properties:</span></span><br><span class="line">              <span class="attr">username:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Username&#x27;</span></span><br><span class="line">              <span class="attr">password:</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">responses:</span></span><br><span class="line">      <span class="attr">&#x27;200&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Returns the JWT Token&#x27;</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="attr">text/plain:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">&#x27;400&#x27;:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;Username already exists&#x27;</span></span><br></pre></td></tr></table></figure>
<p>I don’t cover in this tutorial the logout process, but I want to give you a tip: create a whitelist or blacklist of tokens.</p>
<p>As you already saw, each secured operation has the <code>security</code> field:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">loggedUserToken:</span> []</span><br></pre></td></tr></table></figure>
<p>The <code>security</code> field is called <strong>security requirement</strong> and it tells the user that he needs <code>loggedUserToken</code> <strong>security schema</strong> to access to this endpoint. Security schemas must be defined under <code>#/components/securitySchemes</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">securitySchemes:</span></span><br><span class="line">  <span class="attr">loggedUserToken:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">bearer</span></span><br></pre></td></tr></table></figure>
<h2 id="Some-resources-to-learn-Web-API-Design-and-OpenAPI">Some resources to learn Web API Design and OpenAPI</h2>
<p>I give you a couple of useful links:</p>
<ul>
<li><a href="https://www.restapitutorial.com/">Rest API Tutorial</a>: Very simple and coincise tutorial for newbies of REST APIs world</li>
<li><a href="http://apistylebook.com/">API Stylebook</a>: Collection of API styleguides from different IT companies</li>
<li><a href="https://github.com/OAI/OpenAPI-Specification/">OpenAPI Specification repository</a>: Contains the spec and examples</li>
<li><a href="https://apis.guru/browse-apis/">OpenAPI Directory</a>: Collection of OpenAPIs of different public APIs</li>
</ul>
<h2 id="Conclusion">Conclusion</h2>
<p>You can find the complete OpenAPI definition here: <a href="https://github.com/slinkydeveloper/debts-manager/blob/master/src/main/resources/debts_manager_api.yaml">/src/main/resources/debts_manager_api.yaml</a></p>
<p>After you learnt how to design a REST API, approacching to OpenAPI is very simple. The operation definition is very intuitive because of 1:1 mapping with HTTP (methods, parameters, status codes, content types and so on). The tricky and magic part, for me, is definining and organizing the JSON Schemas. When you define simple models, you tend to put everything inside the same file. But when you raise the complexity using composed schemas, you get flooded by smaller and unclear schemas. My suggestion for you is to document the schemas with <code>title</code> and <code>description</code> keywords and organize these in multiple files.</p>
<p>In next chapter I’m going to bootstrap the project and start writing first Vert.x code, stay tuned!</p>
]]></content>
      <tags>
        <tag>openapi</tag>
        <tag>vertx</tag>
        <tag>development</tag>
        <tag>web</tag>
        <tag>web api contract</tag>
        <tag>openapi 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Debts Manager Tutorial Part 3: Vert.x Web API Contract &amp; Service</title>
    <url>/Debts-Manager-Tutorial-Vert-x-Web-API-Contract-Service/</url>
    <content><![CDATA[<p>Today I’m going to bootstrap the project starting from the contract I have already created in the <a href="/Debts-Manager-Tutorial-Contract-Design/" title="previous chapter">previous chapter</a>. The aim of this chapter is to show you Vert.x Web, Vert.x Web API Contract and Vert.x Web API Service. The combination of these three packages provides all functionalities you need to create a REST API. Then I’m going to use <a href="https://vertx-starter.jetdrone.xyz/#maven">pmlopes’ vertx-starter</a> to scaffold the project.</p>
<p>If you are new to Vert.x, before going further I strongly suggest you to read <a href="https://vertx.io/docs/vertx-core/java/">vertx-core documentation</a> and <a href="https://vertx.io/docs/vertx-web/java/">vertx-web documentation</a></p>
<h2 id="Vert-x-Web-API-Contract-and-API-Services">Vert.x Web, API Contract and API Services</h2>
<p><strong>Vert.x Web</strong> is a library built on top of Vert.x to create web applications. It provides high level features like routing, request body handling, authorization, etc. The core concept of Vert.x Web is the <code>Router</code> which an object that can route requests to one or more <code>Route</code>s based on a set of rules like HTTP method, HTTP path, accepted content types, etc. On each <code>Route</code> you can define one or more <code>Handler</code>s that contain the logic to process the request. When a <code>Router</code> receives a request it creates a <code>RoutingContext</code> object which has all methods to read the request, write the response, call the next <code>Handler</code> and fail the context. Each <code>Handler</code> that you register consumes the request’s <code>RoutingContext</code>. Vert.x Web also provides some common handlers like the <code>BodyHandler</code> that parses the request body and the <code>AuthHandler</code> that manages authN/Z of the request</p>
<img src="/images/tutorial-debts-manager/vertx-web-1.png" class="" title="Example architecture using Vert.x Web">
<p><strong>Vert.x Web API Contract</strong> generates a <code>Router</code> starting from an OpenAPI definition. Everything revolves around an object called <code>RouterFactory</code>: you create the contract, you specify to the <code>RouterFactory</code> what are the handlers for the defined operations and it generates the Vert.x Web <code>Router</code> for you. The <code>RouterFactory</code> does some magics behind the hood to provide you a <code>Router</code> that:</p>
<ul>
<li>Parses and validates the incoming requests (all kind of parameters and form or json bodies)</li>
<li>Correctly routes the requests to the right operation handlers by generating the correct <code>Route</code> instances</li>
<li>Has the required security handlers mounted in the right <code>Route</code>s</li>
</ul>
<img src="/images/tutorial-debts-manager/vertx-web-2.png" class="" title="Example architecture using Vert.x Web &amp; Vert.x Web API Contract">
<p><strong>Vert.x Web API Service</strong> is a code generator based on concept of <a href="https://vertx.io/docs/vertx-service-proxy/java/">Vert.x Service Proxy</a>. An <a href="https://vertx.io/docs/vertx-core/java/#event_bus">event bus</a> service is a Java interface that helps you to define in a more natural way an event bus message consumer. This approach leads to different benefits like the straightforward process to test a message consumer like any other Java class. As every EB event consumer, a service can inhabit inside the same verticle or it can be deployed in another application somewhere else in your microservices network. You can use the Vert.x Web API Service in order to mix Contract Driven capabilites provided by Vert.x WAC and these event bus service features.<br>
When you use EB API Services, you don’t put the business logic inside the <code>Route</code> handlers, but you can distribute it inside different services. Then by using Vert.x WAC, you can manage the linking between these services and the <code>Router</code> instance</p>
<img src="/images/tutorial-debts-manager/vertx-web-3.png" class="" title="Example architecture using Vert.x Web &amp; Vert.x Web API Contract &amp; Vert.x Web API Service">
<h2 id="Define-the-API-Services">Define the API Services</h2>
<p>Now I need to define how to group the API Operations defined inside the contract into different API Services. An important thing to keep in mind about API Services is that, <em>with a good design</em>, you can turn each API Service into a microservice in a few minutes. Starting from this assumption, I want to group operations by different subdomains of my API. Debts Manager API handles users, transactions and status, so I’m going to organize operations to create a <em>Users Service</em>, a <em>Transactions Service</em> and a <em>Status Service</em>. Here is the mapping between services and operations:</p>
<table>
<thead>
<tr>
<th>Transactions Service</th>
<th>Users Service</th>
<th>Status Service</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>getTransactions</code> <br> <code>getTransaction</code> <br> <code>createTransaction</code> <br> <code>updateTransaction</code> <br> <code>deleteTransaction</code></td>
<td><code>login</code> <br> <code>register</code> <br> <code>getConnectedUsers</code> <br> <code>connectUser</code> <br> <code>getUsers</code></td>
<td><code>getUserStatus</code></td>
</tr>
</tbody>
</table>
<p>I need to assign an event bus address to each service. The interesting fact is that you can deploy more than one service instance on an address and the event bus will manage the load balancing between these. The event bus address could be any string in any format, although this it makes sense to use a domain like format to identify it. My choice is:</p>
<ul>
<li><code>TransactionService</code> is available at <code>transactions.debts_manager</code></li>
<li><code>UsersService</code> is available at <code>users.debts_manager</code></li>
<li><code>StatusService</code> is available at <code>status.debts_manager</code></li>
</ul>
<h2 id="Specify-the-services-inside-the-spec">Specify the services inside the spec</h2>
<p>In order to make the <code>RouterFactory</code> been able to correcly link the <code>Router</code> to the services, it must know what are the services’ addresses. To define these associations, you have a couple of <a href="https://vertx.io/docs/vertx-web-api-service/java/#_mount_to_router_factory">different methods</a>. I’m going to focus on the configuration based method: inside the OpenAPI document, for each operation, I define the related service event bus address; then just calling <code>mountServicesFromExtensions()</code>, the <code>RouterFactory</code> will inspect the OpenAPI document to find all those associations. E.G. the <code>getTransaction</code> definition now looks like this:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">summary:</span> <span class="string">&#x27;Get a Transaction&#x27;</span></span><br><span class="line"><span class="attr">operationId:</span> <span class="string">getTransaction</span></span><br><span class="line"><span class="attr">responses:</span> <span class="string">...</span></span><br><span class="line"><span class="attr">security:</span> <span class="string">...</span></span><br><span class="line"><span class="attr">x-vertx-event-bus:</span> <span class="string">transactions.debts_manager</span></span><br></pre></td></tr></table></figure>
<p>Look at <a href="https://vertx.io/docs/vertx-web-api-service/java/#_using_the_extension_code_x_vertx_event_bus_code"><code>x-vertx-event-bus</code> documentation</a> for more details.</p>
<h2 id="Bootstrap-the-project">Bootstrap the project</h2>
<p><code>vertx-starter</code> contains a collection of different project templates called presets. I’m going to focus on <em>“OpenAPI Server with Event Bus”</em> preset to scaffold debts manager.</p>
<p>To help the scaffolder generates the right service interfaces, you must define <a href="https://github.com/pmlopes/vertx-starter/blob/master/dist/webdocs/OpenAPI_Server_With_Services.md">the service address - service name mapping</a>. Just a couple of entries inside Debts manager API spec and you are ready to scaffold the project:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">components:</span></span><br><span class="line">  <span class="attr">schemas:</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">securitySchemes:</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">x-vertx-service-gen:</span></span><br><span class="line">    <span class="attr">transactions.debts_manager:</span> <span class="string">TransactionsService</span></span><br><span class="line">    <span class="attr">users.debts_manager:</span> <span class="string">UsersService</span></span><br><span class="line">    <span class="attr">status.debts_manager:</span> <span class="string">StatusService</span></span><br></pre></td></tr></table></figure>
<p>Now open the <a href="https://vertx-starter.jetdrone.xyz/#maven">vertx-starter</a> page and with just a couple of clicks you have a zip with the project scaffolded!</p>
<img src="/images/tutorial-debts-manager/vertx-starter-screenshot.png" class="" title="Vert.x Starter screenshot">
<p>Let’s dig into the generated code:</p>
<img src="/images/tutorial-debts-manager/generated-code-tree.png" class="" title="Vert.x Starter generated code tree">
<p>The scaffolder created for you:</p>
<ul>
<li>The POJOs which represents the API data models</li>
<li>The service interfaces</li>
<li><code>package-info.java</code> files required to trigger Vert.x annotation processing</li>
<li>The stubs of service implementations</li>
<li>The stubs of service tests</li>
<li>The entrypoint of Vert.x application which is called <code>MainVerticle</code></li>
<li>An <code>ApiClient</code> that can be used for testing purposes</li>
<li>The build tool configuration file (<code>pom.xml</code> in my case)</li>
</ul>
<p>As every scaffolder, it is necessary to make some adjustments for the project needs.</p>
<h2 id="Configure-the-project">Configure the project</h2>
<p>I made a couple of changes to adapt the project skeleton to my needs. In particular I configured in my pom:</p>
<ul>
<li><a href="https://logback.qos.ch/">Logback logging</a></li>
<li>Compilation with Java 11 with <code>maven-compiler-plugin</code></li>
<li>JUnit 5 with <code>maven-surefire-plugin</code></li>
<li><a href="https://reactiverse.io/vertx-maven-plugin/"><code>vertx-maven-plugin</code></a> to execute and package my Vert.x application</li>
</ul>
<p>I also substituted the generated <code>openapi.json</code> with my original <code>debts_manager_api.yaml</code> to keep readibility of the spec document. The generated one is a bundled version with all <code>$ref</code>s solved. If you need to bundle again your spec in future, I suggest you to use <a href="http://speccy.io/">Speccy</a> which is a very good tool that can also convert Json Schema to OpenAPI Schema while bundling the spec.</p>
<h3 id="vertx-maven-plugin-and-application-properties"><code>vertx-maven-plugin</code> and application properties</h3>
<p>Vert.x Maven plugin provides a couple of facilities to help you execute and package the Vert.x application. The usage is very simple: you must add it to your build plugins and then you must define the FQCN of the Verticle to run:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vertx.verticle</span>&gt;</span>io.slinkydeveloper.debtsmanager.MainVerticle<span class="tag">&lt;/<span class="name">vertx.verticle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.reactiverse<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vertx-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>vmp<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>initialize<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>package<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">redeploy</span>&gt;</span>true<span class="tag">&lt;/<span class="name">redeploy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">config</span>&gt;</span>test_config.json<span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>test_config.json</code> is a JSON containing application properties like PostgreSQL and Redis connection parameters. Vert.x Core includes this basic support to json configuration files: you can load it into your verticle with Vert.x command line, <code>DeploymentConfig</code> or directly with <code>vertx-maven-plugin</code>. If you want to configure a more complex properties management, there is a package called <a href="https://vertx.io/docs/vertx-config/java">vertx-config</a> that enables you to load HOCON configuration files, load configuration from a remote server, etc.</p>
<h3 id="MainVerticle"><code>MainVerticle</code></h3>
<p>The generated <code>MainVerticle</code> contains two methods:</p>
<ul>
<li><code>startHttpServer()</code> to create the RouterFactory, define the various handlers, generate the <code>Router</code> instance and start the HTTP server</li>
<li><code>startServices()</code> to instantiate and mount the event bus services</li>
</ul>
<p>As I said before, the HTTP Server and the corresponding <code>Router</code> don’t depend on the event bus services, so you can move these two methods into two separate verticles. For simplicity, I’m going to mantain everything inside one verticle. In next chapters, we will spend time into splitting the verticle.</p>
<p>To mount a service to the event bus I use an helper object called <code>ServiceBinder</code> that lookups for the generated message handler and binds the service instance to the event bus:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TransactionsService</span> <span class="variable">transactionsService</span> <span class="operator">=</span> TransactionsService.create(vertx);</span><br><span class="line">serviceBinder</span><br><span class="line">  .setAddress(<span class="string">&quot;transactions.debts_manager&quot;</span>)</span><br><span class="line">  .register(TransactionsService.class, transactionsService);</span><br></pre></td></tr></table></figure>
<p>As I previously said, the <code>RouterFactory</code> can lookup into the OpenAPI document for the associations between services and operations with <code>mountServicesFromExtensions()</code>. This makes the code of <code>startHttpServer()</code> quite simple for the moment:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Future&lt;Void&gt; <span class="title function_">startHttpServer</span><span class="params">()</span> &#123;</span><br><span class="line">  Future&lt;Void&gt; future = Future.future();</span><br><span class="line">  OpenAPI3RouterFactory.create(<span class="built_in">this</span>.vertx, <span class="string">&quot;openapi.yaml&quot;</span>, openAPI3RouterFactoryAsyncResult -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (openAPI3RouterFactoryAsyncResult.succeeded()) &#123;</span><br><span class="line">      <span class="type">OpenAPI3RouterFactory</span> <span class="variable">routerFactory</span> <span class="operator">=</span> openAPI3RouterFactoryAsyncResult.result();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Mount services on event bus based on extensions</span></span><br><span class="line">      routerFactory.mountServicesFromExtensions();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add security handlers</span></span><br><span class="line">      routerFactory.addSecurityHandler(<span class="string">&quot;loggedUserToken&quot;</span>, <span class="keyword">new</span> <span class="title class_">LoggedUserTokenHandler</span>());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Generate the router</span></span><br><span class="line">      <span class="type">Router</span> <span class="variable">router</span> <span class="operator">=</span> routerFactory.getRouter();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Start the HTTP Server and bind Router</span></span><br><span class="line">      server = vertx.createHttpServer(<span class="keyword">new</span> <span class="title class_">HttpServerOptions</span>().setPort(<span class="number">8080</span>).setHost(<span class="string">&quot;localhost&quot;</span>));</span><br><span class="line">      server.requestHandler(router).listen();</span><br><span class="line">      future.complete();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Something went wrong during router factory initialization</span></span><br><span class="line">      future.fail(openAPI3RouterFactoryAsyncResult.cause());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> future;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Configure-JWT-AuthN-Z">Configure JWT AuthN/Z</h3>
<p>Vert.x Web already provides a good support for JWT thanks to <a href="https://vertx.io/docs/vertx-auth-jwt/java/">Vert.x Auth JWT</a>, so I don’t need to write an handler that manages the AuthN/Z.</p>
<p>To get JWT running you need an RSA key pair to sign your tokens. I opted for the <a href="https://tools.ietf.org/html/rfc7517">JWK</a> standard to store it and I generated the key pair and the key store using <a href="https://mkjwk.org/">mkjwk.org</a>.</p>
<p>Vert.x Auth JWT provides <code>JWTAuth</code> auth provider, which is the object that can authenticate, authorize and generate tokens. Vert.x Web has an handler called <code>JWTAuthHandler</code> that uses this auth provider to validate and extract the payload of the token of incoming requests. I modify the <code>start()</code> method of <code>MainVerticle</code> to load the jwk from filesystem and create the <code>JWTAuth</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">loadResource(jwkPath).setHandler(ar -&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (ar.failed()) future.fail(ar.cause());</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">JsonObject</span> <span class="variable">jwkObject</span> <span class="operator">=</span> ar.result().toJsonObject();</span><br><span class="line">    <span class="type">JWTAuth</span> <span class="variable">auth</span> <span class="operator">=</span> JWTAuth.create(vertx, <span class="keyword">new</span> <span class="title class_">JWTAuthOptions</span>().addJwk(jwkObject));</span><br><span class="line">    startServices();</span><br><span class="line">    startHttpServer(auth).setHandler(future.completer());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>And of course I modify the <code>startHttpServer()</code> to use <code>JWTAuthHandler</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">routerFactory.addSecurityHandler(<span class="string">&quot;loggedUserToken&quot;</span>, JWTAuthHandler.create(auth));</span><br></pre></td></tr></table></figure>
<p>In next chapters you will see how to create a token during the login process.</p>
<h2 id="Conclusion-2">Conclusion</h2>
<p>The application is bootstrapped, now we are ready to deep down into application logic! In next two chapters I’m going to show you how I have implemented the persistence layer and the event sourcing layer.</p>
<p>Stay tuned for more updates!</p>
]]></content>
      <tags>
        <tag>openapi</tag>
        <tag>vertx</tag>
        <tag>development</tag>
        <tag>web</tag>
        <tag>web api contract</tag>
        <tag>openapi 3</tag>
        <tag>web api service</tag>
        <tag>vertx service proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Reproducibility of benchmarks in Kubernetes</title>
    <url>/Reproducibility-of-benchmarks-in-Kubernetes/</url>
    <content><![CDATA[<p>Hi everybody! Today I’m going to talk you about how I’ve managed to run a benchmark <strong>inside</strong> Kubernetes in a <strong>reproducible</strong> manner.</p>
<h2 id="Reproducibility-What-and-Why">Reproducibility: What and Why</h2>
<p><strong>Reproducibility</strong> means that different runs of the same benchmark, testing the same system, running in the same environment, should lead to similar results.</p>
<p>This is one of the most important traits that every benchmark should respect, because without it, the test can’t be trusted.</p>
<p>For example, let’s assume your boss gave you to optimize the most important system in production. You begin writing a benchmark to understand how it performs and, without caring about reproducibility, you jump to start searching where the performance hotspots are and operate to solve them. Now you run again the tests and results are better than the beginning but, while you’re already feeling the bonus on the next paycheck, a colleague comments your “40% performance boost” PR saying “I tried to run the benchmark and results look worse than the beginning!”. What the heck? Did your PR improves the performance or not?</p>
<p>You can’t really answer that question, because your benchmark is not reproducible! You can try to run it several times but you’ll continue to get deniable and not correlated results, that can answer positively or negatively to your question.</p>
<p>Making the test reproducible, for a good part, depends on the environment where you run the test.</p>
<p>Kubernetes is a virtualized environment designed to scale up &amp; down workloads, depending on resource demands. So it can arbitrarily schedule your application to run where it wants, imposing precise cpu/memory resources. I’ll show you   what countermeasures I’ve took in my methodology to run benchmarks <strong>inside</strong> K8s to prevent such problems.</p>
<h2 id="System-under-test-Knative-Eventing">System under test: Knative Eventing</h2>
<p>A couple of months I’ve started working on a project called Knative Eventing, an event mesh for Kubernetes. One of the goals of Knative Eventing is to enable message consuming &amp; producing through HTTP, acting as a bridge between a “traditional” messaging system (such as Kafka) and an HTTP application.</p>
<p>I won’t cover all aspects of Knative Eventing, If you want to learn more about it check out the <a href="https://knative.dev/docs/eventing/">Knative Eventing documentation</a></p>
<p>Knative, among the others, provides the concept of <code>Channel</code>, a flow of events from one or more producers to one or more subscribed consumers:</p>
<img src="/images/reproducibility-k8s/channel.png" class="" title="From source to user application, through a Channel">
<p>To push events into the channel you interact with its HTTP interface, while to receive events from the channel you subscribe to it, specifying at what HTTP endpoint the channel should send the events. Behind the hood, a pod called <em>dispatcher</em> is actually serving the HTTP interface for inbound events, managing the interaction with the messaging system and dispatching the events to the subscribers.</p>
<p>In this post I will use the test that calculates <code>KafkaChannel</code>’s throughput and latency.</p>
<h2 id="Test-Cluster">Test &amp; Cluster</h2>
<p>The test components are:</p>
<ul>
<li>a sender container that forces a configurable load for a certain amount of time on the Channel</li>
<li>a receiver container that subscribes to the channel</li>
<li>an aggregator container that fetches results from sender and receiver containers and calculates latencies and throughputs</li>
</ul>
<p>All these three components runs inside the cluster.</p>
<p>I won’t spend words in this post to explain how such components, designed together with Knative community, work in deep. If you want to know more about it, look at the <a href="https://github.com/knative/eventing/tree/master/test/test_images/performance"><code>README</code></a>.</p>
<p>The cluster where I’m running the tests is composed by three bare metal machines in the same rack and they’re running <strong>only these tests</strong>. It’s quite important to run on bare metal, otherwise you will need to make further steps to make your virtualization environment reproducible, depending on the VM system you use.</p>
<h2 id="Step-0-How-to-determine-reproducibility">Step 0: How to determine reproducibility?</h2>
<p>The question that arises is: what metric should be used to determine reproducibility? A wise answer could be that the standard deviation of the metric used to determine a performance improvement should be used to determine reproducibility.</p>
<p>In my case I’m going to use standard deviation of the <strong>percentiles</strong> of E2E latency (from sender to receiver) across several runs. The lower is the standard deviation, more reproducible is the test.</p>
<p>To improve reproducibility, I’ll start by configuring and running the test 5 times, to calculate a baseline standard deviation. Then I’ll show you the tweaks I’ve made to reduce the standard deviation to an acceptable value:</p>
<ol>
<li>Configure the test to don’t blow up the system</li>
<li>Pin containers to nodes</li>
<li>Restart the system after each run</li>
<li>Configure the resource limits</li>
</ol>
<h2 id="Step-1-Configure-the-test-to-don’t-blow-up-the-system">Step 1: Configure the test to don’t blow up the system</h2>
<p>The first step is to configure the test to correctly generate a load that doesn’t blow up the system. System must be stressed, but in such a way that doesn’t lead to a complete degradation, or even a crash.</p>
<p>I’ve configured my test to force 500 requests per second for 30 seconds, which I’ve found, experimentally, that is a good configuration the system can hold. Bear in mind that different “requests per second” configurations leads to different latencies!</p>
<p>I’ve collected the 99%, 99.9% and 99.99% percentiles but I’ll focus on 99% percentile because I’ve managed to do only few and short test runs, and in such situations outliers are more visible and not filtered out in higher percentiles. In a “production run” of the test, you should run it for more than 30 seconds, to understand if higher latencies happens frequently.</p>
<p>After a first run, just configuring the test and running it for 5 times, I’ve these results:</p>
<table>
<thead>
<tr>
<th></th>
<th>P99</th>
<th>P99.9</th>
<th>P99.99</th>
</tr>
</thead>
<tbody>
<tr>
<td>Run 1</td>
<td>266.266179</td>
<td>276.945500</td>
<td>284.709000</td>
</tr>
<tr>
<td>Run 2</td>
<td>264.750750</td>
<td>278.127000</td>
<td>283.149000</td>
</tr>
<tr>
<td>Run 3</td>
<td>250.629000</td>
<td>263.994500</td>
<td>271.937000</td>
</tr>
<tr>
<td>Run 4</td>
<td>250.594875</td>
<td>261.605000</td>
<td>272.635000</td>
</tr>
<tr>
<td>Run 5</td>
<td>266.224393</td>
<td>282.690500</td>
<td>290.529000</td>
</tr>
</tbody>
</table>
<p>The SD of P99 is 8.312 and, in particular, the relative standard deviation is 3.2%.</p>
<p>From experimental evidence I’ve found that the relative standard deviation is not linearly related with the test configuration, which means that the more stress is applied by the load generator, the more could be the <strong>relative</strong> standard deviation.</p>
<p>Let’s try to dig into why these numbers are so different and how I’ve lowered them.</p>
<h2 id="Step-2-Pin-containers-to-nodes">Step 2: Pin containers to nodes</h2>
<p>The first thing you can notice is that the third an fourth run performed with generally lower numbers than the others. Digging a bit with <code>kubectl describe nodes</code> I’ve found that Kubernetes was scheduling on each run pods in different nodes. Sometimes it scheduled the sender and receiver in the same node of Kafka Channel dispatcher, letting them communicate with lower latencies!</p>
<p>To let Kubernetes deploy the pods always in the same nodes, I’ve configured the affinity of sender, receiver and all SUTs (system under test, which in my case means the Kafka Channel dispatcher and the Kafka cluster).<br>
To do it, I’ve defined three labels:</p>
<ul>
<li><code>bench-role: kafka</code>: Where Kafka cluster and Zookeeper are deployed</li>
<li><code>bench-role: eventing</code>: Where the kafka dispatcher is deployed</li>
<li><code>bench-role: sender</code>: Where both sender and receiver are deployed</li>
</ul>
<p>And then, I set these labels in my cluster using:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl label nodes node_name bench-role=eventing</span><br></pre></td></tr></table></figure>
<p>On every deployment/pod descriptor, I’ve configured affinity in my various deployment descriptors.</p>
<p>I deployed Kafka using <a href="https://strimzi.io/">Strimzi</a> and, thanks to its <code>Kafka</code> CRD, I can easily configure the <a href="https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity">affinity</a> too (I’ve omitted irrelevant parts of this config):</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kafka:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">pod:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">bench-role</span></span><br><span class="line">                    <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                    <span class="attr">values:</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="string">kafka</span></span><br><span class="line"><span class="attr">zookeeper:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">pod:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">bench-role</span></span><br><span class="line">                    <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                    <span class="attr">values:</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="string">kafka</span></span><br></pre></td></tr></table></figure>
<p>For <code>kafka-ch-dispatcher</code>, I just modified the original <a href="https://github.com/knative/eventing-contrib/blob/master/kafka/channel/config/500-dispatcher.yaml">dispatcher yaml</a> adding the <a href="https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector"><code>nodeSelector</code></a> (which is in fact a short version of the <code>nodeAffinity</code>) and I redeployed from source using ko:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kafka-ch-dispatcher</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">knative-eventing</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">bench-role:</span> <span class="string">eventing</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dispatcher</span></span><br></pre></td></tr></table></figure>
<p>Now the <code>sender</code> and <code>receiver</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">channel-perf-send</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">perf-eventing</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">bench-role:</span> <span class="string">sender</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sender</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">channel-perf-receive</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">perf-eventing</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">bench-role:</span> <span class="string">sender</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">receiver</span></span><br></pre></td></tr></table></figure>
<h2 id="Step-3-Restart-the-system-after-each-run">Step 3: Restart the system after each run</h2>
<p>After pinning the workload to different nodes, I’ve ran again the tests:</p>
<table>
<thead>
<tr>
<th></th>
<th>P99</th>
<th>P99.9</th>
<th>P99.99</th>
</tr>
</thead>
<tbody>
<tr>
<td>Run 1</td>
<td>263.552250</td>
<td>268.646500</td>
<td>272.223000</td>
</tr>
<tr>
<td>Run 2</td>
<td>266.060133</td>
<td>280.979000</td>
<td>285.983000</td>
</tr>
<tr>
<td>Run 3</td>
<td>266.994500</td>
<td>282.858000</td>
<td>292.864000</td>
</tr>
<tr>
<td>Run 4</td>
<td>268.234000</td>
<td>297.516000</td>
<td>326.862000</td>
</tr>
<tr>
<td>Run 5</td>
<td>265.809929</td>
<td>281.717000</td>
<td>288.665000</td>
</tr>
</tbody>
</table>
<p>As you may notice, the first four runs looks incrementally worse. This happens because every run depends on the SUTs states caused by the previous run. The Kafka cluster and/or the Kafka channel dispatcher could be in a degradated state before a new run begins and this obviously reduces the chances to have same results over multiple runs. All systems involved in the road from sender to receiver must be reset, so every run starts stressing the system under the same conditions, ensuring that the latency of a run doesn’t depend on previous runs.</p>
<p>In my case just deleting all pods does the trick, since the <code>Deployment</code>s spin up a new ones:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete pods -n knative-eventing --all</span><br><span class="line">kubectl delete kt --all-namespaces --all <span class="comment"># Delete all KafkaTopics</span></span><br><span class="line">kubectl delete pods -n kafka --all</span><br><span class="line"></span><br><span class="line">kubectl <span class="built_in">wait</span> pod -n knative-eventing --<span class="keyword">for</span>=condition=Ready --all</span><br><span class="line">kubectl <span class="built_in">wait</span> pod -n kafka --<span class="keyword">for</span>=condition=Ready --all</span><br></pre></td></tr></table></figure>
<h2 id="Step-4-Configure-the-resource-limits">Step 4: Configure the resource limits</h2>
<p>As explained at beginning of this post, Kubernetes is designed to scale up &amp; down workloads. What if the scheduler decides to schedule up and down our benchmark resources while the test is running? The benchmark needs to have granted the resources it needs &amp; these should not change while is running. To do so, resource <code>request</code> &amp; <code>limits</code> must be configured the same for every test and SUT, like:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">requests:</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="number">16</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">&quot;8Gi&quot;</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="number">16</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">&quot;8Gi&quot;</span></span><br></pre></td></tr></table></figure>
<p>This leads Kubernetes to schedule pods with QoS class <a href="https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/#create-a-pod-that-gets-assigned-a-qos-class-of-guaranteed"><code>Guaranteed</code></a>, so it can’t scale up &amp; down resources.</p>
<p>The nodes where I’m running the benchmarks are configured with AMD EPYC 7401P 24 cores CPUs (so 48 logical cores) and 24Gb of RAM.<br>
I’ve tried to match these limits as following:</p>
<ul>
<li>Kafka has 16 cpus and 8Gi of memory, same for Zookeeper</li>
<li>Kafka channel dispatcher has 44 cpus and 22Gi of memory</li>
<li>Sender has 16 cpus and 8Gi of memory, same for receiver</li>
</ul>
<p>The problem is, even if containers are configured with <code>Guaranteed</code> QoS, there are no guarantees that the workload is pinned and it has exclusive access to the cores. By default, even in <code>Guaranteed</code> QoS, Kubernetes can move the workload to different cores depending on whether the pod is throttled and which CPU cores are available at scheduling time. The Kube scheduler does it defining the <a href="https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt">CFS Quota</a> for the running container, so it asks to the kernel scheduler to allocate a fixed time to such containers.</p>
<p>Luckily there is a way to force the CPU pinning, enabling the <a href="https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#static-policy">static CPU management</a>. This can be done only configuring the <a href="https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/">Kubelet config file</a> for each node. To do so:</p>
<ol>
<li>If the node is already running and connected to the cluster, it must be <a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#drain">drained</a> using <code>kubectl drain &lt;node name&gt; --delete-local-data --force --ignore-daemonsets</code></li>
<li>Kubelet config file should contain the following entry: <code>cpuManagerPolicy: static</code></li>
<li>Kubernetes system containers should have statically assigned resources. To do it, Kubelet config file should contain a configuration like:</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">systemReserved:</span></span><br><span class="line">  <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="attr">memory:</span> <span class="string">&quot;1Gi&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="Results-2">Results</h2>
<p>I’ve tried to ran the tests after all these tweaks:</p>
<table>
<thead>
<tr>
<th></th>
<th>P99</th>
<th>P99.9</th>
<th>P99.99</th>
</tr>
</thead>
<tbody>
<tr>
<td>Run 1</td>
<td>265.955238</td>
<td>271.344500</td>
<td>276.415000</td>
</tr>
<tr>
<td>Run 2</td>
<td>264.850000</td>
<td>271.462000</td>
<td>279.283000</td>
</tr>
<tr>
<td>Run 3</td>
<td>266.283643</td>
<td>291.772500</td>
<td>335.116000</td>
</tr>
<tr>
<td>Run 4</td>
<td>266.065179</td>
<td>272.497000</td>
<td>279.553000</td>
</tr>
<tr>
<td>Run 5</td>
<td>264.828300</td>
<td>271.254500</td>
<td>278.362000</td>
</tr>
</tbody>
</table>
<p>This results looks far better! Now relative SD of P99 is down to 0.26% (0.7014114246) vs the initial 3.2%!</p>
<p>I still have some outliers at higher percentiles, but now the results looks more trusty than the previous 3.2% of relative SD.</p>
<p>To wrap up, I want to underline that these tweaks worked for me but they could not be enough for all benchmark configurations.</p>
<p>Get in touch with me if you have more tweaks to show, and stay tuned for more updates!</p>
]]></content>
      <tags>
        <tag>cloud</tag>
        <tag>kubernetes</tag>
        <tag>serverless</tag>
        <tag>knative</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Controllers - A new hope</title>
    <url>/Kubernetes-controllers-A-New-Hope/</url>
    <content><![CDATA[<p>Today I’m going to introduce you an idea <a href="https://github.com/markusthoemmes/">Markus Thömmes</a> and I had to package, deploy and operate Kubernetes controllers in a modern and efficient way that may have a fundamental impact on the Kubernetes ecosystem.</p>
<h2 id="Introduction">Introduction</h2>
<p>Kubernetes is the standard de-facto container orchestration engine of these days. As every orchestrator of <em>“something”</em> (bare metal machines, VMs, containers, etc), one day you need to expand the available abstractions the system provides to you. For Kubernetes, that day came around 3 years ago where they introduced the concept of <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/">Custom Resource</a>.</p>
<p>To put it simply, everything you create/read/update/delete in Kubernetes is an API Resource. A <strong>CRD</strong> (Custom Resource Definition) defines a new resource you can create/read/update/delete in your cluster, which is not included in the built-in ones, while a <strong>CR</strong> (Custom Resource) is an instance of the CRD. For example, a <code>Pod</code> is a Kubernetes resource from the <code>core</code> API group, a <code>Broker</code> is a CRD introduced when you install Knative Eventing on your Kubernetes cluster.<br>
With a definition of a new resource, you need to implement the business logic to orchestrate it, that is to handle create/read/update/delete operations on the resource. For example, you might want spawn a new <code>etcd</code> pod every time somebody creates a new <code>EtcdCluster</code> CR. In order to do that, you need to implement a Kubernetes controller: an application that listens for events on one or more API resources and reacts performing some operations on the cluster.</p>
<p>Since the introduction of CRDs, we’ve seen a <strong>huge</strong> expansion of extensions to Kubernetes APIs. Kubernetes vendors are using CRDs to provide distributions well integrated with their underlying systems, software vendors are developing controllers to simplify the operations on Kubernetes environment (for example <a href="https://strimzi.io/">Strimzi</a> to deploy Kafka on Kubernetes), new projects are born to provide middleware and tooling to develop applications on top of Kubernetes (<a href="https://knative.dev">Knative</a> to create serverless applications). Marketing around Kubernetes even forged a new name for the last use case: <em>Kubernetes native</em> applications, aka applications where the API-surface relies on the CRDs. In OpenShift there is even a <a href="https://docs.openshift.com/container-platform/4.5/operators/understanding_olm/olm-understanding-olm.html">system</a>, based on a bunch of CRDs, to install other CRDs with their respective controllers.</p>
<div class="note "><p>Although there is a <a href="https://stackoverflow.com/questions/47848258/kubernetes-controller-vs-kubernetes-operator">distinction</a> between controllers and operators, for the sake of simplicity in this post I’m going to always refer to <em>controller</em> as the entity that implements the business logic of a CRD.</p>
</div>
<p>This concept works pretty well for Kubernetes, although there are still some open questions about the controller itself. In this post I’m going to introduce you a solution <a href="https://github.com/markusthoemmes/">Markus Thömmes</a> and I designed that may <strong>revolutionize</strong> how we package, deploy and operate Kubernetes controllers.</p>
<h2 id="Kubernetes-controllers-today">Kubernetes controllers today</h2>
<p>Today a Kubernetes controller consists of more or less:</p>
<ul>
<li>A main loop that does long polling to Kubernetes to watch one or more resources</li>
<li>On every event, a function called <em>reconciler</em> is invoked to align the cluster state to the desired state. For example: if the desired state expects a Pod to be running, but for some reason there isn’t, then the <em>reconciler</em> creates it.</li>
<li>The <em>reconciler</em> optionally set the status of the CR, like <em>Ready</em>, <em>SomeError</em>, …</li>
</ul>
<p>After we implement the controller, we need to configure and apply the <em>Custom Resource Definition</em> and we need to setup a <em>Service Account</em>, that is an account to connect to our Kubernetes cluster in order to perform the operations the <em>reconciler</em> does.</p>
<p>During the years a lot of tooling was created, <em>mostly in Golang</em>, to implement these controllers, depending on the user needs. To mention some of them:</p>
<ul>
<li><a href="https://github.com/kubernetes-sigs/kubebuilder">Kubebuilder</a></li>
<li><a href="https://sdk.operatorframework.io/">Operator SDK</a></li>
</ul>
<p>Other projects, like Knative, opt for creating and maintaining their <a href="https://github.com/knative/pkg/tree/master/controller">own tooling</a> to implement controllers.</p>
<p>These tools usually provide:</p>
<ul>
<li>A library to improve the event handling logic: “smart” events queue that deduplicate and filter events for example</li>
<li>A code generator component that, starting from the CRD defined in the code, scaffolds the controller code and generates the client code to interact with the CRD</li>
</ul>
<p>In essence, all of these tools work the same though in that ultimately they will generate a binary containing the controller. Each binary can in theory contain a number of controllers, for example Knative’s framework actively encourages that with a <em>main</em> interface to start multiple controllers at same time. Crucially though, collapsing more than one controller into one binary and thus one process in the Kubernetes cluster needs to happen at <strong>compile time</strong>.<br>
With the systems commonly used, we’ll get <strong>at least one process</strong> (aka Pod) per project that extends Kubernetes (i.e. at least one Pod for Knative CRDs, at least one Pod for Strimzi CRDs etc.). Each of those processes will be mostly idle for most of their lifetime, but they will steadily consume resources nonetheless.<br>
In short: <strong>We’re flooding our Kubernetes clusters with applications that suck resources and remain in idle for most of their time!</strong></p>
<h2 id="Extending-Kubernetes-APIs-in-process">Extending Kubernetes APIs in process</h2>
<p>The idea behind our solution is to create a runtime plugin system where every plugin is a Kubernetes controller.</p>
<img src="/images/kubernetes-controllers-a-new-hope/kubernetes-controllers-a-new-hope-1.png" class="" title="Plugin system">
<p>This plugin system should have certain traits:</p>
<ul>
<li>Plugins should be well isolated between each other so no single plugin’s failure/bad behaviour can cause trouble in other plugins</li>
<li>The host should be able to control and restrict what the plugin can do</li>
<li>Users should be able to develop plugins with different languages</li>
<li>The host should be able to load and unload plugins at runtime, without restarting the system</li>
</ul>
<p>This plugin system can be seen as a <em>mega controller</em>. It can run as its own process, or it could even be merged with the <em>kube-controller-manager</em>, which is the process with all the controllers that manage the Kubernetes built-in resources:</p>
<img src="/images/kubernetes-controllers-a-new-hope/kubernetes-controllers-a-new-hope-2.png" class="" title="kube-controller-manager including the plugin system">
<h2 id="Isolated-multi-language-lightweight-plugin-system-That-sounds-hard…">Isolated, multi-language, lightweight plugin system? That sounds hard…</h2>
<p>The requirements of the plugin system are not trivial, but lucky for us WebAssembly (Wasm) comes in rescue!</p>
<p>Wasm is an instruction set, targetable from every programming language, that runs in an isolated Virtual Machine.</p>
<div class="note "><p>From <a href="https://webassembly.org/">webassembly.org</a>: <em>“WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications”</em>.</p>
</div>
<p>That sounds like the perfect fit for our idea:</p>
<ul>
<li>Because it’s isolated by default, we define all the possible interactions between the plugins (controllers) and the host, piece by piece</li>
<li>Because it runs in a sandboxed virtual machine, it can easily isolate catastrophic failures and guarantee safe access to specific memory regions</li>
<li>Because it’s a general purpose instruction set, more similar to an ISA of a modern CPU other than the JVM bytecode, most languages can target it (GC-enabled, dynamic/static typed, …).</li>
</ul>
<p>A list of supported languages is available <a href="https://webassembly.org/getting-started/developers-guide/">here</a> and <a href="https://stackoverflow.com/questions/43540878/what-languages-can-be-compiled-to-webassembly-wasm">here</a>. Wasm is flexible enough that it can be executed with ahead of time (AOT) compilation or with a just in time (JIT) interpreter.</p>
<p>Although WebAssembly sounds like a web or browser technology, in the last years several people are experimenting with this technology <a href="https://webassembly.org/docs/use-cases/#outside-the-browser">outside the browser</a>. Most notably, CloudFlare Function as a Service offering called Workers <a href="https://blog.cloudflare.com/introducing-wrangler-cli/">uses Wasm</a> to run C/Rust code using Google’s V8 isolations.</p>
<p>With WebAssembly, our plugin system looks like:</p>
<img src="/images/kubernetes-controllers-a-new-hope/kubernetes-controllers-a-new-hope-3.png" class="">
<p>When we develop a controller, the compiled artifact is a binary Wasm module. A Wasm engine loads this module, eventually compiles it in AOT cases, and executes it.</p>
<p>At this point, we need to define the interaction semantics between the host and the plugins. In order to do that, we define the <a href="https://en.wikipedia.org/wiki/Application_binary_interface">ABI (Application Binary Interface)</a> of our plugin system: the functions the host <em>imports</em> in our plugin and the functions the plugin <em>exports</em> in our host.</p>
<h2 id="Show-me-your-ABI">Show me your ABI!</h2>
<p>First of all, an example of a Wasm ABI. This is the Rust code for a Wasm module:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[link(wasm_import_module = <span class="string">&quot;my-abi&quot;</span>)]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">println</span>(ptr: *<span class="keyword">const</span> <span class="type">u8</span>, len: <span class="type">usize</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="keyword">fn</span> <span class="title function_">foo</span>() &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>This Wasm module exports the function <code>foo</code>, which means that, after the module has been loaded, the engine can invoke <code>foo</code> to execute it. On the other side, when we load the module in the engine, we must link some logic to the function <code>println</code> in order to run it, otherwise we’ll get a link error.</p>
<p>We can get all imports and exports of a module using a tool called <a href="https://github.com/fitzgen/wasm-nm"><code>wasm-nm</code></a>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">% </span><span class="language-bash">wasm-nm module.wasm -i <span class="comment">#Get the imports</span></span></span><br><span class="line">i println</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">% </span><span class="language-bash">wasm-nm module.wasm -e <span class="comment">#Get the exports</span></span></span><br><span class="line">e foo</span><br></pre></td></tr></table></figure>
<p>This is the most important design choice of the project: the ABI influences the capabilities the host needs to implement, the portability of existing controllers, the APIs on the plugin side and so on. When we design the ABI we also need to take the differences of the programming languages into account: as an example, some may require additional interfaces to the host to run asynchronous code. The async schedulers in Rust and the goroutine scheduler in Golang both require a syscall to <code>sched_yield</code> to yield a thread execution in this example.</p>
<h3 id="WASI">WASI</h3>
<p>Lucky for us, part of the job that includes the <em>low-level</em> primitives is covered by a work in progress spec called <a href="https://wasi.dev/">WASI (WebAssembly System Interface)</a>. Their goal is to provide a reduced set of POSIX-like APIs: read/write files, get system clock, get environment variables and program arguments, read/write a socket and so on. Although, as they state in their <a href="https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-rationale.md">rationale document</a>, it’s not goal of WASI to include primitives to <strong>open sockets/files</strong>, this is left to the users. From their docs:</p>
<div class="note "><p>One of WebAssembly’s unique attributes is the ability to run sandboxed without relying on OS process boundaries. Requiring a 1-to-1 correspondence between wasm instances and heavyweight OS processes would take away this key advantage for many use cases. Fork/exec are the obvious example of an API that’s difficult to implement well if you don’t have POSIX-style processes, but a lot of other things in POSIX are tied to processes too. So it isn’t a simple matter to take POSIX, or even a simple subset of it, to WebAssembly.</p>
</div>
<p>A socket is a process wide resource. This means that if module A opens a TCP socket, module B might have access to it if we don’t implement proper security countermeasures.</p>
<h3 id="Designing-the-ABI">Designing the ABI</h3>
<p>Given our knowledge and studies of the current state of art for Wasm ABIs, we found out there are 3 possible non mutually exclusive approaches to the ABI design:</p>
<ul>
<li><strong>High level ABI</strong>: Expose the Kubernetes client functionalities</li>
<li><strong>Medium level ABI</strong>: Proxy the HTTP client functionalities (send HTTP request, receive HTTP response)</li>
<li><strong>Low level ABI</strong>: Proxy the syscalls (<code>epoll</code>, <code>read</code>, <code>write</code>, <code>bind</code>, …)</li>
</ul>
<p>We think that a good solution should mix all these 3 <em>“levels”</em>. Some low-level APIs are always necessary for basic things like logging, getting configuration from environment, setting timeouts and so on.<br>
Proxying HTTP can be useful to invoke services outside Kubernetes (e.g. to trigger a cloud vendor API to enable a service).<br>
Exposing the Kubernetes client APIs unlocks a great potential to optimize the controllers beyond the optimized resource usage indicated above. Most prominently: the so called <em>informer</em> infrastructure can be shared between all the controllers. An informer is the part of a controller that listens for events on given resources. It builds up local caches that effectively reflect the state of said resources in-memory.<br>
In our case, the host would setup these informers and watches just <strong>once</strong> per resource. If two controllers want to watch <code>ConfigMap</code>s for example, the host would only need to setup one watch and keep one cache, reducing the amount of network traffic due to event delivery and memory consumption due to caching drastically. That effect becomes more and more pronounced as more extensions are being added.</p>
<p>Following the above approach, the host has always the full control of process resources (open files, open sockets, etc), we allow the modules to perform only certain operations and, most important, we open up for <strong>huge optimizations</strong>.</p>
<h2 id="Our-prototype">Our prototype</h2>
<p>Markus and I built a prototype of the host and of the 2 controllers, a simple pod spawner and the <a href="https://sdk.operatorframework.io/docs/golang/quickstart/">Memcached example</a> from operator-sdk. You can find all the code here: <a href="https://github.com/slinkydeveloper/extending-kubernetes-api-in-process-poc">https://github.com/slinkydeveloper/extending-kubernetes-api-in-process-poc</a></p>
<p>The host is implemented in Rust and <a href="https://github.com/wasmerio/wasmer/">Wasmer</a>, a popular Wasm engine supporting different compilation backends and with several language bindings. We implemented the controllers with Rust using a hacked version of <a href="https://github.com/clux/kube-rs"><code>kube-rs</code> client</a>.<br>
The host logic is pretty simple: when it starts, it reads the contents of the specified dir, looking for <code>.yaml</code> containing the module manifests. An example manifest:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">memcached</span></span><br><span class="line"><span class="attr">abi:</span> <span class="string">rust_v1alpha1</span></span><br></pre></td></tr></table></figure>
<p><code>name</code> is the operator name and <code>abi</code> is the abi the host should use to interact with the module. This allows to <a href="https://github.com/slinkydeveloper/extending-kubernetes-api-in-process-poc/blob/ff4e07f2ca29ac7fd913cb3578749d64c25cb048/rust-host/src/abi/mod.rs#L19">support different ABIs</a> at the same time, mainly to overcome the differences between the programming languages and to support old modules running on new host versions.</p>
<p>Then, for each module, it compiles and runs it in a separate thread invoking the exported <code>run</code> function. The module, through the custom ABI we designed, can interact with Kubernetes to start watching resources and react to the events.</p>
<div class="note "><p>The prototype contains several simplifications that we can overcome easily (like watching the modules directory more than loading all the modules once), while others require more engineering as discussed later in this post.</p>
</div>
<h3 id="The-ABI">The ABI</h3>
<p>In order to create a running prototype, we ended up with a pretty simple ABI that mixes the low level WASI syscalls with a medium level HTTP client proxy functionality:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">% </span><span class="language-bash">wasm-nm memcached.wasm -i</span></span><br><span class="line">i request</span><br><span class="line">i clock_time_get</span><br><span class="line">i fd_write</span><br><span class="line">i poll_oneoff</span><br><span class="line">i random_get</span><br><span class="line">i proc_exit</span><br><span class="line">i environ_sizes_get</span><br><span class="line">i environ_get</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">% </span><span class="language-bash">wasm-nm memcached.wasm -e</span></span><br><span class="line">e run</span><br><span class="line">e allocate</span><br></pre></td></tr></table></figure>
<p>The exports are <code>run</code> to start the controller and <code>allocate</code> to allocate memory on the module. The implementer of the controller just implements the resources watch loop inside the <code>run</code> function.</p>
<div class="note info"><p>In Wasm the module cannot access to the host memory, but the host can access to the module memory and copy bytes inside it. Because the Wasm module might have a memory allocator, a GC or any other mechanism to manage memory, the module should export a function that allocates memory to let the host copy bytes back to the module.</p>
</div>
<p><code>request</code> is the function to perform a <strong>blocking and buffered</strong> HTTP request, while all the other imports come from WASI. The user interacts with our hacked version of the Kubernetes client, which under the hood invokes <code>request</code> to perform HTTP requests using <a href="https://github.com/seanmonstar/reqwest"><code>reqwest</code> crate</a>. All our APIs are blocking because currently there is no out of the box <code>async/await</code> support in Wasm modules, I’ll cover this limitation later.</p>
<p>The <code>request</code> flow should give you an idea of what it takes to implement an ABI:</p>
<img src="/images/kubernetes-controllers-a-new-hope/kubernetes-controllers-a-new-hope-4.png" class="">
<p>The host takes care of handling the authentication, in order to avoid the controller having to have access to files at all.</p>
<h3 id="The-controller">The controller</h3>
<p>An example code for the controller looks like:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">client</span> = Client::<span class="title function_ invoke__">default</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">foos</span>: Api&lt;SimplePod&gt; = Api::<span class="title function_ invoke__">namespaced</span>(client.<span class="title function_ invoke__">clone</span>(), <span class="string">&quot;default&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">inform</span> = Informer::<span class="title function_ invoke__">new</span>(foos).<span class="title function_ invoke__">params</span>(ListParams::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">timeout</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">pods</span>: Api&lt;Pod&gt; = Api::<span class="title function_ invoke__">namespaced</span>(client.<span class="title function_ invoke__">clone</span>(), <span class="string">&quot;default&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">events</span> = inform.<span class="title function_ invoke__">poll</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Poll error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">e</span> <span class="keyword">in</span> events &#123;</span><br><span class="line">        <span class="keyword">match</span> e &#123;</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(WatchEvent::<span class="title function_ invoke__">Added</span>(o)) | <span class="title function_ invoke__">Ok</span>(WatchEvent::<span class="title function_ invoke__">Modified</span>(o)) =&gt; &#123;</span><br><span class="line">                <span class="title function_ invoke__">reconcile_pod</span>(&amp;pods, &amp;o.<span class="title function_ invoke__">name</span>(), &amp;o.spec.image).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Reconcile error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(WatchEvent::<span class="title function_ invoke__">Error</span>(e)) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Error event: &#123;:?&#125;&quot;</span>, e),</span><br><span class="line">            <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Error event: &#123;:?&#125;&quot;</span>, e),</span><br><span class="line">            _ =&gt; &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You can look at the full controller code for the above sample <a href="https://github.com/slinkydeveloper/extending-kubernetes-api-in-process-poc/blob/master/ext-simple-pod/src/lib.rs">here</a>. The user potentially doesn’t know that their code is run inside an isolation. Everything is hidden behind the usual Kubernetes client APIs. In other words: <strong>The programming model does not change.</strong></p>
<h3 id="Next-steps">Next steps</h3>
<p>There are some things we still haven’t tested, but that we’re willing to do in order to give us a clear idea of how to grow this idea:</p>
<ul>
<li>Re-design the ABI to support unbuffered &amp; asynchronous HTTP requests. This requires several additions to both the Wasm engine and the host code, most notably the engine should have the ability to <a href="https://github.com/wasmerio/wasmer/issues/1127">yield the execution</a> and the module should have an <a href="https://rust-lang.github.io/async-book/02_execution/04_executor.html">async executor</a> to execute async operations.</li>
<li>The proposed ABI mixes medium level and low level. We want to try to implement a high level function in our ABI for watching Kubernetes resources, in order to register a single watch for all the controllers.</li>
<li>The actual ABI doesn’t have error management at all, but that shouldn’t be hard to implement: the serialized ABI data structures might be enums with error as one of the variants, so then the error is propagated back to the user as a <code>Result</code>.</li>
</ul>
<h2 id="Wait-where-is-Golang">Wait, where is Golang?</h2>
<p>Our <em>dream</em> is to port existing controllers to this approach. Most of Kubernetes world today lives in Golang, but up until this point I didn’t talk at all about Golang. Why?</p>
<p>The reason is that we found some critical issues within the Wasm/Golang support, among the others Golang assumes that the Wasm engine runs inside a JS VM using <a href="https://github.com/golang/go/blob/master/misc/wasm/wasm_exec.js">wasm_exec.js</a>. In order to understand the impact of this choice, let me go through the Golang standard library implementation in Wasm.</p>
<p>Today in Golang, when you compile to Wasm, all the standard library I/O operations go through the <a href="https://golang.org/pkg/syscall/js/"><code>syscall/js</code> module</a>, which invokes a predefined set of imports in your module. From the doc: <em>Package js gives access to the WebAssembly host environment when using the js/wasm architecture. Its API is based on JavaScript semantics.</em>:</p>
<ul>
<li><a href="https://golang.org/pkg/syscall/js/#Global"><code>Global()</code></a> allows you to get the <code>global</code> object</li>
<li><a href="https://golang.org/pkg/syscall/js/#Value.Invoke"><code>Invoke()</code></a> allows you to use a <code>js.Value</code> as a function and invoke it</li>
</ul>
<p>Now let’s analyze how the <code>net/http</code> client implementation on Wasm: When the user invokes <code>RoundTrip</code>, the request <a href="https://github.com/golang/go/blob/b56791cdea5caa87ffcd585d29c294bd3d08a06a/src/net/http/roundtrip_js.go#L60">is transformed in a Javascript object</a>, then using the syscall <code>Global</code> and <code>Call</code> the javascript global function <a href="https://github.com/golang/go/blob/b56791cdea5caa87ffcd585d29c294bd3d08a06a/src/net/http/roundtrip_js.go#L106"><code>fetch</code> is invoked</a> and finally, on the returned promise, the <a href="https://github.com/golang/go/blob/b56791cdea5caa87ffcd585d29c294bd3d08a06a/src/net/http/roundtrip_js.go#L167">two callbacks are set</a> to handle response and error.</p>
<p>The problem with this approach, although it works well in the browsers, is that the <strong>engine needs to implement all these JS functions used by Golang standard library</strong>. If we’re not using a Javascript based runtime, we need to reimplement this. Further, it requires us to <strong>secure access</strong> to the <em>global</em> object fields, in order to retain the isolation properties.</p>
<p>To make things even worse, at the moment there is no way to define imports and exports within the module, so we cannot define and evolve an ABI that fits our needs. The only workable solution with the existing tools consists in define “fake” Javascript functions on the host side for the imports and setting “fake” fields on the <a href="https://github.com/golang/go/issues/25612#issuecomment-506307400">“fake” global object for the exports</a>, but this approach makes the code far more complex and convoluted, both on host and Wasm module side.</p>
<div class="note info"><p>While the official Golang distribution <a href="https://github.com/golang/go/issues/25612">doesn’t support</a> definining imports and exports, <a href="https://github.com/tinygo-org/tinygo/tree/master/src/examples/wasm">TinyGo supports it</a></p>
</div>
<p>Markus managed to run the Memcached operator example of operator-sdk, using NodeJS as a host, hacking some polyfills to match the expectations of <a href="https://github.com/golang/go/blob/master/misc/wasm/wasm_exec.js">wasm_exec.js</a>. The final module ABI is:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">% </span><span class="language-bash">wasm-nm test.wasm -i</span></span><br><span class="line">i debug</span><br><span class="line">i runtime.resetMemoryDataView</span><br><span class="line">i runtime.wasmExit</span><br><span class="line">i runtime.wasmWrite</span><br><span class="line">i runtime.nanotime1</span><br><span class="line">i runtime.walltime1</span><br><span class="line">i runtime.scheduleTimeoutEvent</span><br><span class="line">i runtime.clearTimeoutEvent</span><br><span class="line">i runtime.getRandomData</span><br><span class="line">i syscall/js.finalizeRef</span><br><span class="line">i syscall/js.stringVal</span><br><span class="line">i syscall/js.valueGet</span><br><span class="line">i syscall/js.valueSet</span><br><span class="line">i syscall/js.valueIndex</span><br><span class="line">i syscall/js.valueSetIndex</span><br><span class="line">i syscall/js.valueCall</span><br><span class="line">i syscall/js.valueNew</span><br><span class="line">i syscall/js.valueLength</span><br><span class="line">i syscall/js.valuePrepareString</span><br><span class="line">i syscall/js.valueLoadString</span><br><span class="line">i syscall/js.copyBytesToGo</span><br><span class="line">i syscall/js.copyBytesToJS</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">% </span><span class="language-bash">wasm-nm test.wasm -e</span></span><br><span class="line">e run</span><br><span class="line">e resume</span><br><span class="line">e getsp</span><br></pre></td></tr></table></figure>
<p>I was initially puzzled by the <code>resume</code> and <code>getsp</code> exports of the Wasm module, but then digging in the <a href="https://github.com/golang/go/blob/master/misc/wasm/wasm_exec.js">wasm_exec.js</a> codebase their existence was justified: using <code>resume</code> and <code>getsp</code> the host can yield the execution of the module, perform some async operations, and then resume the execution of the code. That’s the very same solution I would love to implement in our Rust ABI prototype and, as far as I know, <a href="https://github.com/WebAssembly/WASI/issues/276">WASI is looking for a generalized solution to support async runtimes inside the modules</a>.</p>
<p>This experiment proves that Golang/Wasm support can definitely work and we think that, without the constraints of <code>syscall/js</code> and with the ability to define our ABI, we could port all the existing controllers to compile in Wasm isolated modules.</p>
<div class="note info"><p>Some interesting issues to follow about Golang and Wasm related to this discussion:</p>
<ul>
<li><a href="https://github.com/golang/go/issues/31105">Golang + WASI</a></li>
<li><a href="https://github.com/tinygo-org/tinygo/issues/1189">Ability to reduce js-centricness of compiled wasm modules in TinyGo</a></li>
<li><a href="https://github.com/golang/go/issues/27766">Make syscall/js optional when compiling wasm</a></li>
<li><a href="https://github.com/golang/go/issues/25612">re-use //export mechanism for exporting identifiers within wasm modules</a></li>
</ul>
</div>
<h2 id="There-is-still-a-long-road-ahead">There is still a long road ahead</h2>
<p>Our long-term goal is to improve the Kubernetes ecosystem, creating a production ready plugin system with low footprint. We encourage the Kubernetes community to give us feedback on our findings and our prototype, so we can work together on shaping the future of Kubernetes controllers!</p>
<p>Check out the second part of this blog post series: <a href="../Kubernetes-controllers-The-Empire-Strikes-Back">Kubernetes controllers: The Empire Strikes Back</a></p>
]]></content>
      <tags>
        <tag>cloud</tag>
        <tag>kubernetes</tag>
        <tag>rust</tag>
        <tag>webassembly</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes controllers - The Empire Strikes Back</title>
    <url>/Kubernetes-controllers-The-Empire-Strikes-Back/</url>
    <content><![CDATA[<p>In this blog post I want to introduce you to some important steps forward we made in our <a href="https://github.com/slinkydeveloper/extending-kubernetes-api-in-process-poc">Extending Kubernetes API In-Process project</a>. If you don’t know what I’m talking about, check out the previous post: <a href="../Kubernetes-controllers-A-New-Hope">Kubernetes Controllers - A new hope</a>.</p>
<p>We implemented the high-level ABI to start watchers on Kubernetes resources, as argued in <a href="../Kubernetes-controllers-A-New-Hope#Next-Steps">Next steps</a> paragraph. This allows us to identify watch requests sent by controllers and to deduplicate them.</p>
<p>Then we worked on modifying our ABI to make it <strong>asynchronous</strong>, in order to invoke the controllers only <strong>on-demand</strong>. Now, we don’t spin up a thread for each module, but we wake controllers up asynchronously when there is a new task to process.</p>
<p>Thanks to these changes, we’re now able to use Rust’s <code>async</code>/<code>await</code> inside the module. This allowed us to realign our fork of <code>kube-rs</code>, bringing back all the original interfaces, and run <code>kube-runtime</code> inside the modules.</p>
<h2 id="The-kube-watch-abi-ABI">The <code>kube-watch-abi</code> ABI</h2>
<p>The <code>kube-watch-abi</code> ABI was originally composed by an import and an export:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[link(wasm_import_module = <span class="string">&quot;kube-watch-abi&quot;</span>)]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="comment">// Returns the watch identifier</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">watch</span>(watch_req_ptr: *<span class="keyword">const</span> <span class="type">u8</span>, watch_req_len: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="type">u64</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="keyword">fn</span> <span class="title function_">on_event</span>(watch_id: <span class="type">u64</span>, ev_ptr: *<span class="keyword">const</span> <span class="type">u8</span>, ev_len: <span class="type">usize</span>) &#123;</span><br><span class="line">    <span class="comment">// handle event</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>watch_req</code> is a description of the watch to register:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">struct</span> <span class="title class_">WatchRequest</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) resource: Resource,</span><br><span class="line">    <span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) watch_params: WatchParams</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Controller">Controller</h3>
<p>When the module invokes the <code>watch</code> import, it registers a new watch and returns a watch identifier. This identifier is stored together with a reference to the <code>Stream&lt;WatchEvent&gt;</code> in a global map.<br>
In similar fashion to the <code>request</code> ABI discussed in the <a href="../Kubernetes-controllers-A-New-Hope#The-ABI">previous post</a>, we serialize the <code>WatchRequest</code> data structure in order to pass it to the host.</p>
<p>Then, every time the host has a new <code>WatchEvent</code> that the controller needs to handle, it will invoke <code>on_event</code> with the serialized <code>WatchEvent</code>. Using the watch identifier, the controller will get the associated <code>Stream</code> from the global map and append the deserialized <code>WatchEvent</code> to it.</p>
<h3 id="The-host">The host</h3>
<p>When the controller invokes <code>watch</code>, the host checks if there is a registered watch for that resource. If there is, then it just registers the invoker as interested to that watch, otherwise it starts a new watch.<br>
Every time a watch receives a new event from Kubernetes, the host resolves all the modules interested to that particular event. For each module, it allocates some module memory to pass the event and it finally wakes the controller up by invoking <code>on_event</code>.</p>
<h2 id="Rust-module-with-async-await">Rust module with async-await</h2>
<h3 id="Callbacks-are-bad">Callbacks are bad!</h3>
<p>The <code>kube-watch-abi</code> is the de-facto an asynchronous API: <code>watch</code> starts the asynchronous operation, <code>on_event</code> notifies on the completion of the operation.</p>
<p>In the initial implementation of the <code>watch</code>, on module side, I just modified the kube client <code>watch</code> to provide a callback:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">watch</span>&lt;F: <span class="symbol">&#x27;static</span> + <span class="title function_ invoke__">Fn</span>(WatchEvent&lt;K&gt;) + <span class="built_in">Send</span>&gt;(&amp;<span class="keyword">self</span>, lp: &amp;ListParams, version: &amp;<span class="type">str</span>, callback: F) &#123;</span><br><span class="line">    <span class="comment">// Invoke watch</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Every time <code>on_event</code> was invoked, the module resolved the callback from the watch identifier and invoked it.<br>
This was fine as an initial approach, but we soon hit a problem: Porting all of the existing Kubernetes client and runtime code from <code>async</code>/<code>await</code> to the more <em>primitive</em> callbacks could have caused a lot of issues, making the fork diverge too much from the upstream code.</p>
<h3 id="How-async-await-works">How <code>async</code>/<code>await</code> works</h3>
<p>Here’s a little refresh on <code>async</code>/<code>await</code> from <a href="https://rust-lang.github.io/async-book/01_getting_started/04_async_await_primer.html">Asynchronous Programming in Rust book</a>:</p>
<blockquote class="blockquote-center">
<p>async/.await is Rust’s built-in tool for writing asynchronous functions that look like synchronous code. async transforms a block of code into a state machine that implements a trait called Future. Whereas calling a blocking function in a synchronous method would block the whole thread, blocked Futures will yield control of the thread, allowing other Futures to run._</p>

</blockquote>
<p>Although there are a lot of details about how Rust implements the <code>async</code>/<code>await</code> feature, these are the relevant concepts for this post:</p>
<ul>
<li><code>Future</code> is the type that represents an asynchronous result, e.g. <code>async fn</code> returns a <code>Future</code>. You can wait for the result of a <code>Future</code> using <code>.await</code>.</li>
<li><code>Stream</code> is the same as <code>Future</code>, but it returns several elements before <code>None</code>, which notifies the end of the stream.</li>
<li>In order to use <code>.await</code>, you <strong>must</strong> be in an <code>async</code> code block.</li>
<li>In order to run an <code>async</code> code block, you need to use a task executor.</li>
</ul>
<p>For example:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> futures::executor::LocalPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// Create the executor</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">pool</span> = LocalPool::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spawn an async task</span></span><br><span class="line">    poll.<span class="title function_ invoke__">spawner</span>().<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="comment">// execute `my_async_fn()` and await for the result</span></span><br><span class="line">        <span class="title function_ invoke__">my_async_fn</span>().<span class="keyword">await</span></span><br><span class="line">    &#125;);    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Block the main thread until all the tasks are done</span></span><br><span class="line">    pool.<span class="title function_ invoke__">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In our <code>async</code>/<code>await</code> implementation we implemented the <code>Future</code> and <code>Stream</code> traits, we reused <a href="https://docs.rs/futures/0.3.6/futures/executor/struct.LocalPool.html">LocalPool</a> from the <code>futures</code> crate as a task executor, and we generalized <code>on_event</code> to notify the asynchronous operation completion.</p>
<h3 id="The-controller-lifecycle">The controller lifecycle</h3>
<p>We first analyzed the controller lifecycle:</p>
<ol>
<li>When host invokes <code>run</code>, the controller starts a bunch of watchers and then it waits for new events</li>
<li>Every time a new event comes in, the host wakes the controller up by calling <code>on_event</code></li>
</ol>
<p>This means that during the <code>run</code> phase, the controller starts a bunch of asynchronous tasks, one or more of them waiting for asynchronous events. After the <code>run</code> phase completes, <strong>there is no need to keep the module running</strong>. When we wake the controller up again, we need to check for any tasks that can continue and run them up to the point where we have all the tasks waiting for an external event.</p>
<p>To implement this lifecycle, we need to execute both on <code>run</code> and on <code>on_event</code> the executor method <a href="https://docs.rs/futures/0.3.6/futures/executor/struct.LocalPool.html#method.run_until_stalled"><code>run_until_stalled()</code></a>, which will run all tasks in the executor pool and returns if no more progress can be made on any task. This allows us to implement <code>run</code> as follows:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="keyword">fn</span> <span class="title function_">run</span>() &#123;</span><br><span class="line">    <span class="comment">// Get the global executor</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">exec</span> = kube::abi::<span class="title function_ invoke__">get_mut_executor</span>();</span><br><span class="line">    <span class="comment">// Start the main task</span></span><br><span class="line">    exec.<span class="title function_ invoke__">deref</span>().<span class="title function_ invoke__">borrow_mut</span>().<span class="title function_ invoke__">spawner</span>().<span class="title function_ invoke__">spawn</span>(<span class="title function_ invoke__">main</span>()).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="comment">// Give a little push to the executor.</span></span><br><span class="line">    <span class="comment">// This runs until all tasks up to when they&#x27;re all waiting for async results completion.</span></span><br><span class="line">    exec.<span class="title function_ invoke__">deref</span>().<span class="title function_ invoke__">borrow_mut</span>().<span class="title function_ invoke__">run_until_stalled</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Our-custom-Future-Stream">Our custom <code>Future</code>/<code>Stream</code></h3>
<p>In order to encapsulate the pending asynchronous operation, we implemented our <code>Future</code>. The implementations are straightforward and pretty much the same <a href="https://rust-lang.github.io/async-book/02_execution/03_wakeups.html">as explained in the Rust async book</a>:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Shared state between the future and the waiting thread</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AbiFutureState</span> &#123;</span><br><span class="line">    <span class="comment">// The result value</span></span><br><span class="line">    value: <span class="type">Option</span>&lt;<span class="type">Vec</span>&lt;<span class="type">u8</span>&gt;&gt;,</span><br><span class="line">    <span class="comment">// Was the future completed?</span></span><br><span class="line">    completed: <span class="type">bool</span>,</span><br><span class="line">    <span class="comment">// Object that notifies the completion to the executor</span></span><br><span class="line">    waker: <span class="type">Option</span>&lt;Waker&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Future</span> <span class="keyword">for</span> <span class="title class_">AbiFuture</span> &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Output</span> = <span class="type">Option</span>&lt;<span class="type">Vec</span>&lt;<span class="type">u8</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">poll</span>(<span class="keyword">self</span>: Pin&lt;&amp;<span class="keyword">mut</span> <span class="keyword">Self</span>&gt;, cx: &amp;<span class="keyword">mut</span> Context&lt;<span class="symbol">&#x27;_</span>&gt;) <span class="punctuation">-&gt;</span> Poll&lt;<span class="keyword">Self</span>::Output&gt; &#123;</span><br><span class="line">        <span class="comment">// Look at the shared state to see if the timer has already completed.</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">shared_state</span> = <span class="keyword">self</span>.shared_state.<span class="title function_ invoke__">lock</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        <span class="keyword">if</span> shared_state.completed &#123;</span><br><span class="line">            Poll::<span class="title function_ invoke__">Ready</span>(shared_state.value.<span class="title function_ invoke__">take</span>())</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            shared_state.waker = <span class="title function_ invoke__">Some</span>(cx.<span class="title function_ invoke__">waker</span>().<span class="title function_ invoke__">clone</span>());</span><br><span class="line">            Poll::Pending</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A similar implementation exists for the <code>Stream</code> trait. To create a <code>Future</code>, we use this method:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">start_future</span>(async_operation_id: <span class="type">u64</span>) <span class="punctuation">-&gt;</span> AbiFuture &#123;</span><br><span class="line">    <span class="comment">// Create the future state</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">state</span> = Arc::<span class="title function_ invoke__">new</span>(Mutex::<span class="title function_ invoke__">new</span>(</span><br><span class="line">        AbiFutureState &#123;</span><br><span class="line">            value: <span class="literal">None</span>,</span><br><span class="line">            completed: <span class="literal">false</span>,</span><br><span class="line">            waker: <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">    ));</span><br><span class="line">    <span class="comment">// Insert in the global map of pending future states this future state</span></span><br><span class="line">    <span class="title function_ invoke__">get_pending_futures</span>().<span class="title function_ invoke__">deref</span>().<span class="title function_ invoke__">borrow_mut</span>().<span class="title function_ invoke__">insert</span>(async_operation_id, state.<span class="title function_ invoke__">clone</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the new future</span></span><br><span class="line">    AbiFuture &#123;</span><br><span class="line">        shared_state: state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Generalizing-on-event-to-wakeup-future-wakeup-stream">Generalizing <code>on_event</code> to <code>wakeup_future</code>/<code>wakeup_stream</code></h3>
<p>At this point, we took the concept of <code>on_event</code> and generalized to <code>async</code>/<code>await</code>, introducing <code>wakeup_future</code>/<code>wakeup_stream</code> ABI exports.<br>
Every time the controller invokes an asynchronous ABI import (like <code>watch</code>), it gets the identifier that we use to instantiate our <code>Future</code>/<code>Stream</code> implementation.<br>
When the host completed the asynchronous operation, it invokes <code>wakeup_future</code>/<code>wakeup_stream</code>. The controller marks the <code>Future</code>/<code>Stream</code> as completed, including the result value, and invokes <code>LocalPool::run_until_stalled()</code> to wake up tasks waiting for that future/stream to complete.</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="keyword">fn</span> <span class="title function_">wakeup_future</span>(future_id: <span class="type">u64</span>, ptr: *<span class="keyword">const</span> <span class="type">u8</span>, len: <span class="type">usize</span>) &#123;</span><br><span class="line">    <span class="comment">// Retrieve the global pending future states map</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">fut_state</span> = <span class="title function_ invoke__">get_pending_futures</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">waker</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">state_arc</span> = fut_state.<span class="title function_ invoke__">deref</span>().<span class="title function_ invoke__">borrow_mut</span>().<span class="title function_ invoke__">remove</span>(&amp;future_id).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">state</span> = state_arc.<span class="title function_ invoke__">lock</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the pointer is not null, fill the Future result value </span></span><br><span class="line">        <span class="keyword">if</span> !ptr.<span class="title function_ invoke__">is_null</span>() &#123;</span><br><span class="line">            state.value = <span class="title function_ invoke__">Some</span>(<span class="keyword">unsafe</span> &#123;</span><br><span class="line">                Vec::<span class="title function_ invoke__">from_raw_parts</span>(</span><br><span class="line">                    ptr <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">u8</span>,</span><br><span class="line">                    len <span class="keyword">as</span> <span class="type">usize</span>,</span><br><span class="line">                    len <span class="keyword">as</span> <span class="type">usize</span>,</span><br><span class="line">                )</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        state.completed = <span class="literal">true</span>;</span><br><span class="line">        state.waker.<span class="title function_ invoke__">take</span>()</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// Use the waker to notify the executor this future is completed</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(waker) = waker &#123;</span><br><span class="line">        waker.<span class="title function_ invoke__">wake</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Let&#x27;s try to execute stuff up to the point where there isn&#x27;t anything else to execute</span></span><br><span class="line">    <span class="title function_ invoke__">get_mut_executor</span>().<span class="title function_ invoke__">deref</span>().<span class="title function_ invoke__">borrow_mut</span>().<span class="title function_ invoke__">run_until_stalled</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="The-complete-flow">The complete flow</h3>
<p>This is a complete flow of an asynchronous ABI method:</p>
<pre class="mermaid">
sequenceDiagram
participant C as Controller module
participant H as Host

activate C
C -&gt;&gt; H: do_async()
activate H
H -&gt;&gt; C: Returns async operation identifier
C -&gt;&gt; C: run_until_stalled()
deactivate C
Note over H: Waiting for the async result
H -&gt;&gt; C: wakeup_future()
deactivate H
activate C
C -&gt;&gt; C: run_until_stalled()
deactivate C
</pre>
<p>You can find the complete code regarding <code>async</code>/<code>await</code> support here: <a href="https://github.com/slinkydeveloper/extending-kubernetes-api-in-process-poc/blob/master/kube-rs/src/abi/executor.rs"><code>executor.rs</code></a></p>
<h3 id="More-async-ABI-methods">More async ABI methods!</h3>
<p>After we implemented <code>async</code>/<code>await</code> in our WASM modules, we refactored the <code>request</code> ABI discussed in <a href="../Kubernetes-controllers-A-New-Hope/#The-ABI">our previous post</a> as an asynchronous ABI method:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[link(wasm_import_module = <span class="string">&quot;http-proxy-abi&quot;</span>)]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">request</span>(ptr: *<span class="keyword">const</span> <span class="type">u8</span>, len: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="type">u64</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now the returned value is the asynchronous operation identifier and, to signal the completion of the request, the host invokes <code>wakeup_future</code>.</p>
<p>We also included a new ABI method to sleep the execution of the module:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[link(wasm_import_module = <span class="string">&quot;delay-abi&quot;</span>)]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">delay</span>(millis: <span class="type">u64</span>) <span class="punctuation">-&gt;</span> <span class="type">u64</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is necessary to run the kube-runtime, which performs some sleeps before synchronizing the internal cache again.</p>
<h2 id="Redesigning-the-host-as-an-event-driven-application">Redesigning the host as an event-driven application</h2>
<p>The first implementation of the new <code>kube-watch-abi</code> ABI was a little rough: a lot of blocking threads, shared memory across threads, some unsafe sprinkled here and there to make the code compiling.<br>
Because of that, we redesigned the host to transform it in a full asynchronous application made of channels and message handlers. For every asynchronous ABI method there is a channel that delivers the <em>request</em> to a message handler, which processes the request, computes one or more responses and sends them back to another channel. This last channel delivers messages to the <code>AsyncResultDispatcher</code>, owner of the module instances, that invokes the <code>wakeup_future</code>/<code>wakeup_stream</code> of the interested controller.</p>
<p>Today we have 3 different message handlers, one for each async ABI method:</p>
<ul>
<li><code>kube_watch::Watchers</code> that controls the watch operation. This message handler is also able to deduplicate the watch operations</li>
<li><code>http::start_request_executor</code> to execute HTTP requests</li>
<li><code>delay::start_delay_executor</code> to execute delay requests</li>
</ul>
<p>When the host loads all the modules, it executes the ABI method <code>run</code> for each module, then it transfers the ownership of module instances to <code>AsyncResultDispatcher</code> that will start listening for new <code>AsyncResult</code> messages on its ingress channel.</p>
<p>Because all the message handlers and channels are <code>async</code>/<code>await</code> based, if all the handlers are in idle, virtually no resource is wasted with threads waiting.</p>
<p>Since <code>AsyncResultDispatcher</code> controls all the different module instances, it avoids invoking the same controller in parallel: <code>LocalLoop</code> is a single threaded async task executor, hence a module cannot process multiple async results in parallel.</p>
<h2 id="Compiling-kube-runtime-to-WASM">Compiling kube-runtime to WASM</h2>
<p>Thanks to all the async changes, we managed to realign most of the APIs of <code>kube-rs</code> to the original ones. This allowed us to port <code>kube-runtime</code> to our WASM controllers.</p>
<blockquote class="blockquote-center">
<p>The kube_runtime crate contains sets of higher level abstractions on top of the Api and Resource types so that you don’t have to do all the watch/resourceVersion/storage book-keeping yourself.</p>

</blockquote>
<p>The problem we experienced with compiling <code>kube-runtime</code> to WASM is that it depends on <code>tokio::time::DelayQueue</code>, a queue that yields components up to a specified deadline. <code>DelayQueue</code> uses the <code>Future</code> type called <code>Delay</code> to effectively implement delays. The problem with this <code>Delay</code> is that it’s implemented using the internal ticker of the Tokio async task executor <code>Runtime</code>, which we don’t use inside WASM modules.</p>
<p>In order to fix this issue, we had to fork the implementation of <code>tokio::time::DelayQueue</code> and reimplement the <code>Delay</code> type using the <code>delay</code> ABI shown previously:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Delay</span> &#123;</span><br><span class="line">    fut: Pin&lt;<span class="type">Box</span>&lt;<span class="keyword">dyn</span> Future&lt;Output=()&gt; + <span class="built_in">Send</span>&gt;&gt;,</span><br><span class="line">    deadline: Instant</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Delay</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">fn</span> <span class="title function_">new_timeout</span>(deadline: Instant) <span class="punctuation">-&gt;</span> Delay &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">now</span> = Instant::<span class="title function_ invoke__">now</span>();</span><br><span class="line">        <span class="keyword">match</span> deadline.<span class="title function_ invoke__">checked_duration_since</span>(now) &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(dur) =&gt; Delay &#123;</span><br><span class="line">                fut: Box::<span class="title function_ invoke__">pin</span>(kube::abi::<span class="title function_ invoke__">register_delay</span>(dur)),</span><br><span class="line">                deadline</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="literal">None</span> =&gt; Delay &#123;</span><br><span class="line">                fut: Box::<span class="title function_ invoke__">pin</span>(futures::future::<span class="title function_ invoke__">ready</span>(())),</span><br><span class="line">                deadline: now</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [...]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Future</span> <span class="keyword">for</span> <span class="title class_">Delay</span> &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Output</span> = ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">poll</span>(<span class="keyword">mut</span> <span class="keyword">self</span>: Pin&lt;&amp;<span class="keyword">mut</span> <span class="keyword">Self</span>&gt;, cx: &amp;<span class="keyword">mut</span> task::Context&lt;<span class="symbol">&#x27;_</span>&gt;) <span class="punctuation">-&gt;</span> Poll&lt;<span class="keyword">Self</span>::Output&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span>.fut.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">poll</span>(cx)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>With the custom implementation of <code>DelayQueue</code>, the <code>rust-runtime</code> compiled successfully to WASM, and we managed to port our controllers to use it!</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">client</span> = Client::<span class="title function_ invoke__">default</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">simple_pods</span>: Api&lt;SimplePod&gt; = Api::<span class="title function_ invoke__">namespaced</span>(client.<span class="title function_ invoke__">clone</span>(), <span class="string">&quot;default&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">pods</span>: Api&lt;Pod&gt; = Api::<span class="title function_ invoke__">namespaced</span>(client.<span class="title function_ invoke__">clone</span>(), <span class="string">&quot;default&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Controller::<span class="title function_ invoke__">new</span>(simple_pods, ListParams::<span class="title function_ invoke__">default</span>())</span><br><span class="line">        .<span class="title function_ invoke__">owns</span>(pods, ListParams::<span class="title function_ invoke__">default</span>())</span><br><span class="line">        .<span class="title function_ invoke__">run</span>(reconcile, error_policy, Context::<span class="title function_ invoke__">new</span>(Data &#123; client &#125;))</span><br><span class="line">        .<span class="title function_ invoke__">for_each</span>(|res| <span class="keyword">async</span> <span class="keyword">move</span> &#123; <span class="keyword">match</span> res &#123;</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>((obj, _)) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Reconciled &#123;:?&#125;&quot;</span>, obj),</span><br><span class="line">            <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Reconcile error: &#123;:?&#125;&quot;</span>, e),</span><br><span class="line">        &#125;&#125;).<span class="keyword">await</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Show-me-the-code">Show me the code!</h2>
<p>You can check out the complete code of controllers today here: <a href="https://github.com/slinkydeveloper/extending-kubernetes-api-in-process-poc/blob/master/ext-simple-pod/src/lib.rs">simple-pod controller</a></p>
<p>If you want to look at all the different changes the project went through, look at these PRs:</p>
<ol>
<li><a href="https://github.com/slinkydeveloper/extending-kubernetes-api-in-process-poc/pull/6">Event system and implementation of <code>watch</code> ABI</a></li>
<li><a href="https://github.com/slinkydeveloper/extending-kubernetes-api-in-process-poc/pull/7">Refactor of the host as event-driven application</a></li>
<li><a href="https://github.com/slinkydeveloper/extending-kubernetes-api-in-process-poc/pull/8"><code>async</code>/<code>await</code> + <code>watch</code> returns <code>Stream</code></a></li>
<li><a href="https://github.com/slinkydeveloper/extending-kubernetes-api-in-process-poc/pull/9">Non blocking HTTP proxy ABI</a></li>
<li><a href="https://github.com/slinkydeveloper/extending-kubernetes-api-in-process-poc/pull/10">Non blocking <code>delay</code> ABI</a></li>
<li><a href="https://github.com/slinkydeveloper/extending-kubernetes-api-in-process-poc/pull/11">Kube runtime port</a></li>
</ol>
<h2 id="Next-steps-2">Next steps</h2>
<p>Now the controller module looks like a real Kubernetes controller: the difference is minimal to a controller targeting the usual deployment style. We also opened up a door for important optimizations, thanks to the <code>watch</code> ABI method. The host refactoring and the async ABI methods should also simplify the future interaction with Golang WASM controllers, because our ABI now resembles the asynchronous semantics of their WASM ABI.</p>
<p>Our next goals are:</p>
<ul>
<li>Hack the Golang compiler to fit our ABI (or a similar one). For more info check out the <a href="../Kubernetes-controllers-A-New-Hope#Wait-where-is-Golang">previous blog post</a></li>
<li>Perform a comparison in terms of resource utilization between this deployment style using WASM modules and the usual one of 1 container per controller.</li>
<li>Figure out how to handle the different <code>ServiceAccount</code>s per controller</li>
</ul>
<p>Stay tuned!</p>
]]></content>
      <tags>
        <tag>cloud</tag>
        <tag>kubernetes</tag>
        <tag>rust</tag>
        <tag>webassembly</tag>
      </tags>
  </entry>
  <entry>
    <title>Vert.x container images with jlink</title>
    <url>/Vert-x-Container-images-with-jlink/</url>
    <content><![CDATA[<p>In this blog post I’m gonna show you how I managed to reduce the container image size of an Eclipse Vert.x application, creating a smaller JDK with <code>jdeps</code> and <code>jlink</code>.</p>
<p>The application is the data plane of <a href="https://github.com/knative-sandbox/eventing-kafka-broker">Knative Eventing Kafka Broker</a>, an implementation of Knative <code>Broker</code> tailored on Kafka.</p>
<h2 id="Fat-jar">Fat-jar</h2>
<p>We didn’t handwritten nor generated a <code>module-info.java</code> for our application, we just ship a fat-jar. To generate a fat-jar, configure the <code>maven-shade-plugin</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven.shade.plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">minimizeJar</span>&gt;</span>true<span class="tag">&lt;/<span class="name">minimizeJar</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transformer</span></span></span><br><span class="line"><span class="tag">             <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span></span><br><span class="line">               $&#123;main-class&#125;</span><br><span class="line">             <span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Jdeps">Jdeps</h2>
<p><code>jdeps</code> is the tool you must use to figure which JDK modules you depend on. If you run <code>jdeps</code> just with the fat-jar as argument, you’ll get a list of all the packages in your jar and the JDK modules it depends on:</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">% </span><span class="language-bash">jdeps receiver/target/receiver-1.0-SNAPSHOT.jar</span></span><br><span class="line">[...]</span><br><span class="line">   dev.knative.eventing.kafka.broker.core             -&gt; java.lang                                          java.base</span><br><span class="line">   dev.knative.eventing.kafka.broker.core             -&gt; java.lang.invoke                                   java.base</span><br><span class="line">   dev.knative.eventing.kafka.broker.core             -&gt; java.net                                           java.base</span><br><span class="line">   dev.knative.eventing.kafka.broker.core             -&gt; java.time                                          java.base</span><br><span class="line">   dev.knative.eventing.kafka.broker.core             -&gt; java.time.format                                   java.base</span><br><span class="line">   dev.knative.eventing.kafka.broker.core             -&gt; java.util                                          java.base</span><br><span class="line">   dev.knative.eventing.kafka.broker.core             -&gt; java.util.concurrent                               java.base</span><br><span class="line">   dev.knative.eventing.kafka.broker.core             -&gt; java.util.function                                 java.base</span><br><span class="line">   dev.knative.eventing.kafka.broker.core             -&gt; java.util.stream                                   java.base</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>
<p>Note that <code>jdeps</code> analyzes only the imports so, if you perform some reflections at runtime of JDK classes, they won’t be found by the tool.</p>
<p>To get an output that you can directly pass to <code>jlink</code>:</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">% </span><span class="language-bash">jdeps -q --print-module-deps --ignore-missing-deps receiver/target/receiver-1.0-SNAPSHOT.jar</span></span><br><span class="line">java.base,java.compiler,java.naming,java.security.jgss,java.security.sasl,java.sql,jdk.management,jdk.unsupported</span><br></pre></td></tr></table></figure>
<p>This is the list of jdk modules we depend on. Doing a quick check, I’ve found that:</p>
<ul>
<li><code>java.base</code> it’s the module that contains all the core features of the jdk</li>
<li><code>java.compiler</code> contains the compiler types. It’s brought in by Guava and Vert.x CLI feature.</li>
<li><code>java.naming</code> contains some JNDI types, to perform names lookups. This is required to perform DNS queries by Vert.x</li>
<li><code>java.security.jgss</code> and <code>java.security.sasl</code> contains some security protocols implementation. They’re used by the Java Kafka client.</li>
<li><code>java.sql</code> contains JDBC. Jackson databind and Google Gson (that we import transitively via Protobuf json) depends on it because they provide marshallers/unmarshallers for JDBC types.</li>
<li><code>jdk.management</code> contains some interfaces to manage the JDK. This is used by Micrometer to instrument the JVM and collect metrics.</li>
<li><code>jdk.unsupported</code> contains <code>sun.misc.Unsafe</code>. Netty and Protobuf use it to perform off-heap allocations.</li>
</ul>
<h2 id="Zero-days-since-it-was-DNS">Zero days since it was DNS</h2>
<p>Because some reflection is happening behind the hood to choose the Vert.x DNS resolver, <code>jdeps</code> doesn’t discover the module <code>jdk.naming.dns</code>, that you need in your Vert.x application to enable the DNS.</p>
<p>To resolve the deps and add the dns module:</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">MODS=$(jdeps -q --print-module-deps --ignore-missing-deps receiver/target/receiver-1.0-SNAPSHOT.jar)</span><br><span class="line">echo &quot;Computed mods = &#x27;$MODS&#x27;&quot;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">Patch adding the dns</span></span><br><span class="line">MODS=&quot;$MODS,jdk.naming.dns&quot;</span><br></pre></td></tr></table></figure>
<h2 id="Create-the-JDK">Create the JDK</h2>
<p>Now you just need to invoke <code>jlink</code> to generate your custom JDK:</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">% </span><span class="language-bash">jlink --verbose \</span></span><br><span class="line"><span class="language-bash">  --no-header-files \</span></span><br><span class="line"><span class="language-bash">  --no-man-pages \</span></span><br><span class="line"><span class="language-bash">  --compress=2 \</span></span><br><span class="line"><span class="language-bash">  --strip-debug \</span></span><br><span class="line"><span class="language-bash">  --add-modules <span class="string">&quot;<span class="variable">$MODS</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">  --output ./jdk</span></span><br><span class="line">java.base file:///usr/lib/jvm/java-15-openjdk-15.0.0.36-1.rolling.fc32.x86_64/jmods/java.base.jmod</span><br><span class="line">java.compiler file:///usr/lib/jvm/java-15-openjdk-15.0.0.36-1.rolling.fc32.x86_64/jmods/java.compiler.jmod</span><br><span class="line">java.logging file:///usr/lib/jvm/java-15-openjdk-15.0.0.36-1.rolling.fc32.x86_64/jmods/java.logging.jmod</span><br><span class="line">java.management file:///usr/lib/jvm/java-15-openjdk-15.0.0.36-1.rolling.fc32.x86_64/jmods/java.management.jmod</span><br><span class="line">java.naming file:///usr/lib/jvm/java-15-openjdk-15.0.0.36-1.rolling.fc32.x86_64/jmods/java.naming.jmod</span><br><span class="line">java.security.jgss file:///usr/lib/jvm/java-15-openjdk-15.0.0.36-1.rolling.fc32.x86_64/jmods/java.security.jgss.jmod</span><br><span class="line">java.security.sasl file:///usr/lib/jvm/java-15-openjdk-15.0.0.36-1.rolling.fc32.x86_64/jmods/java.security.sasl.jmod</span><br><span class="line">java.sql file:///usr/lib/jvm/java-15-openjdk-15.0.0.36-1.rolling.fc32.x86_64/jmods/java.sql.jmod</span><br><span class="line">java.transaction.xa file:///usr/lib/jvm/java-15-openjdk-15.0.0.36-1.rolling.fc32.x86_64/jmods/java.transaction.xa.jmod</span><br><span class="line">java.xml file:///usr/lib/jvm/java-15-openjdk-15.0.0.36-1.rolling.fc32.x86_64/jmods/java.xml.jmod</span><br><span class="line">jdk.management file:///usr/lib/jvm/java-15-openjdk-15.0.0.36-1.rolling.fc32.x86_64/jmods/jdk.management.jmod</span><br><span class="line">jdk.naming.dns file:///usr/lib/jvm/java-15-openjdk-15.0.0.36-1.rolling.fc32.x86_64/jmods/jdk.naming.dns.jmod</span><br><span class="line">jdk.unsupported file:///usr/lib/jvm/java-15-openjdk-15.0.0.36-1.rolling.fc32.x86_64/jmods/jdk.unsupported.jmod</span><br><span class="line"></span><br><span class="line">Providers:</span><br><span class="line">  java.base provides java.nio.file.spi.FileSystemProvider used by java.base</span><br><span class="line">  java.naming provides java.security.Provider used by java.base</span><br><span class="line">  java.security.jgss provides java.security.Provider used by java.base</span><br><span class="line">  java.security.sasl provides java.security.Provider used by java.base</span><br><span class="line">  jdk.naming.dns provides javax.naming.spi.InitialContextFactory used by java.naming</span><br><span class="line">  java.management provides javax.security.auth.spi.LoginModule used by java.base</span><br><span class="line">  java.logging provides jdk.internal.logger.DefaultLoggerFinder used by java.base</span><br><span class="line">  jdk.management provides sun.management.spi.PlatformMBeanProvider used by java.management</span><br></pre></td></tr></table></figure>
<p>This command will grab the modules you provided from your local machine and will create a JDK without manual, header files, debug symbols:</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">jdk</span><br><span class="line">├── bin</span><br><span class="line">│   ├── java</span><br><span class="line">│   └── keytool</span><br><span class="line">├── conf</span><br><span class="line">│   ├── logging.properties</span><br><span class="line">│   ├── net.properties</span><br><span class="line">│   ├── sdp</span><br><span class="line">│   └── security</span><br><span class="line">[...]</span><br><span class="line">├── lib</span><br><span class="line">[...]</span><br><span class="line">└── release</span><br></pre></td></tr></table></figure>
<h2 id="Complete-script-and-Dockerfile">Complete script and Dockerfile</h2>
<p>This is the complete Dockerfile (simplified) that builds the project and generates the JDK:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ARG</span> JAVA_IMAGE=docker.io/adoptopenjdk:<span class="number">14</span>-jdk-hotspot</span><br><span class="line"><span class="keyword">ARG</span> BASE_IMAGE=docker.io/ubuntu:bionic</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> $&#123;JAVA_IMAGE&#125; as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/AdoptOpenJDK/openjdk-docker/issues/260</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y binutils</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy all my project stuff inside the container</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Build the project</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ./mvnw package -DskipTests -Deditorconfig.skip --no-transfer-progress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate the sdk using the script (shown below)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ./generate_jdk.sh /app/receiver/target/receiver-1.0-SNAPSHOT.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Prod image</span></span><br><span class="line"><span class="keyword">FROM</span> $&#123;BASE_IMAGE&#125; as running</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create appuser and directories</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> groupadd -g 999 appuser &amp;&amp; useradd -r -u 999 -g appuser appuser &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">mkdir</span> /tmp/vertx-cache &amp;&amp; <span class="built_in">chown</span> -R appuser:appuser /tmp/vertx-cache &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  <span class="built_in">mkdir</span> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy jar and jdk inside /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/jdk /app/jdk</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/receiver/target/receiver-1.0-SNAPSHOT.jar /app/app.jar</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chown</span> -R appuser:appuser /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set appuser and configure PATH</span></span><br><span class="line"><span class="keyword">USER</span> appuser</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="comment"># Add jdk bin to the path, so you can run the java command</span></span><br><span class="line"><span class="keyword">ENV</span> PATH=<span class="string">&quot;/app/jdk/bin:$&#123;PATH&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p>And the <code>generate_jdk.sh</code> script:</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">!/usr/bin/env sh</span></span><br><span class="line"></span><br><span class="line">if [ $# -eq 0 ]</span><br><span class="line">  then</span><br><span class="line">    echo &quot;No arguments supplied, You must provide the jar&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;Computing mods for $1&quot;</span><br><span class="line">MODS=$(jdeps -q --print-module-deps --ignore-missing-deps &quot;$1&quot; | sed -e &#x27;s/^[ \t]*//&#x27;)</span><br><span class="line">echo &quot;Computed mods = &#x27;$MODS&#x27;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Patch adding the dns</span></span><br><span class="line">MODS=&quot;$MODS,jdk.naming.dns&quot;</span><br><span class="line">echo &quot;Patched modules shipped with the generated jdk = &#x27;$MODS&#x27;&quot;</span><br><span class="line"></span><br><span class="line">jlink --verbose --no-header-files --no-man-pages --compress=2 --strip-debug --add-modules &quot;$MODS&quot; --output /app/jdk</span><br></pre></td></tr></table></figure>
<p>You can run the built container with:</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">% </span><span class="language-bash">docker run imagename java -jar /app/app.jar</span></span><br></pre></td></tr></table></figure>
<h2 id="Conclusions-2">Conclusions</h2>
<p>Using <code>jdeps</code> and <code>jlink</code> our container image size is 2.5x smaller, which is a great achievement for us. We also plan to reduce it even further, in fact we want to:</p>
<ul>
<li>Investigate some modules we depend on, but that we probably don’t need: <code>java.compiler</code> and <code>java.sql</code> are two good candidates.</li>
<li>Rebase our base image on <code>alpine</code>, which uses <code>musl</code> as libc. Look at <a href="https://openjdk.java.net/projects/portola/">Project Portola</a> for more details.</li>
</ul>
<p>Check out the full PR: <a href="https://github.com/knative-sandbox/eventing-kafka-broker/pull/265">https://github.com/knative-sandbox/eventing-kafka-broker/pull/265</a></p>
]]></content>
      <tags>
        <tag>vertx</tag>
        <tag>development</tag>
        <tag>cloud</tag>
        <tag>container</tag>
        <tag>java</tag>
        <tag>jlink</tag>
        <tag>jdeps</tag>
      </tags>
  </entry>
  <entry>
    <title>JUnit 5, Parallel tests, Extensions and ThreadLocal</title>
    <url>/JUnit-5-Parallel-tests-Extensions-and-ThreadLocal/</url>
    <content><![CDATA[<p>In the <a href="https://flink.apache.org/">Apache Flink</a> community we’re in the process of <a href="https://lists.apache.org/thread/jsjvc2cqb91pyh47d4p6olk3c1vxqm3w">porting our huge test codebase to JUnit 5</a>. In order to leverage as much as we can the new JUnit 5 features, in the past days I’ve spent some time playing around with it.</p>
<p>In this blog post I’ll talk about my story about enabling the project to use the new JUnit 5 features, including parallel execution, parametrized tests and extensions, and how they’re going to help us improve our test codebase.</p>
<h2 id="Our-test-codebase">Our test codebase</h2>
<p>In Flink we’ve all kind of tests you can think of:</p>
<ul>
<li>Simple unit tests with a certain degree of mocking</li>
<li>Integration tests</li>
<li>End-to-end tests</li>
<li>Various other tests for utilities, such as tests for our bash scripts</li>
</ul>
<p>In most of the codebase, we refer to integration tests as tests that define and run a streaming job, but use a mocked sink and source. While end-to-end tests are like integration tests, but they use real external systems, such as Kafka, deployed with <a href="https://www.testcontainers.org/test_framework_integration/junit_5/">TestContainers</a>.</p>
<p>In particular in Flink SQL, <em>unsurprisingly</em>, we have a lot of integration tests, because each single feature requires to be “understood” by all the different moving parts of our stack. For example, take the built-in function <code>COALESCE</code>: it has a runtime implementation, a Table API expression <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>, a custom logic for arguments type inference and return type inference, an optimizer rule that removes the call when possible. Each of these single pieces need to work in harmony, and integration tests usually gives us the guarantee that everything fits together.</p>
<p>Another aspect of JUnit 5 tests is that we have a lot of test bases and of parametrized test bases, à la Junit 4. This is due to the organic growth of the project and the effort to try to standardize certain test aspects, like starting and stopping a Flink <code>MiniCluster</code>, the embedded Flink cluster to run test jobs.</p>
<h2 id="Goals">Goals</h2>
<p>In porting to JUnit 5, we want to:</p>
<ul>
<li>Have less test bases, but more extensions, hence composition over inheritance. This simplifies contributing new tests, as adding a new “capability” to the test suite won’t require new ad-hoc test bases.</li>
<li>Improve error reporting and test cases separation, in order to make the contributor experience nicer both when running tests from the IDE and with Maven</li>
<li>Speedup the test suite as much as possible</li>
</ul>
<p>In particular the last point is a hot topic, as today a CI run usually takes between 1 and a half and 2 hours, having a significant impact on the development loop of the project.</p>
<h2 id="Parallel-tests">Parallel tests</h2>
<p>Parallel tests are, in my opinion, the killer feature of JUnit 5 and the real incentive to port JUnit 4 tests to JUnit 5.</p>
<p>With JUnit 4 you can parallelize test execution using the build tool, for example using <a href="https://maven.apache.org/surefire/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html"><code>maven-surefire-plugin</code> fork JVM feature</a>. It runs tests in parallel by spawning several JVM processes, where each of them gets assigned a split of the overall list of tests to run. JUnit 5 on the other hand runs all the tests within the same JVM: the test runner manages a thread pool and takes care of assigning test cases to threads.</p>
<p>I think the JUnit 5 approach fits best in our use case, as spawning several JVMs is very resource intensive on constrained machines such as CI runners, so it’s a constant source of issues. This statement is also valid for contributor’s machines, as these days just running the browser with 20+ tabs open, Spotify, Slack and the IDE can easily eat up to 16Gb of RAM. Plus they work in any IDE without additional configuration, they can help you find out thread safety bugs and the granularity of the execution is easy and flexible to configure.</p>
<p>To start using JUnit 5 parallel tests, we just had to create a file called <code>junit-platform.properties</code> in our test resources and add the following:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">junit.jupiter.execution.parallel.enabled = true</span><br><span class="line">junit.jupiter.execution.parallel.config.strategy = dynamic</span><br><span class="line">junit.jupiter.execution.parallel.mode.default = same_thread</span><br></pre></td></tr></table></figure>
<p>This configuration enables to opt-in specific tests/classes to run in parallel. To flag a test class to run in parallel, we need to annotate it with <code>@Execution(CONCURRENT)</code>. Thanks to this configuration we can gradually enable parallel execution only for tests we know are safe.</p>
<p>JUnit 5 offers the ability to configure the granularity of the parallel test execution, e.g. run all test cases from all classes in parallel, run all test cases from a class sequentially but run the test classes in parallel, etc. Check out all the available options in the <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parallel-execution">JUnit 5 documentation</a>.</p>
<p>So I’ve decided I wanted to try this new feature with some complex parametrized test base. I ended up choosing <a href="https://github.com/apache/flink/blob/271c59332c794d86d221b4fe10c4435cc37d652f/flink-table/flink-table-planner/src/test/java/org/apache/flink/table/planner/functions/casting/CastRulesTest.java"><code>CastRulesTest</code></a>, a parametrized unit test base checking the runtime implementation of the <code>CAST</code> logic. Because there is no shared state whatsoever, this test suite is embarrassingly parallelizable. Just adding the annotation <code>@Execution(CONCURRENT)</code> gave me a 3x times faster execution time for the whole suite.</p>
<h2 id="Integration-tests-in-parallel">Integration tests in parallel</h2>
<p>That 3x totally got my attention, so I wanted to try to apply the same annotation to integration tests as well. As my next target, I’ve chosen <a href="https://github.com/apache/flink/blob/3cf0393d8946df3aa7a8836f5b2291791c13f215/flink-table/flink-table-planner/src/test/java/org/apache/flink/table/planner/functions/BuiltInFunctionTestBase.java"><code>BuiltInFunctionTestBase</code></a>. As the name implies, this is a parametrized integration test base we use to test the correct behaviour of our built-in functions. We have around 10 classes where we use this test base, for a total of 1200+ integration test cases.</p>
<h3 id="Porting-the-test-suite-to-JUnit-5">Porting the test suite to JUnit 5</h3>
<p>The first thing I had to do was to port to JUnit 5 the base class and its inheritors. My initial thought was to use <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-dynamic-tests"><code>@TestFactory</code> feature</a>, a new JUnit 5 feature to spawn dynamic tests, allowing you to group test cases. Think to it as a more powerful <code>@ParametrizedTest</code>.</p>
<p>This would have allowed me to have a nice nested view of the tests in the reports. For example, look at <a href="https://github.com/apache/flink/blob/3cf0393d8946df3aa7a8836f5b2291791c13f215/flink-table/flink-table-planner/src/test/java/org/apache/flink/table/planner/functions/MathFunctionsITCase.java"><code>MathFunctionsITCase</code></a>: by mixing <code>DynamicTest</code> and <code>DynamicContainer</code> I could have achieved a report like:</p>
<ul>
<li><code>MathFunctionsITCase</code>:
<ul>
<li><code>PLUS</code>:
<ul>
<li><code>f0 + 6 = 20</code>: Success</li>
<li><code>f0 + 6 = 10</code>: Failure</li>
</ul>
</li>
<li><code>MINUS</code>: […]</li>
</ul>
</li>
</ul>
<p>Because the test base itself already had some models to define test cases, including input/output data, query expressions and configuration (see <a href="https://github.com/apache/flink/blob/3cf0393d8946df3aa7a8836f5b2291791c13f215/flink-table/flink-table-planner/src/test/java/org/apache/flink/table/planner/functions/BuiltInFunctionTestBase.java#L183"><code>TestSpec</code></a>), what I had to do was simply to convert these models to <code>DynamicTest</code>/<code>DynamicContainer</code>. A little refactor of the <a href="https://github.com/apache/flink/blob/3cf0393d8946df3aa7a8836f5b2291791c13f215/flink-table/flink-table-planner/src/test/java/org/apache/flink/table/planner/functions/BuiltInFunctionTestBase.java#L87"><code>testFunction</code> method</a> to wrap the logic into <code>DynamicTest</code> did it. Now every concrete test class just had to implement the abstract method <code>getTestSpecs</code> to return the test cases defined with my <code>TestSpec</code> class, so the final implementation of the <code>@TestFactory</code> just looked like:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TestFactory</span></span><br><span class="line">Stream&lt;DynamicContainer&gt; <span class="title function_">tests</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getTestSpecs().map(TestSpec::toDynamicContainer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Every implementation class provided a <code>DynamicContainer</code>, containing a set of tests for a specific built-in function, like <code>PLUS</code>, and each container had a set of <code>DynamicTest</code> with the specific test cases for that built-in function, like <code>f0 + 6 = 20</code>.</p>
<p>Last but not least, to let the query run, I needed the extension to set up <code>MiniCluster</code> once per class. This is already available in our <code>flink-test-utils</code>, so with some copy-paste I enabled it:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">MiniClusterWithClientExtension</span> <span class="variable">MINI_CLUSTER_RESOURCE</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniClusterWithClientExtension</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">MiniClusterResourceConfiguration</span>.Builder()</span><br><span class="line">                        .setNumberTaskManagers(<span class="number">1</span>)</span><br><span class="line">                        .build());</span><br><span class="line"></span><br><span class="line"><span class="meta">@RegisterExtension</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> AllCallbackWrapper&lt;MiniClusterWithClientExtension&gt; ALL_WRAPPER =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AllCallbackWrapper</span>&lt;&gt;(MINI_CLUSTER_RESOURCE);</span><br></pre></td></tr></table></figure>
<p>Tried a first run without parallel tests, and everything ran fine. Tried to add <code>@Execution(CONCURRENT)</code>, and Intellij IDEA welcomed my idea with a long report full of red crosses.</p>
<h3 id="Fixing-the-MiniCluster-extension-first">Fixing the <code>MiniCluster</code> extension first</h3>
<p>Looking at the logs, it became evident how the problem was <code>MiniClusterWithClientExtension</code>, given several tests were trying to push jobs to a <code>MiniCluster</code> already shut down.</p>
<p>The <code>MiniClusterWithClientExtension</code> was developed by wrapping the JUnit 4 <code>MiniClusterWithClientResource</code> rule in a custom interface defining <code>before</code> and <code>after</code>. Then, to register it, you could either use <code>AllCallbackWrapper</code> or <code>EachCallbackWrapper</code> to define whether to have one <code>MiniCluster</code> per test class, or per single test.</p>
<p>In JUnit 4 rules have a <code>before</code> and <code>after</code> extension point, and then when you register them, depending on whether you use <code>@Rule</code> or <code>@ClassRule</code>, the rule is executed for each test or once per class. In JUnit 5 the user cannot pick whether the extension is used globally or per method: it’s the extension itself that defines where it can hook in the lifecycle.</p>
<p>An example of this shift of concept between JUnit 4 and 5 is provided by the JUnit 5 <code>TestContainers</code> integration, which depending on whether the container field is static or not, decides to share it between test methods or not<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.</p>
<p>Our <code>AllCallbackWrapper</code> or <code>EachCallbackWrapper</code> were circumventing the new JUnit 5 Extension paradigm, bringing back the same semantics of <code>@Rule</code> or <code>@ClassRule</code>. And this worked fine, until I tried to use parallel execution.</p>
<p>The <a href="https://github.com/apache/flink/blob/78b231f60aed59061f0f609e0cfd659d78e6fdd5/flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/test/util/MiniClusterWithClientExtension.java#L68"><code>MiniClusterWithClientExtension#before</code></a> method was starting <code>MiniCluster</code>, creating some <code>ClusterClient</code> and then setting up a thread local for the environment configuration lookup.</p>
<p>The interaction between our <code>ThreadLocal</code> configuration when using <code>AllCallbackWrapper</code> didn’t sound right, so I tried to do a little experiment. Take this simple extension:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExtension</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">BeforeEachCallback</span>, BeforeAllCallback, AfterEachCallback, AfterAllCallback &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAll</span><span class="params">(ExtensionContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before all: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeEach</span><span class="params">(ExtensionContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">                <span class="string">&quot;before &quot;</span> + context.getDisplayName() + <span class="string">&quot;: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterEach</span><span class="params">(ExtensionContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">                <span class="string">&quot;after &quot;</span> + context.getDisplayName() + <span class="string">&quot;: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAll</span><span class="params">(ExtensionContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after all: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is simply going to print the thread where the various hooks are executed, and it also prints the name of single test in case in <code>beforeEach</code>/<code>afterEach</code>. Then I tried to run this test:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExtendWith(TestExtension.class)</span></span><br><span class="line"><span class="meta">@Execution(ExecutionMode.CONCURRENT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest(name = &quot;&#123;0&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ValueSource(ints = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">name</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test: &quot;</span> + i + <span class="string">&quot;, thread: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And here is the result:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">before all: ForkJoinPool-1-worker-1</span><br><span class="line">before 2: ForkJoinPool-1-worker-3</span><br><span class="line">before 3: ForkJoinPool-1-worker-4</span><br><span class="line">before 5: ForkJoinPool-1-worker-6</span><br><span class="line">before 9: ForkJoinPool-1-worker-1</span><br><span class="line">before 4: ForkJoinPool-1-worker-5</span><br><span class="line">before 7: ForkJoinPool-1-worker-0</span><br><span class="line">before 6: ForkJoinPool-1-worker-7</span><br><span class="line">before 1: ForkJoinPool-1-worker-2</span><br><span class="line">test: 7, thread: ForkJoinPool-1-worker-0</span><br><span class="line">test: 9, thread: ForkJoinPool-1-worker-1</span><br><span class="line">test: 4, thread: ForkJoinPool-1-worker-5</span><br><span class="line">test: 1, thread: ForkJoinPool-1-worker-2</span><br><span class="line">test: 6, thread: ForkJoinPool-1-worker-7</span><br><span class="line">test: 2, thread: ForkJoinPool-1-worker-3</span><br><span class="line">test: 3, thread: ForkJoinPool-1-worker-4</span><br><span class="line">test: 5, thread: ForkJoinPool-1-worker-6</span><br><span class="line">after 4: ForkJoinPool-1-worker-5</span><br><span class="line">after 7: ForkJoinPool-1-worker-0</span><br><span class="line">after 6: ForkJoinPool-1-worker-7</span><br><span class="line">after 1: ForkJoinPool-1-worker-2</span><br><span class="line">after 5: ForkJoinPool-1-worker-6</span><br><span class="line">after 9: ForkJoinPool-1-worker-1</span><br><span class="line">after 3: ForkJoinPool-1-worker-4</span><br><span class="line">after 2: ForkJoinPool-1-worker-3</span><br><span class="line">before 8: ForkJoinPool-1-worker-3</span><br><span class="line">test: 8, thread: ForkJoinPool-1-worker-3</span><br><span class="line">before 10: ForkJoinPool-1-worker-6</span><br><span class="line">after 8: ForkJoinPool-1-worker-3</span><br><span class="line">test: 10, thread: ForkJoinPool-1-worker-6</span><br><span class="line">after 10: ForkJoinPool-1-worker-6</span><br><span class="line">after all: ForkJoinPool-1-worker-1</span><br></pre></td></tr></table></figure>
<p>As I was expecting, <code>beforeEach</code> and <code>afterEach</code> runs in the same thread of the test, as effectively they just “wrap” the test method, as described <a href="https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/extension/BeforeEachCallback.html">here</a>.</p>
<p>In other words:</p>
<ul>
<li>There is no guarantee about which thread is used to execute <code>beforeAll</code> and <code>afterAll</code>, but</li>
<li><code>beforeEach</code> and <code>afterEach</code> are guaranteed to be executed within the same thread of the test</li>
</ul>
<p>So here was the solution: we just had to set/unset that <code>ThreadLocal</code> <strong>everytime</strong> in <code>beforeEach</code>/<code>afterEach</code>, no matter whether the <code>MiniCluster</code> instance was meant to be per test class or per test method.</p>
<p>I was ready to declare victory, so I did some refactoring of <code>MiniClusterWithClientExtension</code> to always create one <code>MiniCluster</code> per test class, I removed the wrapping around <code>AllCallbackWrapper</code> and then I tried to run again my tests: still everything was red.</p>
<h3 id="Back-on-ParametrizedTest">Back on <code>@ParametrizedTest</code></h3>
<p>After some investigation, I found out that <code>DynamicTest</code> lifecycle doesn’t work per <code>DynamicTest</code> instance, while parallelization does. For example, for this test class:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExtendWith(TestExtension.class)</span></span><br><span class="line"><span class="meta">@Execution(ExecutionMode.CONCURRENT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TestFactory</span></span><br><span class="line">    <span class="keyword">public</span> Stream&lt;DynamicTest&gt; <span class="title function_">tests</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">                .mapToObj(i -&gt;</span><br><span class="line">                  DynamicTest.dynamicTest(</span><br><span class="line">                    String.valueOf(i),</span><br><span class="line">                    () -&gt; System.out.println(<span class="string">&quot;test: &quot;</span> + i + <span class="string">&quot;, thread: &quot;</span> + Thread.currentThread().getName())</span><br><span class="line">                  ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You get this output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">before all: ForkJoinPool-1-worker-1</span><br><span class="line">before tests(): ForkJoinPool-1-worker-1</span><br><span class="line">after tests(): ForkJoinPool-1-worker-1</span><br><span class="line">test: 2, thread: ForkJoinPool-1-worker-3</span><br><span class="line">test: 6, thread: ForkJoinPool-1-worker-7</span><br><span class="line">test: 3, thread: ForkJoinPool-1-worker-4</span><br><span class="line">test: 9, thread: ForkJoinPool-1-worker-1</span><br><span class="line">test: 7, thread: ForkJoinPool-1-worker-0</span><br><span class="line">test: 1, thread: ForkJoinPool-1-worker-2</span><br><span class="line">test: 4, thread: ForkJoinPool-1-worker-5</span><br><span class="line">test: 5, thread: ForkJoinPool-1-worker-6</span><br><span class="line">test: 8, thread: ForkJoinPool-1-worker-3</span><br><span class="line">test: 10, thread: ForkJoinPool-1-worker-2</span><br><span class="line">after all: ForkJoinPool-1-worker-1</span><br></pre></td></tr></table></figure>
<p>As you see, each <code>DynamicTest</code> is executed in parallel, as you would expect, but the <code>beforeEach</code> and <code>afterEach</code> is executed only once per <code>@TestFactory</code>. Because of this behaviour, the tests were not picking the correct <code>ThreadLocal</code>, hence failing the test because they could not find the <code>MiniCluster</code>.</p>
<p>It seems like there is no solution to this problem, and there is an issue open in the <a href="https://github.com/junit-team/junit5/issues/378">JUnit 5 issue tracker</a> about whether this should be supported or not.</p>
<p>So I had to fall back to the good old <code>@ParametrizedTest</code>: I just removed the nested <code>DynamicContainer</code>, and I created my own <code>DynamicTest</code> like data structure to wrap a test <code>Executable</code> and its display name:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Single test case. */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TestCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Executable executable;</span><br><span class="line"></span><br><span class="line">    TestCase(String name, Executable executable) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.executable = executable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And then I kept the same code as before in the test base, but I had to add a method to flatten the previously used <code>DynamicContainer</code>s:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> Stream&lt;TestSpec&gt; <span class="title function_">getTestSpecs</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Stream&lt;TestCase&gt; <span class="title function_">getTestCases</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getTestSpecs()</span><br><span class="line">            .flatMap(testSpec -&gt; testSpec.getTestCases(<span class="built_in">this</span>.getConfiguration()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@MethodSource(&quot;getTestCases&quot;)</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(TestCase testCase)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    testCase.executable.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The report doesn’t look as nice as with <code>@TestFactory</code>, but it finally works fine with parallel execution.</p>
<h2 id="Results-and-conclusion">Results and conclusion</h2>
<p>Before the parallelization, this test suite ran in around 50 seconds from Intellij IDEA on my i7 11th Gen packed with 16Gb of RAM. After the parallelization the suite runs in around 20 seconds<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>. Not bad.</p>
<p>I think JUnit 5 is a very powerful tool, but you need to be careful when developing extensions that are supposed to work with parallel tests. These are my gotchas from this experience:</p>
<ul>
<li>Make sure thread locals are set in <code>beforeEach</code>, so they’re set in the right thread, and <strong>cleaned up</strong> in <code>afterEach</code>, to avoid next tests reusing that thread to pick up the old <code>ThreadLocal</code> values</li>
<li>Be aware that the method <code>beforeEach</code> could be invoked in parallel on the same instance of the extension, so you need to make sure the access to extension fields is thread safe, or…</li>
<li>Use the <code>ExtensionContext.Store</code>, as it’s thread safe, it’s hierarchically organized per hook context, and it’s particularly useful to auto cleanup objects built in the <code>before[..]</code> methods</li>
<li>Rather than providing accessors in the extension class, use parameter injection implementing <code>ParameterResolver</code> together with the <code>ExtensionContext.Store</code>. This simplifies the implementation when storing your extension state in <code>ExtensionContext.Store</code>.</li>
</ul>
<p>And last but not least, don’t use <code>@TestFactory</code> in conjunction with parallel execution if your test requires <code>ThreadLocal</code> or other thread dependant thing correctly configured.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>The DSL provided by Flink SQL to define relational queries without SQL <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://www.testcontainers.org/test_framework_integration/junit_5/">TestContainers - JUnit 5 integration</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>Please take these numbers with a grain of salt, my measurements were very empirical, and not proper benchmarks <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <tags>
        <tag>testing</tag>
        <tag>junit5</tag>
        <tag>java</tag>
        <tag>flink</tag>
      </tags>
  </entry>
</search>
